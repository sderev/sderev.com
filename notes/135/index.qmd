---
title: "How to Know if an Object is an Iterable in Python"
subtitle: "Note#135"
id: "135"
date: 2023-10-19
date-modified: 2024-09-23
date-format: iso
categories: [notes]
spotlight: ""
---
**According to the [Python documentation](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable):**

> The only reliable way to determine whether an object is iterable is to call `iter(obj)`.

Therefore, always prefer using the `try-except` method to identify an object as an iterable.

## Using `try-except`

```python
def is_iterable(item):
    try:
        iter(item)
        return True
    except TypeError:
        return False
```

## Using `hasattr`

This is a straightforward way but can be a bit hard to read.

```python
hasattr(item, "__iter__") # True / False
```

## Using `isinstance`

This method is more readable.

```python
from collections.abc import Iterable

isinstance(item, Iterable) # True / False
```

However, `collections.abc.Iterable` does not consider the legacy `__getitem__` method – which is sufficient to create an iterable –, unlike an `iter()` call handling a `TypeError` exception.

## References

* [Python official documentation on `collections.abc.Iterable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable)
