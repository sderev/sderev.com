---
title: "Stop Writing Your Error Messages to `stdout`"
subtitle: "Note#107"
id: "107"
date: 2023-07-23
date-modified: ""
date-format: iso
categories: [notes]
---
Using `print()` is easy and convenient, but it prints everything to `stdout`. It can be the right tool for quick and dirty debuggingâ€”everyone does it. However, it's not without its problems. For instance, what if we want the output to go to a file instead of the screen (for logging purposes)? Also, do we really want to print our error messages to `stdout` in production?

## Using `print()` with the `file` parameter

```python
import sys

print("This is an error message.", file=sys.stderr)
```

## Using the `sys.stderr` object

```python
import sys

sys.stderr.write("This is an error message.\n")
```

Note that it's important to include the newline character `\n` at the end of the message to ensure proper formatting.

## Using `click.echo()`

The Click library allows printing to `stderr` by passing `err=True` to `click.echo()`.

```python
import click

click.echo("This is an error message.", err=True)
```

## Logging Error Messages

The `logging` module from the standard library should be preferred for complex and serious production code.

It solves the problems mentioned above and even more. It also allows for five levels of logging (from critical to debug).

### Example

Here's an example of how to configure a logging handler to write error messages to a file:                                                                      

```python
import logging

# Create a logger
logger = logging.getLogger('error_logger')
logger.setLevel(logging.ERROR)

# Create a file handler
file_handler = logging.FileHandler('error.log')

# Set the formatter
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# Add the handler to the logger
logger.addHandler(file_handler)

# Write an error message to the log file
logger.error("This is an error message.")
```

This example sets the logging level to `ERROR` to ensure that only error messages are written to the file. The log format is specified using a formatter, which includes the timestamp, log level, and log message. The `logger.error()` method is used to write the error message to the log file.

By logging error messages to a file, you can easily track and analyze them, helping to identify and troubleshoot issues more effectively.

## References

* [Logging documentation](https://docs.python.org/3/library/logging.html)
* [Logging Cookbook (python.org)](https://docs.python.org/3/howto/logging-cookbook.html)
* [Slides on the `logging` module by Reuven M. Lerner](https://speakerdeck.com/reuven/stop-using-print-using-the-logging-module)

## Related Notes

* [Note#133](/notes/133)
