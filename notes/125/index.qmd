---
title: "Using Git Interactive Rebase to Edit Commit Contents"
subtitle: "Note#125"
id: "125"
date: 2023-09-28
date-modified: 2024-10-29
date-format: iso
categories: [notes]
---
Edit the contents of a past Git commit while preserving subsequent commits.

## Steps

1. Start the rebase from the parent of the commit you want to edit:

```bash
git log  # Find the commit hash
git rebase -i <commit_hash>^
```

2. In the editor, change `pick` to `edit` for your commit:

```
pick abc1234 Earlier commit
edit def5678 The commit to modify
pick ghi9012 Later commit
```

3. Make your changes:

```bash
# Edit your files
git add -u # Or whatever you need to do
git commit --amend
```

4. Finish the rebase:

```bash
git rebase --continue
git push --force-with-lease  # If needed
```

## Recovery

If anything goes wrong:

```bash
git reflog  # Find the state before rebase
git reset --hard HEAD@{n}  # n is the number from reflog
```

But be aware that this will lose any changes you made during the rebase.

## Related Notes

* [Note#72](/notes/72)
* [Note#91](/notes/91)
