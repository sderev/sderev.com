[
  {
    "objectID": "notes/91/index.html",
    "href": "notes/91/index.html",
    "title": "Learn Git and GitHub",
    "section": "",
    "text": "Version Control – Missing Semester (MIT): An in-depth tutorial from MIT’s Missing Semester series, focusing on the concept of version control with Git. It provides a comprehensive overview and practical guidance on handling projects with Git.\nGit Basics | The Odin Project: As part of The Odin Project’s Foundations course, this tutorial offers hands-on exercises to cement the understanding of Git basics. This resource is a great learning tool for those wanting to practice and reinforce Git commands and workflows.\nLecture on Git, as part of CS50W: It’s the second week of the course CS50W, teaching about Git and GitHub.\nPro Git (Chacon & Straub): The book covers all aspects of Git, from basic commands and workflows to advanced features like rebasing, submodules, and server administration. It’s highly recommended for both beginners looking for a comprehensive introduction and experienced users wanting a handy reference.\nman gittutorial: As a hands-on introduction to Git, it introduces fundamental concepts and basic usage scenarios. It is an ideal step-by-step guide for Git beginners.\nman giteveryday: A useful guide that offers a set of commands for typical Git usage scenarios. It’s a handy manual for everyday Git tasks.\nman gitworkflows: This manual unravels different workflows in Git, aiding in understanding how Git can be efficiently deployed in a team environment.\nman git\n3 short lessons on Git from MIT 6.102:\n\nGit 1: Version Control\nGit 2: Disaster Recovery\nGit 3: Team Version Control\n\nLearn Git Branching: An interactive tutorial to learn about Git branching.\nThePrimeagen doing both of his own boot.dev courses on git\n\n\n\n\n\nBoost your Git DX, by Adam Johnson: This book is definitely worth reading if you’re seeking to learn about Git from a workflow-oriented perspective.\nHow Git Works, by Julia Evans: A short and easy read about the fundamentals of Git.\nEverything You’ll Need to Know About Git: ThePrimeagen teaching Git on Frontend Masters.\nLearn Git: Again, ThePrimeagen teaching Git but on boot.dev."
  },
  {
    "objectID": "notes/91/index.html#git-documentation-and-learning-resources",
    "href": "notes/91/index.html#git-documentation-and-learning-resources",
    "title": "Learn Git and GitHub",
    "section": "",
    "text": "Version Control – Missing Semester (MIT): An in-depth tutorial from MIT’s Missing Semester series, focusing on the concept of version control with Git. It provides a comprehensive overview and practical guidance on handling projects with Git.\nGit Basics | The Odin Project: As part of The Odin Project’s Foundations course, this tutorial offers hands-on exercises to cement the understanding of Git basics. This resource is a great learning tool for those wanting to practice and reinforce Git commands and workflows.\nLecture on Git, as part of CS50W: It’s the second week of the course CS50W, teaching about Git and GitHub.\nPro Git (Chacon & Straub): The book covers all aspects of Git, from basic commands and workflows to advanced features like rebasing, submodules, and server administration. It’s highly recommended for both beginners looking for a comprehensive introduction and experienced users wanting a handy reference.\nman gittutorial: As a hands-on introduction to Git, it introduces fundamental concepts and basic usage scenarios. It is an ideal step-by-step guide for Git beginners.\nman giteveryday: A useful guide that offers a set of commands for typical Git usage scenarios. It’s a handy manual for everyday Git tasks.\nman gitworkflows: This manual unravels different workflows in Git, aiding in understanding how Git can be efficiently deployed in a team environment.\nman git\n3 short lessons on Git from MIT 6.102:\n\nGit 1: Version Control\nGit 2: Disaster Recovery\nGit 3: Team Version Control\n\nLearn Git Branching: An interactive tutorial to learn about Git branching.\nThePrimeagen doing both of his own boot.dev courses on git\n\n\n\n\n\nBoost your Git DX, by Adam Johnson: This book is definitely worth reading if you’re seeking to learn about Git from a workflow-oriented perspective.\nHow Git Works, by Julia Evans: A short and easy read about the fundamentals of Git.\nEverything You’ll Need to Know About Git: ThePrimeagen teaching Git on Frontend Masters.\nLearn Git: Again, ThePrimeagen teaching Git but on boot.dev."
  },
  {
    "objectID": "notes/91/index.html#github",
    "href": "notes/91/index.html#github",
    "title": "Learn Git and GitHub",
    "section": "GitHub",
    "text": "GitHub\n\nGitHub Skills\n\nLearn how to use GitHub with interactive courses designed for beginners and experts.\nGitHub Skills\n\nThese courses are a great way to familiarize yourself with the GitHub environment.\n\n\nGitHub CLI: gh\nAlmost everything you can do on the GitHub website, you can do it in a CLI with gh.\n\nGitHub CLI is a command-line tool that brings pull requests, issues, GitHub Actions, and other GitHub features to your terminal, so you can do all your work in one place.\nhttps://docs.github.com/en/github-cli/github-cli/about-github-cli\n\n\nman gh\nGitHub CLI manual: This is the official online manual for GitHub CLI, a comprehensive guide that covers installation, usage, and command examples.\n\n\n\nGitHub Docs\n\nHelp for wherever you are on your GitHub journey\nGitHub Docs"
  },
  {
    "objectID": "notes/91/index.html#related-notes",
    "href": "notes/91/index.html#related-notes",
    "title": "Learn Git and GitHub",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#72\nNote#125\nNote#159"
  },
  {
    "objectID": "notes/146/index.html",
    "href": "notes/146/index.html",
    "title": "Automating a Reading Note Template Generation Using Zotero Metadata",
    "section": "",
    "text": "I wanted to easily write some notes for any article when I feel like it, in the same way I already do with anything else. However, I wanted to have a template with some metadata about the article. This metadata would contain elements like the title, the publication date, keywords, URL, and abstract."
  },
  {
    "objectID": "notes/146/index.html#requirements",
    "href": "notes/146/index.html#requirements",
    "title": "Automating a Reading Note Template Generation Using Zotero Metadata",
    "section": "Requirements",
    "text": "Requirements\n\nZotero\nBetterBibTex\nA script to parse the BetterBibTex export and generate the notes"
  },
  {
    "objectID": "notes/146/index.html#workflow",
    "href": "notes/146/index.html#workflow",
    "title": "Automating a Reading Note Template Generation Using Zotero Metadata",
    "section": "Workflow",
    "text": "Workflow\nI use Zotero and the “Save to Zotero” web browser extension to archive articles I might be interested in reading.\nThis workflow also needs the BetterBibTex plugin for Zotero, which allows me to export the metadata of the articles in a format that I can easily parse. BetterBibTex automatically updates the export file when I add an article in Zotero.\nNow, when I want to write some notes on an article, here is what I do:\n\nOpen the BetterBibTex export file.\nSearch for the article I want to write about.\nSelect the metadata.\nRun a script that generates a note template with the selected metadata."
  },
  {
    "objectID": "notes/45/index.html",
    "href": "notes/45/index.html",
    "title": "How to sort inside brackets (parentheses, etc.) in Vim",
    "section": "",
    "text": "Sorting text inside brackets, parentheses, or curly brackets in Vim can be done with a simple command. However, cases where the text is not appropriately formatted may require more effort and a better approach."
  },
  {
    "objectID": "notes/45/index.html#basic-sorting-command",
    "href": "notes/45/index.html#basic-sorting-command",
    "title": "How to sort inside brackets (parentheses, etc.) in Vim",
    "section": "Basic Sorting Command",
    "text": "Basic Sorting Command\n\nSuppose you have this CSS code\n.selector {\n    width: 100vw;\n    display: flex;\n    border: 1px solid red;\n    color: blue;\n}\n\n\nPlace the cursor inside the curly brackets and enter the following command\nvi{:sor"
  },
  {
    "objectID": "notes/45/index.html#sorting-text-inside-square-brackets",
    "href": "notes/45/index.html#sorting-text-inside-square-brackets",
    "title": "How to sort inside brackets (parentheses, etc.) in Vim",
    "section": "Sorting Text Inside Square Brackets",
    "text": "Sorting Text Inside Square Brackets\n[\n    85,\n    33,\n    2,\n    55,\n    5,\n]\nThis is the same idea but don’t forget the n parameter to sort the numbers for humans.\n\nUse this command\nvi[:sor n"
  },
  {
    "objectID": "notes/45/index.html#but-it-doesnt-always-work",
    "href": "notes/45/index.html#but-it-doesnt-always-work",
    "title": "How to sort inside brackets (parentheses, etc.) in Vim",
    "section": "But it doesn’t always work",
    "text": "But it doesn’t always work\nThe reason why the above commands work is because the elements to sort are separated by a newline character.\n\nNow, imagine you have a list formatted like below\n[88, 54, 23, 8, 39, 16, 2, 5]\nThe previous command doesn’t work anymore.\n\n\nTo solve this problem, you might think it could be a good idea to create a cumbersome keybind in your .vimrc\nnnoremap &lt;leader&gt;sor F[a&lt;CR&gt;&lt;Esc&gt;f]i, &lt;Esc&gt;vi[:s/, /,\\r/g&lt;CR&gt;vi[:sort n&lt;CR&gt;vi[:s/,\\n/, /g&lt;CR&gt;%&lt;S-J&gt;xf]XX\nAfter having placed your cursor inside the brackets, this very long command performs three actions:\n\nit adds a newline character after each number;\nit sorts the numbers;\nit reformats the sorted numbers to appear on a single line.\n\nObviously, don’t do this… even if it kinda works and that the keybind looks funny."
  },
  {
    "objectID": "notes/45/index.html#write-python-code-or-any-interpreted-language-for-that-matter",
    "href": "notes/45/index.html#write-python-code-or-any-interpreted-language-for-that-matter",
    "title": "How to sort inside brackets (parentheses, etc.) in Vim",
    "section": "Write Python code (or any interpreted language, for that matter)",
    "text": "Write Python code (or any interpreted language, for that matter)\nA more reliable solution would be to call the built-in sorted() Python function.\n\nWrite the text you want to sort in Python syntax.\nprint(sorted([88, 54, 23, 8, 39, 16, 2, 5]))\n\n\nPlace your cursor on the line and call Python by entering the following command\n:.!python3\nThe numbers are now sorted."
  },
  {
    "objectID": "notes/14/index.html",
    "href": "notes/14/index.html",
    "title": "Experts and Novices don’t learn the same way",
    "section": "",
    "text": "Novice\nExpert\n\n\n\n\nPossesses little relevant background knowledge and skills (simple, messy and superficial cognitive schemas)\nHas a lot of relevant background knowledge (complex, well-organised and deep cognitive schemas).\n\n\nWorking memory restriction\nLong-term memory support\n\n\nDistracted by superficial details\nFocused on the underlying (deeper) structures and/or patterns.\n\n\nLearns best through explicit instruction and worked examples\nLearns best through discovery and/or investigative approach\n\n\nHas difficulty in transferring certain principles to new contexts (transfer)\nCan transfer principles to related domains\n\n\n\nDifferences between novice and expert (adapted from Didau, 2019)\n\n\nQuality education starts with a good teacher, not with a facilitator, guide, or coach. Apart from the learner her- or himself, the teacher is the most important factor when it comes to academic success (Hattie, 2003). In education, we should therefore continue to focus on and rely on the craftsmanship of teachers, rather than organising education in a way that bypasses them.\n\n#education #memory #learning #study\nhttps://learningspy.co.uk/literacy/constructivism-is-not-a-pedagogy/"
  },
  {
    "objectID": "notes/17/index.html",
    "href": "notes/17/index.html",
    "title": "How to make .bashrc aliases available within a Vim shell command (:.!bash)",
    "section": "",
    "text": "If you want non-interactive shell (as default) but expansion of bash aliases, put your alias definitions in a file, e.g. .bash_aliases and explicitly enable alias expansion in this file:\nshopt -s expand_aliases  \nalias la='ls -la'\nThen add this to your .vimrc so the aliases file is actually read each time you run a shell command from within Vim:\nlet $BASH_ENV = \"~/.bash_aliases\"\nsource: https://stackoverflow.com/a/18901595"
  },
  {
    "objectID": "notes/17/index.html#my-opinion",
    "href": "notes/17/index.html#my-opinion",
    "title": "How to make .bashrc aliases available within a Vim shell command (:.!bash)",
    "section": "My opinion",
    "text": "My opinion\nUsing scripts should be the preferred method though, as they are reliable and shareable. It’s generally a good idea to follow the principles of the Unix philosophy."
  },
  {
    "objectID": "notes/161/index.html",
    "href": "notes/161/index.html",
    "title": "Use Multiple GitHub Accounts with the gh CLI",
    "section": "",
    "text": "There is no configuration needed other than authenticating another account with gh auth login. After that, the new account will be added to ~/.config/gh/hosts.yaml.\nYou can see which accounts are associated with your configuration by running gh auth status. You’ll also see which account is currently active.\nAs of now, you have to manually switch the active account, which you can do with gh auth switch.\nsource: https://github.com/cli/cli/releases/tag/v2.40.0"
  },
  {
    "objectID": "notes/77/index.html",
    "href": "notes/77/index.html",
    "title": "How to Add a title and alt Attribute, and a caption to an Image Using Pandoc Markdown",
    "section": "",
    "text": "In Pandoc Markdown, you can add a title and alt attribute, as well as a caption (using the fig-alt attribute key) to an image as follows:\n![Alt text](elephant.png \"Title: An elephant\"){fig-alt=\"A drawing of an elephant.\"}\nCaveat: The whole string (viz. including “Title:”) will be used as the value of the title attribute."
  },
  {
    "objectID": "notes/182/index.html",
    "href": "notes/182/index.html",
    "title": "Standard Recursive Paradigm",
    "section": "",
    "text": "From the book Programming Abstractions in C++:\nif (test for simple case) {\n    // Compute a simple solution without using recursion.\n} else {\n    // Break the problem down into subproblems of the same form.\n    // Solve each of the subproblems by calling this function recursively.\n    // Reassemble the subproblem solutions into a solution for the whole.\n}"
  },
  {
    "objectID": "notes/3/index.html",
    "href": "notes/3/index.html",
    "title": "How to remap keys in Linux",
    "section": "",
    "text": "Use xev to find out which key you want to remap. Then create ~/.Xmodmap.\nHere’s an example of to remap a key:\nAdd the following line to your .bashrc or .zshrc to make it permanent:"
  },
  {
    "objectID": "notes/3/index.html#remap-caps_lock-to-escape",
    "href": "notes/3/index.html#remap-caps_lock-to-escape",
    "title": "How to remap keys in Linux",
    "section": "Remap <Caps_Lock> to <Escape>",
    "text": "Remap &lt;Caps_Lock&gt; to &lt;Escape&gt;\nclear Lock\nkeycode 66 = Nosymbol Nosymbol Nosymbol \nkeycode 66 = Escape\n\nWhen using GNOME\nIf you’re using GNOME, you can remap the &lt;Caps_Lock&gt; key by following these steps:\n\ninstall gnome-tweaks;\ngo to Keyboard and Mouse;\ngo to Additional Layout Options;\nclick on Caps Lock behavior;\nclick on Make Caps Lock an additional Esc.\n\n\n\nWhen using i3\nIf you’re using i3, add this to the end of your i3 configuration file ~/.config/i3/config:\nexec --no-startup-id setxkbmap -option caps:escape\nTo take effect, you have to restart i3. You can do this by logging out and logging back."
  },
  {
    "objectID": "notes/3/index.html#related-notes",
    "href": "notes/3/index.html#related-notes",
    "title": "How to remap keys in Linux",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#87"
  },
  {
    "objectID": "notes/156/index.html",
    "href": "notes/156/index.html",
    "title": "The hosts File as a Self-Care Hack to Block Distractions",
    "section": "",
    "text": "I was squandering too much time on chess.com (no link for your own sanity), even though I really wanted to stop playing. That’s one way to define an addiction. I struggled to find an easy method to add parental controls or something like that, with the only option seeming to be the installation of a web browser extension. However, I couldn’t find one that would work as I wanted (no ads, no registration, etc.). Also, it’s too easy to turn off.\nSo here comes the hosts file solution. It’s somewhat easy to disable as well, but it requires more steps than just clicking a button. And it works for all web browsers at once—no need to install an extension for each one.\nYou might be tempted to write a script to toggle the blocking on and off, but that would defeat the purpose. While it may not add much friction—since it’s easy to disable—, doing it manually helps prevent you from falling back into the cycle you’re trying to escape. You’ll be more conscious of your actions, and that’s what we want: to stop being the puppet of our impulses."
  },
  {
    "objectID": "notes/156/index.html#editing-the-hosts-file",
    "href": "notes/156/index.html#editing-the-hosts-file",
    "title": "The hosts File as a Self-Care Hack to Block Distractions",
    "section": "Editing the hosts File",
    "text": "Editing the hosts File\nThe hosts file is a simple text file that maps hostnames to IP addresses.\nFirst, you need to open it with administrator privileges to edit it.\n\nUnix-like Systems\nsudo vim /etc/hosts\n\n\nWindows\nC:\\Windows\\System32\\drivers\\etc\\hosts\nOr via WSL:\nOpen your terminal with administrator privileges.\nsudo vim /mnt/c/Windows/System32/drivers/etc/hosts"
  },
  {
    "objectID": "notes/156/index.html#blocking-websites",
    "href": "notes/156/index.html#blocking-websites",
    "title": "The hosts File as a Self-Care Hack to Block Distractions",
    "section": "Blocking Websites",
    "text": "Blocking Websites\nAnd now, you just redirect whatever website you want to block to 127.0.0.1.\n127.0.0.1    chess.com\n127.0.0.1    www.chess.com"
  },
  {
    "objectID": "notes/162/index.html",
    "href": "notes/162/index.html",
    "title": "Show the Lines of Context Around a ripgrep or grep Search",
    "section": "",
    "text": "The same options apply to both grep and ripgrep (rg)."
  },
  {
    "objectID": "notes/162/index.html#show-the-lines-before-the-matching-lines",
    "href": "notes/162/index.html#show-the-lines-before-the-matching-lines",
    "title": "Show the Lines of Context Around a ripgrep or grep Search",
    "section": "Show the Lines Before the Matching Lines",
    "text": "Show the Lines Before the Matching Lines\nrg -B 3 \"keyword\" filename"
  },
  {
    "objectID": "notes/162/index.html#show-the-lines-after-the-matching-lines",
    "href": "notes/162/index.html#show-the-lines-after-the-matching-lines",
    "title": "Show the Lines of Context Around a ripgrep or grep Search",
    "section": "Show the Lines After the Matching Lines",
    "text": "Show the Lines After the Matching Lines\nrg -A 3 \"keyword\" filename"
  },
  {
    "objectID": "notes/162/index.html#show-the-lines-around-the-matching-lines",
    "href": "notes/162/index.html#show-the-lines-around-the-matching-lines",
    "title": "Show the Lines of Context Around a ripgrep or grep Search",
    "section": "Show the Lines Around the Matching Lines",
    "text": "Show the Lines Around the Matching Lines\nrg -C 3 \"keyword\" filename"
  },
  {
    "objectID": "notes/0/index.html",
    "href": "notes/0/index.html",
    "title": "Citation de Louis Blanc",
    "section": "",
    "text": "De chacun selon ses moyens, à chacun selon ses besoins.\n\nReprise et popularisée par Karl Marx.\nhttps://fr.wikipedia.org/wiki/De_chacun_selon_ses_moyens,_%C3%A0_chacun_selon_ses_besoins"
  },
  {
    "objectID": "notes/10/index.html",
    "href": "notes/10/index.html",
    "title": "How to disable ligatures for the Fira Code font in Windows Terminal",
    "section": "",
    "text": "Add these parameters in the JSON settings file:\n\"font\": \n{\n  \"face\": \"Fira Code Retina\",\n  \"size\": 16,\n  \"weight\": \"medium\",\n  \"features\": {\n    \"liga\": 0,\n    \"calt\": 0\n  } \n},"
  },
  {
    "objectID": "notes/50/index.html",
    "href": "notes/50/index.html",
    "title": "pushd and popd are on a boat…",
    "section": "",
    "text": "pushd and popd are shell commands that allow you to manipulate the directory stack in Linux and Unix-like systems. The directory stack is a list of directories to which you can quickly switch back and forth. Using pushd and popd can make navigating through the file system more efficient.\n\npushd command\nThe pushd command adds a directory to the top of the stack and changes the current directory to the specified one:\npushd /path/to/directory\n\n\npopd command\nThe popd command removes the top directory from the stack and changes the current directory to the one that was removed:\npopd\n\n\nCommon use case\nYou can use pushd and popd to switch between two directories easily. First, navigate to the first directory, then use pushd to switch to the second directory. To switch back to the first directory, use popd.\ncd /path/to/first_directory\npushd /path/to/second_directory\npopd\n\n\ndirs command\nThe pushd, popd, and dirs commands are built-in to most Unix-like shells, allowing you to manage the directory stack and efficiently navigate the file system."
  },
  {
    "objectID": "notes/104/index.html",
    "href": "notes/104/index.html",
    "title": "ed Is Pronounced “ee-dee”",
    "section": "",
    "text": "This was stated by Brian Kernighan: https://youtu.be/NTfOnGZUZDk?t=113."
  },
  {
    "objectID": "notes/132/index.html",
    "href": "notes/132/index.html",
    "title": "rich.status: a Spinner for Better CLI UX",
    "section": "",
    "text": "I really should read the documentation of the Rich library in detail… I just found another gem: the rich.status module, which provides a spinner and status message while a task is being processed. This visual feedback informs the user that the application is actively working on a task, contributing to a more engaging and informative user interaction."
  },
  {
    "objectID": "notes/132/index.html#code-example",
    "href": "notes/132/index.html#code-example",
    "title": "rich.status: a Spinner for Better CLI UX",
    "section": "Code Example",
    "text": "Code Example\nimport asyncio\nimport random\nfrom rich.console import Console\nfrom rich.status import Status\n\nasync def simulated_task():\n    # Simulate a task that may raise an error\n    await asyncio.sleep(2)\n    if random.random() &lt; 0.5:  # 50% chance of error\n        raise ValueError(\"An error occurred\")\n    await asyncio.sleep(2)\n\nasync def main():\n    encountered_error = False\n    console = Console()\n    with console.status(\"[bold cyan]Processing...\") as status:\n        try:\n            await simulated_task()\n            status.update(\"[bold green]Success!\")\n        except ValueError as error:\n            status.update(f\"[bold red]{error}\")\n            encountered_error = True\n        await asyncio.sleep(2)  # Simulate additional processing\n        console.print(\n            \"Task complete\" if not encountered_error else \"Task encountered an error\"\n        )\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
  },
  {
    "objectID": "notes/132/index.html#spinner-styles",
    "href": "notes/132/index.html#spinner-styles",
    "title": "rich.status: a Spinner for Better CLI UX",
    "section": "Spinner Styles",
    "text": "Spinner Styles\nTo view all the predefined spinner style names along with their visual representation, run the following command in your terminal:\npython -m rich.spinner\nMake sure you have the Rich library installed in your virtual environment (python -m pip install rich)."
  },
  {
    "objectID": "notes/132/index.html#references",
    "href": "notes/132/index.html#references",
    "title": "rich.status: a Spinner for Better CLI UX",
    "section": "References",
    "text": "References\n\nRich rich.status Documentation\nRich GitHub Repository"
  },
  {
    "objectID": "notes/132/index.html#related-notes",
    "href": "notes/132/index.html#related-notes",
    "title": "rich.status: a Spinner for Better CLI UX",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#70\nNote#112\nNote#131"
  },
  {
    "objectID": "notes/149/index.html",
    "href": "notes/149/index.html",
    "title": "How to Execute Parallel and Concurrent Commands in Bash",
    "section": "",
    "text": "As a reminder:"
  },
  {
    "objectID": "notes/149/index.html#using-and-wait",
    "href": "notes/149/index.html#using-and-wait",
    "title": "How to Execute Parallel and Concurrent Commands in Bash",
    "section": "Using & and wait",
    "text": "Using & and wait\nThis is for concurrent execution.\nUsing & after a command will put it in the background, and wait will wait for all background processes to finish.\n\nExample\n#!/bin/bash\n\necho \"Starting\"\n\ncommand1 &\ncommand2 &\nwait\n\necho \"Finished\""
  },
  {
    "objectID": "notes/149/index.html#using-gnu-parallel",
    "href": "notes/149/index.html#using-gnu-parallel",
    "title": "How to Execute Parallel and Concurrent Commands in Bash",
    "section": "Using GNU Parallel",
    "text": "Using GNU Parallel\n\nExample\n#!/bin/bash\n\necho \"Starting\"\n\nparallel ::: \"command1\" \"command2\"\n\necho \"Finished\"\n\n\nExample Using pipe\n#!/bin/bash\n\necho \"Starting\"\n\necho \"command1\" &gt; commands.txt\necho \"command2\" &gt;&gt; commands.txt\n\ncat commands.txt | parallel"
  },
  {
    "objectID": "notes/110/index.html",
    "href": "notes/110/index.html",
    "title": "Extracting Unique Patterns with grep or ripgrep",
    "section": "",
    "text": "Extract and sort unique instances of a pattern (ERROR:\\w*) from a file:\nOr to save to a file:\nFor ripgrep (rg), add -N to -o to prevent line numbers in output:"
  },
  {
    "objectID": "notes/110/index.html#breakdown",
    "href": "notes/110/index.html#breakdown",
    "title": "Extracting Unique Patterns with grep or ripgrep",
    "section": "Breakdown",
    "text": "Breakdown\n\ngrep -o 'ERROR:\\w*' logfile or rg -o -N 'ERROR:\\w*' logfile: Extracts ERROR: followed by any number of word characters ([a-zA-Z0-9_]).\nsort -u: Sorts and removes duplicates.\nless or &gt; sorted_errors.txt: Displays results or saves to file.\n\nReplace logfile with your file and adjust the pattern as needed."
  },
  {
    "objectID": "notes/138/index.html",
    "href": "notes/138/index.html",
    "title": "Using Canonical Form via String Sorting for Anagram Grouping",
    "section": "",
    "text": "When solving problems related to anagrams, one efficient technique to group them is by converting each string to its Canonical Form."
  },
  {
    "objectID": "notes/138/index.html#the-concept",
    "href": "notes/138/index.html#the-concept",
    "title": "Using Canonical Form via String Sorting for Anagram Grouping",
    "section": "The Concept",
    "text": "The Concept\nCanonical Form refers to normalizing data into a uniform representation. In the context of anagrams, sorting the string’s letters provides a standardized or canonical form of that string. All anagrams will map to this same sorted string, making it easier to group them together."
  },
  {
    "objectID": "notes/138/index.html#python-implementation",
    "href": "notes/138/index.html#python-implementation",
    "title": "Using Canonical Form via String Sorting for Anagram Grouping",
    "section": "Python Implementation",
    "text": "Python Implementation\nfrom typing import List, Dict\n\ndef group_anagrams(strs: List[str]) -&gt; List[List[str]]:\n    anagrams: Dict[str, List[str]] = {}\n    for word in strs:\n        sorted_word = \"\".join(sorted(word))\n        if sorted_word not in anagrams:\n            anagrams[sorted_word] = []\n        anagrams[sorted_word].append(word)\n    return list(anagrams.values())"
  },
  {
    "objectID": "notes/138/index.html#computational-complexity",
    "href": "notes/138/index.html#computational-complexity",
    "title": "Using Canonical Form via String Sorting for Anagram Grouping",
    "section": "Computational Complexity",
    "text": "Computational Complexity\nThe time complexity is `O(n \\cdot k \\log k)`, where `n` is the number of strings and `k` is the maximum length of a string. This is primarily because sorting each string takes `O(k \\log k)` time."
  },
  {
    "objectID": "notes/95/index.html",
    "href": "notes/95/index.html",
    "title": "RGB vs HSL Color Models",
    "section": "",
    "text": "RGB (Red, Green, Blue) is an additive color model. It operates on the principle that colors are produced by combining different intensities of red, green, and blue light.\n\n\n\nDirectly represents the color in digital displays, making it the most used in digital technologies.\nBetter for dealing with real-world, multi-color light situations, like in photography and television.\n\n\n\n\n\nNot intuitive for manual color modifications.\nChallenging to create aesthetically pleasing color schemes without a good understanding of how colors mix."
  },
  {
    "objectID": "notes/95/index.html#rgb-model",
    "href": "notes/95/index.html#rgb-model",
    "title": "RGB vs HSL Color Models",
    "section": "",
    "text": "RGB (Red, Green, Blue) is an additive color model. It operates on the principle that colors are produced by combining different intensities of red, green, and blue light.\n\n\n\nDirectly represents the color in digital displays, making it the most used in digital technologies.\nBetter for dealing with real-world, multi-color light situations, like in photography and television.\n\n\n\n\n\nNot intuitive for manual color modifications.\nChallenging to create aesthetically pleasing color schemes without a good understanding of how colors mix."
  },
  {
    "objectID": "notes/95/index.html#hsl-model",
    "href": "notes/95/index.html#hsl-model",
    "title": "RGB vs HSL Color Models",
    "section": "HSL Model",
    "text": "HSL Model\nHSL (Hue, Saturation, Lightness) describes colors based on human perception. Hue refers to the color itself, saturation to the color’s intensity or purity, and lightness to how bright or dark the color is.\n\nAdvantages of HSL\n\nIntuitive for manual color modifications.\nEasier to create color schemes as colors are arranged in a more human-understandable way.\n\n\n\nDisadvantages of HSL\n\nDoesn’t represent colors as they are in digital displays, therefore, the exact color representation might differ slightly based on the software.\nNot ideal for representing real-world light, hence not often used in photography or video software."
  },
  {
    "objectID": "notes/95/index.html#choosing-the-right-model",
    "href": "notes/95/index.html#choosing-the-right-model",
    "title": "RGB vs HSL Color Models",
    "section": "Choosing the Right Model",
    "text": "Choosing the Right Model\nThe choice between RGB and HSL depends on the specific context:\n\nHardware Level Programming and Image Processing: RGB is more suitable.\nDesigning and Art Creation: HSL is often better.\nWeb Development: Both are used. HSL can be better when creating color themes or when needing to adjust a color’s saturation or lightness.\nPhotography/Video Editing Software: Both are provided, with RGB being used more commonly, but HSL used for more precise control over color, saturation, and lightness/darkness of an image."
  },
  {
    "objectID": "notes/95/index.html#hsl-in-web-development",
    "href": "notes/95/index.html#hsl-in-web-development",
    "title": "RGB vs HSL Color Models",
    "section": "HSL in Web Development",
    "text": "HSL in Web Development\nIn web development, HSL can have several advantages:\n\nEasier creation of color themes and accessibility improvements.\nMore intuitive color control in CSS.\nImproved understanding and collaboration among team members.\nMore aesthetically pleasing color transitions for animations."
  },
  {
    "objectID": "notes/38/index.html",
    "href": "notes/38/index.html",
    "title": "How to switch the case of characters in Vim",
    "section": "",
    "text": "~\nToggles case of the character under the cursor.\n\n\n4~\nToggles case of the next four characters.\n\n\ng~3w\nToggles case of the next three words.\n\n\ng~iw\nToggles case of the inner word.\n\n\ng~$\nToggles case of all the characters to the end of the line.\n\n\ng~~\nToggles case of all the characters of the current line.\n\n\ngUiw\nSwitches to upper case all of the characters of the inner word.\n\n\ngUU or VU\nSwitches to upper case all the characters of the current line.\nYou can replace U by u to lower the case of the characters."
  },
  {
    "objectID": "notes/71/index.html",
    "href": "notes/71/index.html",
    "title": "Handling Long Strings in Python",
    "section": "",
    "text": "long_string = (\"This is a very long string that should be \"\n               \"broken into multiple lines for better \"\n               \"readability and without having to scroll \"\n               \"horizontally.\")\nThis method maintains the original string without introducing extra whitespace or newline characters, making it ideal for long strings that should be treated as a single line.\n\n\n\nlong_string = \"\"\"This is a very long string that should be\nbroken into multiple lines for better\nreadability and without having to scroll\nhorizontally.\"\"\"\nThis method preserves newline characters and leading spaces, making it suitable for cases where the string’s original formatting, including line breaks and indentation, needs to be retained."
  },
  {
    "objectID": "notes/71/index.html#breaking-long-strings-into-multiple-lines",
    "href": "notes/71/index.html#breaking-long-strings-into-multiple-lines",
    "title": "Handling Long Strings in Python",
    "section": "",
    "text": "long_string = (\"This is a very long string that should be \"\n               \"broken into multiple lines for better \"\n               \"readability and without having to scroll \"\n               \"horizontally.\")\nThis method maintains the original string without introducing extra whitespace or newline characters, making it ideal for long strings that should be treated as a single line.\n\n\n\nlong_string = \"\"\"This is a very long string that should be\nbroken into multiple lines for better\nreadability and without having to scroll\nhorizontally.\"\"\"\nThis method preserves newline characters and leading spaces, making it suitable for cases where the string’s original formatting, including line breaks and indentation, needs to be retained."
  },
  {
    "objectID": "notes/71/index.html#automating-long-string-reformatting-with-black",
    "href": "notes/71/index.html#automating-long-string-reformatting-with-black",
    "title": "Handling Long Strings in Python",
    "section": "Automating Long String Reformatting with Black",
    "text": "Automating Long String Reformatting with Black\nBlack can automatically break long strings according to the configured line length limit. By default, Black uses a line length of 88 characters but can be adjusted using the --line-length option.\n\nTo adjust the line length:\nblack --line-length 100 your_file.py"
  },
  {
    "objectID": "notes/71/index.html#maximum-line-lengths",
    "href": "notes/71/index.html#maximum-line-lengths",
    "title": "Handling Long Strings in Python",
    "section": "Maximum Line Lengths",
    "text": "Maximum Line Lengths\n\nPEP 8 recommends a maximum line length of 79 characters for Python code.\nBlack uses a default line length of 88 characters.\n\nThese limits can be customized, but sticking to the recommended limits ensures consistent code style and readability across different projects and teams."
  },
  {
    "objectID": "notes/71/index.html#related-notes",
    "href": "notes/71/index.html#related-notes",
    "title": "Handling Long Strings in Python",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#74"
  },
  {
    "objectID": "notes/34/index.html",
    "href": "notes/34/index.html",
    "title": "What are the five critera for good interface design?",
    "section": "",
    "text": "To design an effective interface, you must balance several criteria. In general, you should try to develop interfaces that are:\n\nUnified. A single interface should define a consistent abstraction with a clear unifying theme. If a function does not fit within that theme, it should be defined in a separate interface.\nSimple. To the extent that the underlying implementation is itself complex, the interface must hide as much of that complexity from the client as possible.\nSufficient. When clients use an abstraction, the interface must provide sufficient functionality to meet their needs. If some critical operation is missing from an interface, clients may decide to abandon it and develop their own, more powerful abstraction. As important as simplicity is, the designer must avoid simplifying an interface to the point that it becomes useless.\nGeneral. A well-designed interface should be flexible enough to meet the needs of many different clients. An interface that performs a narrowly defined set of operations for one client is not as useful as one that can be used in many different situations.\nStable. The functions defined in an interface should continue to have precisely the same structure and effect, even if their underlying implementation changes. Making changes in the behavior of an interface forces clients to change their programs, which compromises the value of the interface.\n\n\nQuoted from Programming Abstractions in C++, (Chapter 2.7)."
  },
  {
    "objectID": "notes/175/index.html",
    "href": "notes/175/index.html",
    "title": "Easily move a WSL distribution to another drive",
    "section": "",
    "text": "No more export/import. Since WSL2 2.3.11, there is a new command to move a WSL distribution to another drive.\nwsl --manage &lt;Distro&gt; --move &lt;Location&gt;"
  },
  {
    "objectID": "notes/111/index.html",
    "href": "notes/111/index.html",
    "title": "UUID: An Introduction and Usage",
    "section": "",
    "text": "UUID stands for Universally Unique Identifier.\nA UUID is a 128-bit number used to uniquely identify some object or entity on the Internet.\nIn its canonical form, a UUID is represented by 32 lowercase hexadecimal digits, displayed in five groups separated by hyphens. The pattern is 8-4-4-4-12, resulting in a 36 character string (including hyphens).\nExample: 550e8400-e29b-41d4-a716-446655440000.\nIt is designed to be sufficiently random such that the probability of collision (two different inputs producing the same output) is extremely low."
  },
  {
    "objectID": "notes/111/index.html#what-are-uuids",
    "href": "notes/111/index.html#what-are-uuids",
    "title": "UUID: An Introduction and Usage",
    "section": "",
    "text": "UUID stands for Universally Unique Identifier.\nA UUID is a 128-bit number used to uniquely identify some object or entity on the Internet.\nIn its canonical form, a UUID is represented by 32 lowercase hexadecimal digits, displayed in five groups separated by hyphens. The pattern is 8-4-4-4-12, resulting in a 36 character string (including hyphens).\nExample: 550e8400-e29b-41d4-a716-446655440000.\nIt is designed to be sufficiently random such that the probability of collision (two different inputs producing the same output) is extremely low."
  },
  {
    "objectID": "notes/111/index.html#benefits-of-uuids",
    "href": "notes/111/index.html#benefits-of-uuids",
    "title": "UUID: An Introduction and Usage",
    "section": "Benefits of UUIDs",
    "text": "Benefits of UUIDs\n\nThe primary advantage of UUIDs is that they can be generated in any location by any system without requiring central coordination while still being able to assert uniqueness across the entire universe.\nIt can be used to assign unique identifiers in a system without the need for a central authority to avoid collisions.\nUUIDs are preferable over traditional sequential IDs in a multi-server setup where coordination can be complex and time-consuming."
  },
  {
    "objectID": "notes/111/index.html#how-to-install-uuidgen",
    "href": "notes/111/index.html#how-to-install-uuidgen",
    "title": "UUID: An Introduction and Usage",
    "section": "How to Install uuidgen",
    "text": "How to Install uuidgen\nuuidgen is typically included in the uuid-runtime package in Debian and most other Linux distributions. You can install it using the package manager apt.\nRun the following command to install uuidgen:\n$ sudo apt-get update\n$ sudo apt-get install uuid-runtime\nAfter the installation, you should be able to generate UUIDs by typing uuidgen in your terminal. Each call will produce a new, random UUID.\n$ uuidgen\nExample output:\n$ uuidgen\n1b4e28ba-2fa1-11d2-883f-0016d3cca427\nRemember, UUIDs generated are pseudo-random and there are different versions of UUIDs, based on the method of generation. uuidgen typically generates UUIDs using either random numbers (Version 4) or the current time and the machine’s MAC address (Version 1)."
  },
  {
    "objectID": "notes/111/index.html#generating-uuids-in-python",
    "href": "notes/111/index.html#generating-uuids-in-python",
    "title": "UUID: An Introduction and Usage",
    "section": "Generating UUIDs in Python",
    "text": "Generating UUIDs in Python\nIn Python, you can use the uuid library to generate UUIDs. The uuid4() function generates a random UUID. The randomness is based on random numbers from the random number generator in your system, which makes the probability of collision negligible.\nimport uuid\n\nprint(uuid.uuid4())"
  },
  {
    "objectID": "notes/150/index.html",
    "href": "notes/150/index.html",
    "title": "BFS vs DFS",
    "section": "",
    "text": "Source: https://py.mit.edu/spring24/readings/graph_search#_summary_of_bfs_vs_dfs\n\nBFS\n\nTo implement a breadth-first search, we add and remove elements from opposite sides of the agenda. This approach is known as “first-in, first-out” (commonly written/pronounced as “FIFO”) since the element we remove is always the one that was added first.\nBFS is guaranteed to return a shortest path to a goal vertex if such a path exists, regardless of the structure of our graph. Because we consider all paths of length n before considering any paths of length n + 1, we know that, when we first encounter a state that satisfies our goal condition, the path we’re considering must be optimal (in the sense that there is no shorter path to the goal).\nBFS can run forever if it is being applied to an infinite graph with no solution, but it will always terminate in a finite graph or in an infinite graph where a solution exists.\n\nDFS\n\nTo implement a depth-first search, we add and remove elements from the same side of the agenda. This approach is known as “last-in, first-out” (commonly written/pronounced as “LIFO”) since the element we remove is always the last one that was added.\nDFS is guaranteed to find a path to the goal (but not necessarily an optimal one) if such a path exists and if the graph is finite.\nDFS may run forever on an infinite graph, even if a solution exists.\n\nDFS = Bad?\nIn all of the examples we have seen so far, DFS gives us a pretty gnarly path in the end, something that is kind of ugly and far from optimal. And, in the section above, we’ve stated that the guarantees that DFS offers us are weaker than those that BFS offers us. So, at this point, you may be thinking: why did we even bother introducing DFS? When would you ever want to use it?\nThe answer is a little bit nuanced, but the short version is that DFS tends to use less memory than BFS. If we consider a graph with a “branching factor” of b (i.e., every state is connected to b other states), then there will be around b^n paths of length n. This means that there will be around b^elements in the agenda when we’re considering the last path of length n − 1. By contrast, the agenda for a DFS will have around b × n elements in the agenda when considering a path of length n; and, as b and n increase, b × n is substantially smaller than b^n. This is especially useful in cases where we don’t care about finding the optimal path to a state (sometimes any path will do, or sometimes we’re just looking for a particular state and don’t care about the path at all); and, in those cases, DFS can sometimes be the right choice."
  },
  {
    "objectID": "notes/113/index.html",
    "href": "notes/113/index.html",
    "title": "Command History Search (Shell with Vi Mode)",
    "section": "",
    "text": "When using zsh or bash with vi mode enabled, you can efficiently navigate and search through your command history."
  },
  {
    "objectID": "notes/113/index.html#entering-command-mode",
    "href": "notes/113/index.html#entering-command-mode",
    "title": "Command History Search (Shell with Vi Mode)",
    "section": "Entering Command Mode",
    "text": "Entering Command Mode\nEnsure you’re in command mode (normal mode) by pressing ESC."
  },
  {
    "objectID": "notes/113/index.html#searching-in-history",
    "href": "notes/113/index.html#searching-in-history",
    "title": "Command History Search (Shell with Vi Mode)",
    "section": "Searching in History",
    "text": "Searching in History\nTo search backward through previous commands:\n\nPress / followed by your search term.\nPress Enter."
  },
  {
    "objectID": "notes/113/index.html#navigating-search-results-and-history",
    "href": "notes/113/index.html#navigating-search-results-and-history",
    "title": "Command History Search (Shell with Vi Mode)",
    "section": "Navigating Search Results and History",
    "text": "Navigating Search Results and History\nAfter initiating a search, navigate through matches and history using:\n\nn - for the next match in the direction of your initial search.\nN - for the previous match, opposite to your initial search.\nj - to move to the next command in history (downwards).\nk - to move to the previous command in history (upwards)."
  },
  {
    "objectID": "notes/113/index.html#configuring-zsh-for-shared-history-useful-with-tmux",
    "href": "notes/113/index.html#configuring-zsh-for-shared-history-useful-with-tmux",
    "title": "Command History Search (Shell with Vi Mode)",
    "section": "Configuring zsh for Shared History (useful with tmux)",
    "text": "Configuring zsh for Shared History (useful with tmux)\nTo ensure that all zsh sessions (e.g., across different tmux panes or windows) share the same command history, add the following option to your zshrc:\n# Enables sharing of command history between different zsh sessions.\nsetopt share_history"
  },
  {
    "objectID": "notes/49/index.html",
    "href": "notes/49/index.html",
    "title": "Handling infinity in programming languages",
    "section": "",
    "text": "In Python, infinity (inf) and negative infinity (-inf) are special floating-point values representing numbers larger or smaller than any other number, respectively. They can be the result of certain mathematical operations, such as dividing a positive number by zero for infinity or dividing a negative number by zero for negative infinity. To represent infinity in Python, use the constant float(\"inf\"), and for negative infinity, use float(\"-inf\").\nIn the NumPy library, which is widely used in Python for numerical computations, infinity can be represented using the np.inf or np.PINF constants, and negative infinity can be represented using the -np.inf or np.NINF constant:"
  },
  {
    "objectID": "notes/49/index.html#in-c-infinity-and-negative-infinity-can-be-represented-using-the-stdnumeric_limits-library-from-the-header",
    "href": "notes/49/index.html#in-c-infinity-and-negative-infinity-can-be-represented-using-the-stdnumeric_limits-library-from-the-header",
    "title": "Handling infinity in programming languages",
    "section": "In C++, infinity and negative infinity can be represented using the std::numeric_limits library from the  header:",
    "text": "In C++, infinity and negative infinity can be represented using the std::numeric_limits library from the  header:\n#include &lt;limits&gt;\ndouble inf = std::numeric_limits&lt;double&gt;::infinity();\ndouble neg_inf = -std::numeric_limits&lt;double&gt;::infinity();"
  },
  {
    "objectID": "notes/49/index.html#mathematical-operations-involving-inf-and--inf-follow-specific-rules",
    "href": "notes/49/index.html#mathematical-operations-involving-inf-and--inf-follow-specific-rules",
    "title": "Handling infinity in programming languages",
    "section": "Mathematical operations involving inf and -inf follow specific rules:",
    "text": "Mathematical operations involving inf and -inf follow specific rules:\n\nAny number added to or subtracted from inf results in inf. For -inf, the same operation results in -inf.\nAny positive number multiplied by inf results in inf, and by -inf results in -inf.\nAny negative number multiplied by inf results in -inf, and by -inf results in inf.\nDividing any number by inf or -inf results in 0.\nSome operations with inf and -inf are undefined or considered not a number (NaN), such as dividing inf by inf, dividing -inf by -inf, or adding inf and -inf.\n\nHandling infinity is a concept present in multiple programming languages and libraries, allowing for the representation of values larger or smaller than any other number and proper handling of certain mathematical operations."
  },
  {
    "objectID": "notes/49/index.html#related-notes",
    "href": "notes/49/index.html#related-notes",
    "title": "Handling infinity in programming languages",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#73"
  },
  {
    "objectID": "notes/69/index.html",
    "href": "notes/69/index.html",
    "title": "Renaming Variables and Functions Across Multiple Files in Vim",
    "section": "",
    "text": "Even though Vim isn’t an IDE, it still allows for easy refactoring."
  },
  {
    "objectID": "notes/69/index.html#select-the-files-you-want-to-modify-by-populating-the-argument-list",
    "href": "notes/69/index.html#select-the-files-you-want-to-modify-by-populating-the-argument-list",
    "title": "Renaming Variables and Functions Across Multiple Files in Vim",
    "section": "Select the Files You Want to Modify by Populating the Argument List",
    "text": "Select the Files You Want to Modify by Populating the Argument List\nUse the :args command to add all the files matching the specified pattern (e.g., all Python files) to the argument list:\n:args *.py"
  },
  {
    "objectID": "notes/69/index.html#search-and-replace",
    "href": "notes/69/index.html#search-and-replace",
    "title": "Renaming Variables and Functions Across Multiple Files in Vim",
    "section": "Search and Replace",
    "text": "Search and Replace\nPerform the search and replace operations across all the files in the argument list:\n:argdo %s/old_variable_name/new_variable_name/g | update\nTo ignore potential “pattern not found” errors, append the e flag to the :s(ubstitute) command: /ge.\n\nAutomatically Save with the update Command\nThe update command is not strictly necessary for the search and replace operation, but it is useful for saving the changes made in each file after the :s(ubstitute) command has been executed. If you prefer to save all of the buffers later, omit the update command and use :wa when you’re ready to save."
  },
  {
    "objectID": "notes/69/index.html#related-notes",
    "href": "notes/69/index.html#related-notes",
    "title": "Renaming Variables and Functions Across Multiple Files in Vim",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#62"
  },
  {
    "objectID": "notes/78/index.html",
    "href": "notes/78/index.html",
    "title": "Quick Workflow for Making a Screencast on Windows",
    "section": "",
    "text": "Press the key combination Win + Shift + S and select the camera icon.\n\n\n\nPress the key combination Win + Alt + R to start or stop recording a video clip of the active application using the Windows Game Bar. The recorded videos are saved into your Videos folder by default."
  },
  {
    "objectID": "notes/78/index.html#step-1-record-a-video",
    "href": "notes/78/index.html#step-1-record-a-video",
    "title": "Quick Workflow for Making a Screencast on Windows",
    "section": "",
    "text": "Press the key combination Win + Shift + S and select the camera icon.\n\n\n\nPress the key combination Win + Alt + R to start or stop recording a video clip of the active application using the Windows Game Bar. The recorded videos are saved into your Videos folder by default."
  },
  {
    "objectID": "notes/78/index.html#step-2-edit-the-video-with-clipchamp",
    "href": "notes/78/index.html#step-2-edit-the-video-with-clipchamp",
    "title": "Quick Workflow for Making a Screencast on Windows",
    "section": "Step 2: Edit the Video with Clipchamp",
    "text": "Step 2: Edit the Video with Clipchamp\nUse Clipchamp, a user-friendly video editing software natively integrated into Windows (so it should already be installed on your computer), to edit the recorded video:\n\nOpen Clipchamp by pressing the Win key and typing “clipchamp” into the search bar.\nImport your recorded video.\nUse the drag-and-drop editing feature to arrange clips on the timeline.\nAdd transitions, effects, text, titles, and audio to enhance your video.\nExport the edited video in the desired format and resolution.\n\nClipchamp is a more accessible option for quick video editing compared to professional-grade software like Adobe Premiere Pro, making it an ideal choice for beginners or those who need to edit videos quickly and efficiently.\nAlthough Clipchamp can easily record your screen and/or your webcam, I find it quicker to start recording with Win + Alt + R if I only want to make a screencast of an application and not my whole screen, and then use Clipchamp for editing."
  },
  {
    "objectID": "notes/78/index.html#related-notes",
    "href": "notes/78/index.html#related-notes",
    "title": "Quick Workflow for Making a Screencast on Windows",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#87\nNote#81\nNote#47\nNote#16\nNote#98"
  },
  {
    "objectID": "notes/59/index.html",
    "href": "notes/59/index.html",
    "title": "which vs command -v",
    "section": "",
    "text": "External command, typically found at /usr/bin/which\nSearches for executables in directories listed in PATH\nReturns the absolute path of the first match found in PATH\nReturns an error message if the command is not found\nNot POSIX-compliant: behavior might vary across Unix-like systems\nLess reliable for use in shell scripts"
  },
  {
    "objectID": "notes/59/index.html#which",
    "href": "notes/59/index.html#which",
    "title": "which vs command -v",
    "section": "",
    "text": "External command, typically found at /usr/bin/which\nSearches for executables in directories listed in PATH\nReturns the absolute path of the first match found in PATH\nReturns an error message if the command is not found\nNot POSIX-compliant: behavior might vary across Unix-like systems\nLess reliable for use in shell scripts"
  },
  {
    "objectID": "notes/59/index.html#command--v",
    "href": "notes/59/index.html#command--v",
    "title": "which vs command -v",
    "section": "command -v",
    "text": "command -v\n\nShell built-in command (e.g., bash, zsh)\nSearches for executables, shell built-ins, shell functions, and aliases\nReturns the absolute path if the command is an executable\nReturns the command definition if it’s a shell built-in, function, or alias\nReturns nothing if the command is not found\nPOSIX-compliant: more consistent behavior across Unix-like systems\nMore reliable for use in shell scripts"
  },
  {
    "objectID": "notes/177/index.html",
    "href": "notes/177/index.html",
    "title": "Creating Unique Non-None Placeholders in Python",
    "section": "",
    "text": "Let’s say we want to create a function with an optional parameter that distinguishes between None as a value and the genuine absence of a value. A solution is to create a unique object with object() and check the identity of the argument with the is operator.\nSince the object() function returns a new featureless object every time it is called, we can use it to create unique dummy values – or sentinel values."
  },
  {
    "objectID": "notes/177/index.html#references",
    "href": "notes/177/index.html#references",
    "title": "Creating Unique Non-None Placeholders in Python",
    "section": "References",
    "text": "References\n\nAn article by Trey Hunner on creating unique non-None sentinel values in Python\nPython documentation on the object() function\nWikipedia: Sentinel value"
  },
  {
    "objectID": "notes/86/index.html",
    "href": "notes/86/index.html",
    "title": "Casting malloc and calloc in C and C++",
    "section": "",
    "text": "In C, it’s not necessary to cast the result of a call to calloc() or malloc(). This is because you can implicitly convert a void * to any other pointer type. Here’s how you can do it:\nint* ptr_calloc = calloc(5, sizeof(int));\nint* ptr_malloc = malloc(5 * sizeof(int));"
  },
  {
    "objectID": "notes/86/index.html#implicit-conversion-in-c",
    "href": "notes/86/index.html#implicit-conversion-in-c",
    "title": "Casting malloc and calloc in C and C++",
    "section": "",
    "text": "In C, it’s not necessary to cast the result of a call to calloc() or malloc(). This is because you can implicitly convert a void * to any other pointer type. Here’s how you can do it:\nint* ptr_calloc = calloc(5, sizeof(int));\nint* ptr_malloc = malloc(5 * sizeof(int));"
  },
  {
    "objectID": "notes/86/index.html#typecasting-in-c",
    "href": "notes/86/index.html#typecasting-in-c",
    "title": "Casting malloc and calloc in C and C++",
    "section": "Typecasting in C++",
    "text": "Typecasting in C++\nHowever, this implicit conversion is not allowed in C++. Therefore, in C++ you would need to cast the result of calloc() or malloc().\nint* ptr_calloc = (int*) calloc(5, sizeof(int));\nint* ptr_malloc = (int*) malloc(5 * sizeof(int));"
  },
  {
    "objectID": "notes/86/index.html#c-and-c-compatibility",
    "href": "notes/86/index.html#c-and-c-compatibility",
    "title": "Casting malloc and calloc in C and C++",
    "section": "C and C++ Compatibility",
    "text": "C and C++ Compatibility\nThis cast is often done when writing code that’s intended to be compiled as either C or C++. However, this is generally not recommended. C++ has new and delete operators for dynamic memory allocation which are safer and more feature-rich."
  },
  {
    "objectID": "notes/86/index.html#preferred-dynamic-memory-allocation-in-c",
    "href": "notes/86/index.html#preferred-dynamic-memory-allocation-in-c",
    "title": "Casting malloc and calloc in C and C++",
    "section": "Preferred Dynamic Memory Allocation in C++",
    "text": "Preferred Dynamic Memory Allocation in C++\nIn C++, it’s more common to use new and delete for dynamic memory allocation and deallocation. This handles object creation and destruction, works with classes and inheritance, and helps prevent common memory issues.\nint* ptr = new int[5];\n// Use ptr...\ndelete[] ptr;"
  },
  {
    "objectID": "notes/86/index.html#potential-issues-with-casting-in-c",
    "href": "notes/86/index.html#potential-issues-with-casting-in-c",
    "title": "Casting malloc and calloc in C and C++",
    "section": "Potential Issues with Casting in C",
    "text": "Potential Issues with Casting in C\nCasting the result of calloc() or malloc() in C can mask a failure to include stdlib.h, where calloc() and malloc() are declared. Without the include, and without a cast, the compiler would issue a warning or error. With the cast, this important message can be suppressed."
  },
  {
    "objectID": "notes/86/index.html#recommendation",
    "href": "notes/86/index.html#recommendation",
    "title": "Casting malloc and calloc in C and C++",
    "section": "Recommendation",
    "text": "Recommendation\nIt’s generally advised not to cast the result of calloc() or malloc() in C code as it is unnecessary and could potentially conceal a bug."
  },
  {
    "objectID": "notes/12/index.html",
    "href": "notes/12/index.html",
    "title": "How to sort files and folders by size in Linux",
    "section": "",
    "text": "du -sh -- *  | sort -rh  # Files and directories, or\ndu -sh -- */ | sort -rh  # Directories only\nThe output looks something like this:\n22G     foo/\n21G     bar/\n5.4G    baz/\n2.1G    qux/\n1021M   wibble/\n4.0K    wobble/\nmain source: https://unix.stackexchange.com/questions/106330/sort-all-directories-based-on-their-size\nhttps://www.geeksforgeeks.org/sort-command-linuxunix-examples/"
  },
  {
    "objectID": "notes/168/index.html",
    "href": "notes/168/index.html",
    "title": "Nuances Between To Relinquish and To Forego",
    "section": "",
    "text": "While both “relinquish” and “forego” involve giving up something, they have distinct connotations and usage patterns."
  },
  {
    "objectID": "notes/168/index.html#to-relinquish",
    "href": "notes/168/index.html#to-relinquish",
    "title": "Nuances Between To Relinquish and To Forego",
    "section": "To Relinquish",
    "text": "To Relinquish\n\nDefinition\nTo voluntarily give up or surrender something, such as a possession, right, or claim.\n\n\nConnotation and Usage\n\nOften implies a sense of reluctance or sacrifice\nTypically involves giving up something one already possesses or has a right to\nFrequently used in legal or formal contexts\nCan suggest a more permanent or significant act of giving up\n\n\n\nUsage Examples\n\nLiterature: “The aging king reluctantly relinquished his crown to his eldest son.”\nFormal writing: “The company was forced to relinquish its patent rights after the court ruling.”\nCasual conversation: “After years of struggle, she finally relinquished her dream of becoming a professional athlete.”\n\n\n\nCommon Collocations\n\nrelinquish control\nrelinquish power\nrelinquish custody"
  },
  {
    "objectID": "notes/168/index.html#to-forego",
    "href": "notes/168/index.html#to-forego",
    "title": "Nuances Between To Relinquish and To Forego",
    "section": "To Forego",
    "text": "To Forego\n\nDefinition\nTo go without or do without something, often voluntarily; to abstain from or give up.\n\n\nConnotation and Usage\n\nImplies a choice to give up something, usually for a specific reason or in favor of something else\nOften involves choosing not to take or pursue an opportunity or pleasure\nUsed more broadly in various situations, from personal choices to professional decisions\nCan suggest a temporary or situational act of giving up\n\n\n\nUsage Examples\n\nLiterature: “He decided to forego the lavish lifestyle of his peers in pursuit of a simpler existence.”\nFormal writing: “The committee voted to forego the annual gala in light of recent budget constraints.”\nCasual conversation: “I’m going to forego dessert tonight; I’m trying to eat healthier.”\n\n\n\nCommon Collocations\n\nforego an opportunity\nforego pleasure\nforego a meal"
  },
  {
    "objectID": "notes/168/index.html#comparison",
    "href": "notes/168/index.html#comparison",
    "title": "Nuances Between To Relinquish and To Forego",
    "section": "Comparison",
    "text": "Comparison\n\nPossession: “Relinquish” typically involves giving up something one already has, while “forego” often means choosing not to take or pursue something in the first place.\nEmotional weight: “Relinquish” often carries a greater sense of sacrifice or reluctance, while “forego” suggests a more voluntary choice to abstain.\nContext: “Relinquish” is more common in formal or legal contexts, while “forego” is used more broadly in everyday situations.\nDuration: “Relinquish” often implies a more permanent surrender, while “forego” can be more temporary or situational."
  },
  {
    "objectID": "notes/168/index.html#synonyms-and-related-words",
    "href": "notes/168/index.html#synonyms-and-related-words",
    "title": "Nuances Between To Relinquish and To Forego",
    "section": "Synonyms and Related Words",
    "text": "Synonyms and Related Words\n\nRelinquish: surrender, give up, yield, cede\nForego: abstain from, refrain from, pass up, waive\nRelated words: abandon, renounce, forswear"
  },
  {
    "objectID": "notes/168/index.html#related-notes",
    "href": "notes/168/index.html#related-notes",
    "title": "Nuances Between To Relinquish and To Forego",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#165"
  },
  {
    "objectID": "notes/55/index.html",
    "href": "notes/55/index.html",
    "title": "Protect yourself from overwriting files with the noclobber option",
    "section": "",
    "text": "noclobber is a shell option in Unix-like systems that prevents accidental overwriting of existing files when using output redirection with the &gt; operator. This option is supported only in interactive shells, however. Keep in mind that your scripts will still overwrite files even with noclobber enabled.\nTo enable the noclobber option, use the set command:\nset -o noclobber\nAdd this line to your .bashrc or .zshrc for permanent effect. Zsh uses setopt and unsetopt, but it also supports set -o and set +o.\nIf you want the correct zsh option, add this instead:\nunsetopt clobber"
  },
  {
    "objectID": "notes/55/index.html#related-notes",
    "href": "notes/55/index.html#related-notes",
    "title": "Protect yourself from overwriting files with the noclobber option",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#58"
  },
  {
    "objectID": "notes/90/index.html",
    "href": "notes/90/index.html",
    "title": "Containers, Docker, and Podman",
    "section": "",
    "text": "A container is an instance of an image, which is a lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.\n\n\nRegardless of where you’re running your application - locally, in a testing environment, or in production - it will work the same way inside a container.\n\n\n\nEach container runs in isolation from other containers, ensuring that they don’t interfere with each other. This is similar to virtual machines (VMs), but with an important difference. While VMs virtualize the hardware, providing a full operating system stack for each VM, containers share the same host system kernel and isolate the application processes. This makes containers much lighter and faster than VMs.\n\n\n\nYou can run your containerized application on any system that supports containerization technology, without worrying about system-specific dependencies."
  },
  {
    "objectID": "notes/90/index.html#what-is-a-container",
    "href": "notes/90/index.html#what-is-a-container",
    "title": "Containers, Docker, and Podman",
    "section": "",
    "text": "A container is an instance of an image, which is a lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.\n\n\nRegardless of where you’re running your application - locally, in a testing environment, or in production - it will work the same way inside a container.\n\n\n\nEach container runs in isolation from other containers, ensuring that they don’t interfere with each other. This is similar to virtual machines (VMs), but with an important difference. While VMs virtualize the hardware, providing a full operating system stack for each VM, containers share the same host system kernel and isolate the application processes. This makes containers much lighter and faster than VMs.\n\n\n\nYou can run your containerized application on any system that supports containerization technology, without worrying about system-specific dependencies."
  },
  {
    "objectID": "notes/90/index.html#docker-vs-podman-a-detailed-comparison",
    "href": "notes/90/index.html#docker-vs-podman-a-detailed-comparison",
    "title": "Containers, Docker, and Podman",
    "section": "Docker vs Podman: A Detailed Comparison",
    "text": "Docker vs Podman: A Detailed Comparison\nWhile Docker has been the go-to container platform for a long time, Podman offers some unique advantages.\n\nDaemonless\nUnlike Docker, which relies on a daemon, Podman doesn’t require a daemon to function, leading to improved security and less overhead.\n\n\nRootless Containers\nPodman allows you to run containers without root privileges, providing additional security.\n\n\nOpen Container Initiative (OCI) Compliance\nBoth Docker and Podman are compliant with the OCI specifications. However, Podman’s implementation is stricter and does not include Docker’s non-standard features.\n\n\nCommand Compatibility\nPodman is completely command-compatible with Docker, meaning you can use the same commands and Dockerfiles as you would with Docker."
  },
  {
    "objectID": "notes/90/index.html#leveraging-containers-for-efficient-workflow",
    "href": "notes/90/index.html#leveraging-containers-for-efficient-workflow",
    "title": "Containers, Docker, and Podman",
    "section": "Leveraging Containers for Efficient Workflow",
    "text": "Leveraging Containers for Efficient Workflow\n\nDevelopment Efficiency\nFor developers, containers guarantee that the environment remains consistent across development, testing, and production stages. This means no more “It works on my machine” issues.\n\n\nSimplified Testing\nIf your role involves software testing, you can quickly spin up an isolated environment with containers to test different versions of your application under varying conditions.\n\n\nSmoothened Deployment\nDeploying software with containers ensures that the software behaves exactly as intended, regardless of the deployment environment."
  },
  {
    "objectID": "notes/90/index.html#podman-commands-compatible-with-docker",
    "href": "notes/90/index.html#podman-commands-compatible-with-docker",
    "title": "Containers, Docker, and Podman",
    "section": "Podman Commands (compatible with Docker)",
    "text": "Podman Commands (compatible with Docker)\nPodman commands are identical to Docker commands, ensuring a smooth transition between the two. Here are some of the key Podman commands you’ll use:\n\nPull an Image\npodman pull registry_name/repository_name:image_tag\nThe :image_tag is optional and defaults to :latest if not provided.\n\n\nBuild an Image\npodman build -t my_image .\n\n\nRun a Container\npodman run -d --name my_container my_image\n\n\nRun a Container Interactively with a Custom Hostname and Name, and Remove it after Exit\npodman run -it --rm --hostname=my_hostname --name=my_container my_image\n\n\nList Running Containers\npodman ps\n\n\nList all Containers, Including Stopped Ones\npodman ps -a\n\n\nStart a Container and Attach its Output\npodman start -a my_container\n\n\nView Logs for a Container\npodman logs my_container\n\n\nExecute a Command Inside a Running Container\npodman exec -it my_container command\n\n\nCreate a new image from a container’s changes\npodman commit -c 'USER your_username' -c 'WORKDIR /path/to/workdir' my_container my_new_image\nThe -c or (--change) option allows to apply Dockerfile instructions to the image we are creating.\n\n\nInitialize a Container\npodman init my_container\n\n\nStop a Container\npodman stop my_container\n\n\nRemove a Container\npodman rm my_container\n\n\nList Images\npodman images\n\n\nRemove an Image\npodman rmi my_image"
  },
  {
    "objectID": "notes/116/index.html",
    "href": "notes/116/index.html",
    "title": "Understanding Keyword-Only Function Arguments in Python",
    "section": "",
    "text": "A lone * forces the rest of the arguments to be keyword-only arguments, meaning they must be specified as a keyword arguments."
  },
  {
    "objectID": "notes/116/index.html#references",
    "href": "notes/116/index.html#references",
    "title": "Understanding Keyword-Only Function Arguments in Python",
    "section": "References",
    "text": "References\n\nPython Morsels – Keyword-only function arguments"
  },
  {
    "objectID": "notes/16/index.html",
    "href": "notes/16/index.html",
    "title": "Upgrade Windows Applications With a CLI Package Manager",
    "section": "",
    "text": "It can be slow, though… It must be related to the archive servers, however, since it doesn’t fetch install packages from Microsoft. Also, it’s the usual install process afterwards; and some softwares take a really long time to install.\nI don’t know how it compares with Chocolatey. I’ve never used it."
  },
  {
    "objectID": "notes/16/index.html#references",
    "href": "notes/16/index.html#references",
    "title": "Upgrade Windows Applications With a CLI Package Manager",
    "section": "References",
    "text": "References\n\nhttps://learn.microsoft.com/en-us/windows/package-manager/winget/upgrade"
  },
  {
    "objectID": "notes/16/index.html#related-notes",
    "href": "notes/16/index.html#related-notes",
    "title": "Upgrade Windows Applications With a CLI Package Manager",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#87\nNote#81\nNote#78\nNote#47"
  },
  {
    "objectID": "notes/42/index.html",
    "href": "notes/42/index.html",
    "title": "Apply a (useless) rot13 to an entire file in Vim",
    "section": "",
    "text": "ggg?G\nThat’s it."
  },
  {
    "objectID": "notes/29/index.html",
    "href": "notes/29/index.html",
    "title": "The problem of seeking informations and the limits of LLMs in that regard",
    "section": "",
    "text": "With all the hype around ChatGPT, now is a good time to finally read this paper from March 2022 by Shah & Bender:\nSituating Search (Shah & Bender, 2022): https://dl.acm.org/doi/10.1145/3498366.3505816\nFor a lay introduction to those ideas, see these press articles (directly recommended by Emily Bender):\nAlso, see this Twitter thread by Delip Rao: https://twitter.com/deliprao/status/1599098378172104704\nMight be good to check too… an interview with Emily Bender on the problem with overestimating AI: https://pnw.ai/article/the-problem-with-overestimating-ai/121722775\nVideo series with Bender and Hanna talking about AI: https://videos.trom.tf/w/p/4gykGcMrmHHs7bG2Y6qK9W"
  },
  {
    "objectID": "notes/29/index.html#chatgpt-is-not-the-new-google-we-want-for",
    "href": "notes/29/index.html#chatgpt-is-not-the-new-google-we-want-for",
    "title": "The problem of seeking informations and the limits of LLMs in that regard",
    "section": "ChatGPT is not the new Google we want for",
    "text": "ChatGPT is not the new Google we want for\nDon’t forget that Google Search is not a search engine by design. It lives to display ads; its content recommendation system is the honeypot."
  },
  {
    "objectID": "notes/143/index.html",
    "href": "notes/143/index.html",
    "title": "Use git maintenance start",
    "section": "",
    "text": "Just run git maintenance start inside a git repository to automate optimization tasks—by creating cron jobs."
  },
  {
    "objectID": "notes/143/index.html#references",
    "href": "notes/143/index.html#references",
    "title": "Use git maintenance start",
    "section": "References",
    "text": "References\n\nGit Maintenance Documentation"
  },
  {
    "objectID": "notes/24/index.html",
    "href": "notes/24/index.html",
    "title": "How to easily copy a public SSH key to another machine",
    "section": "",
    "text": "ssh-copy-id user@server\nUse the -i flag to specify a particular key\nFrom the documentation:\nSo, you don’t copy your private key, it’s alright. But add it nonetheless if you want to feel extra secured.\nTo disable root ssh login, add this to /etc/sshd_config:\nTo force ssh key login only, add this to /etc/sshd_config:\nFinally, restart ssh:"
  },
  {
    "objectID": "notes/24/index.html#related-notes",
    "href": "notes/24/index.html#related-notes",
    "title": "How to easily copy a public SSH key to another machine",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#20\nNote#88"
  },
  {
    "objectID": "notes/15/index.html",
    "href": "notes/15/index.html",
    "title": "Some of my favorite fonts",
    "section": "",
    "text": "…so that I can easily find them back.\n\nFira Code (Retina): mono font for coding;\nCrimson Text: “for book production in the tradition of beautiful oldstyle typefaces”;\nCrimson Pro: “contemporary, clear, classic and rounded/open. Something for a college textbook, editorial websites and any reading”;\nEB Garamond: “intended to be an excellent, classical, Garamond”;\nPalatino Linotype: “an old-style serif typeface, ideal for use in extended text settings such as books, periodicals and catalogs.”"
  },
  {
    "objectID": "notes/107/index.html",
    "href": "notes/107/index.html",
    "title": "Stop Writing Your Error Messages to stdout",
    "section": "",
    "text": "Using print() is easy and convenient, but it prints everything to stdout. It can be the right tool for quick and dirty debugging—everyone does it. However, it’s not without its problems. For instance, what if we want the output to go to a file instead of the screen (for logging purposes)? Also, do we really want to print our error messages to stdout in production?"
  },
  {
    "objectID": "notes/107/index.html#using-print-with-the-file-parameter",
    "href": "notes/107/index.html#using-print-with-the-file-parameter",
    "title": "Stop Writing Your Error Messages to stdout",
    "section": "Using print() with the file parameter",
    "text": "Using print() with the file parameter\nimport sys\n\nprint(\"This is an error message.\", file=sys.stderr)"
  },
  {
    "objectID": "notes/107/index.html#using-the-sys.stderr-object",
    "href": "notes/107/index.html#using-the-sys.stderr-object",
    "title": "Stop Writing Your Error Messages to stdout",
    "section": "Using the sys.stderr object",
    "text": "Using the sys.stderr object\nimport sys\n\nsys.stderr.write(\"This is an error message.\\n\")\nNote that it’s important to include the newline character \\n at the end of the message to ensure proper formatting."
  },
  {
    "objectID": "notes/107/index.html#using-click.echo",
    "href": "notes/107/index.html#using-click.echo",
    "title": "Stop Writing Your Error Messages to stdout",
    "section": "Using click.echo()",
    "text": "Using click.echo()\nThe Click library allows printing to stderr by passing err=True to click.echo().\nimport click\n\nclick.echo(\"This is an error message.\", err=True)"
  },
  {
    "objectID": "notes/107/index.html#logging-error-messages",
    "href": "notes/107/index.html#logging-error-messages",
    "title": "Stop Writing Your Error Messages to stdout",
    "section": "Logging Error Messages",
    "text": "Logging Error Messages\nThe logging module from the standard library should be preferred for complex and serious production code.\nIt solves the problems mentioned above and even more. It also allows for five levels of logging (from critical to debug).\n\nExample\nHere’s an example of how to configure a logging handler to write error messages to a file:\nimport logging\n\n# Create a logger\nlogger = logging.getLogger('error_logger')\nlogger.setLevel(logging.ERROR)\n\n# Create a file handler\nfile_handler = logging.FileHandler('error.log')\n\n# Set the formatter\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(formatter)\n\n# Add the handler to the logger\nlogger.addHandler(file_handler)\n\n# Write an error message to the log file\nlogger.error(\"This is an error message.\")\nThis example sets the logging level to ERROR to ensure that only error messages are written to the file. The log format is specified using a formatter, which includes the timestamp, log level, and log message. The logger.error() method is used to write the error message to the log file.\nBy logging error messages to a file, you can easily track and analyze them, helping to identify and troubleshoot issues more effectively."
  },
  {
    "objectID": "notes/107/index.html#references",
    "href": "notes/107/index.html#references",
    "title": "Stop Writing Your Error Messages to stdout",
    "section": "References",
    "text": "References\n\nLogging documentation\nLogging Cookbook (python.org)\nSlides on the logging module by Reuven M. Lerner"
  },
  {
    "objectID": "notes/107/index.html#related-notes",
    "href": "notes/107/index.html#related-notes",
    "title": "Stop Writing Your Error Messages to stdout",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#133"
  },
  {
    "objectID": "notes/123/index.html",
    "href": "notes/123/index.html",
    "title": "Speedy Directory Switching with CDPATH",
    "section": "",
    "text": "CDPATH is an environment variable in Unix-like shells such as Bash and Zsh that allows for quick directory navigation. It holds a list of directories that the cd command will search when you attempt to change directories."
  },
  {
    "objectID": "notes/123/index.html#setting-up-cdpath",
    "href": "notes/123/index.html#setting-up-cdpath",
    "title": "Speedy Directory Switching with CDPATH",
    "section": "Setting Up CDPATH",
    "text": "Setting Up CDPATH\nTo set up CDPATH, add the following export statement to your .bashrc or .zshrc:\nexport CDPATH=/path/to/projects:/another/path/to/projects\nApply the changes by either sourcing your shell’s configuration file (~/.bashrc or ~/.zshrc) or launching a new shell session with commands like exec -l zsh."
  },
  {
    "objectID": "notes/123/index.html#usage-example",
    "href": "notes/123/index.html#usage-example",
    "title": "Speedy Directory Switching with CDPATH",
    "section": "Usage Example",
    "text": "Usage Example\nAssume CDPATH is set as follows:\nexport CDPATH=/home/user/projects:/usr/local\n\ncd my_app: Takes you to /home/user/projects/my_app, regardless of your current location, if the directory exists.\ncd etc: Takes you to /usr/local/etc if it exists."
  },
  {
    "objectID": "notes/48/index.html",
    "href": "notes/48/index.html",
    "title": "Evaluating variables in f-strings in Python",
    "section": "",
    "text": "In Python, you can use the = character in an f-string to evaluate and display the value of a variable. This is a concise way to include both the variable name and its value in the output.\n\nExample:\nx = 3\nprint(f\"{x=}\")\n\n\nOutput:\nx = 3"
  },
  {
    "objectID": "notes/151/index.html",
    "href": "notes/151/index.html",
    "title": "Vim: Moving to Next Search Pattern in Incremental Search",
    "section": "",
    "text": "In Vim’s incremental search, you can navigate through matches without committing the search or leaving search mode.\n\nPress &lt;C-g&gt; (Ctrl+G) to move to the next match.\nPress &lt;C-t&gt; (Ctrl+T) to move to the previous match."
  },
  {
    "objectID": "notes/163/index.html",
    "href": "notes/163/index.html",
    "title": "How to Install Outdated Python Versions on Debian",
    "section": "",
    "text": "Note\n\n\n\nAll of this is now made far more convenient with uv and -p/--python &lt;PYTHON_VERSION&gt;. Just run uv -p 3.10 and you’re done.\nuv documentation\nI use apt-get autoremove -y in my upgrade script, which made me feel the discomfort of seeing python3.10 uninstalled from my system without being able to install it again with apt, as it’s no longer available in the Debian’s package list.\nFortunately, even if it’s not as straightforward as apt install python3.10, it’s still possible to reinstall it from source."
  },
  {
    "objectID": "notes/163/index.html#installation-steps",
    "href": "notes/163/index.html#installation-steps",
    "title": "How to Install Outdated Python Versions on Debian",
    "section": "Installation Steps",
    "text": "Installation Steps\n\nUpdate the Package List\nsudo apt update\n\n\nInstall the Required Build Dependencies\nsudo apt install curl build-essential libssl-dev zlib1g-dev libncurses5-dev \\\nlibncursesw5-dev libreadline-dev libsqlite3-dev libgdbm-dev libdb5.3-dev \\\nlibbz2-dev libexpat1-dev liblzma-dev tk-dev\n\n\nDownload Python 3.10 Sources\nPYTHON_VERSION=3.10.14\ncurl -LO https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz\nChange the value of the variable to the version you want to install.\n\n\nExtract the Tarball\ntar -xf Python-${PYTHON_VERSION}.tgz\n\n\nChange Directory\ncd Python-${PYTHON_VERSION}\n\n\nConfigure the Build Environment\n./configure --enable-optimizations\n\n\nCompile the Source Code\nmake -j $(nproc)\n\n\nInstall Python 3.10\nmake altinstall\n\n\nCheck the Installation\npython3.10 --version\nThis installation won’t erase the python3 or python symlink; you’ll have to execute python3.10.\n\n\nClean Up\ncd ..\nrm -rf Python-${PYTHON_VERSION} Python-${PYTHON_VERSION}.tgz"
  },
  {
    "objectID": "notes/190/index.html",
    "href": "notes/190/index.html",
    "title": "Command Aliases in Click: True Aliases vs Prefix Matching",
    "section": "",
    "text": "Click doesn’t provide built-in command aliases. The common workarounds are:"
  },
  {
    "objectID": "notes/190/index.html#whats-the-difference",
    "href": "notes/190/index.html#whats-the-difference",
    "title": "Command Aliases in Click: True Aliases vs Prefix Matching",
    "section": "What’s the Difference?",
    "text": "What’s the Difference?\n\nPrefix matching\nType any unique prefix of a command name.\ncli status  # Full command\ncli st      # Prefix works if unique\n\n\nTrue aliases\nMultiple distinct names for the same command.\ncli new     # Primary name\ncli create  # Explicit alias\ncli add     # Another explicit alias"
  },
  {
    "objectID": "notes/190/index.html#native-approach-prefix-matching",
    "href": "notes/190/index.html#native-approach-prefix-matching",
    "title": "Command Aliases in Click: True Aliases vs Prefix Matching",
    "section": "Native Approach: Prefix Matching",
    "text": "Native Approach: Prefix Matching\nClick’s documentation shows how to implement git-style abbreviations:\nimport click\n\nclass AliasedGroup(click.Group):\n    def get_command(self, ctx, cmd_name):\n        rv = click.Group.get_command(self, ctx, cmd_name)\n        if rv is not None:\n            return rv\n\n        matches = [x for x in self.list_commands(ctx)\n                   if x.startswith(cmd_name)]\n        if not matches:\n            return None\n        elif len(matches) == 1:\n            return click.Group.get_command(self, ctx, matches[0])\n\n        ctx.fail(f\"Too many matches: {', '.join(sorted(matches))}\")\n\n@click.group(cls=AliasedGroup)\ndef cli():\n    pass\n\nLimitation\nAdding a start command would make st ambiguous if you already have status."
  },
  {
    "objectID": "notes/190/index.html#true-aliases-click-aliases-package",
    "href": "notes/190/index.html#true-aliases-click-aliases-package",
    "title": "Command Aliases in Click: True Aliases vs Prefix Matching",
    "section": "True Aliases: click-aliases Package",
    "text": "True Aliases: click-aliases Package\nfrom click_aliases import ClickAliasedGroup\n\n@click.group(cls=ClickAliasedGroup)\ndef cli():\n    pass\n\n@cli.command(aliases=['create', 'add'])\ndef new():\n    click.echo('Creating...')"
  },
  {
    "objectID": "notes/190/index.html#references",
    "href": "notes/190/index.html#references",
    "title": "Command Aliases in Click: True Aliases vs Prefix Matching",
    "section": "References",
    "text": "References\n\nClick Advanced Patterns - Command Aliases\nclick-aliases GitHub Repository\nClick API Reference - Groups"
  },
  {
    "objectID": "notes/170/index.html",
    "href": "notes/170/index.html",
    "title": "Nuances Between To Stifle and To Smother",
    "section": "",
    "text": "While both “stifle” and “smother” involve suppression or restriction, they have distinct connotations and usage patterns."
  },
  {
    "objectID": "notes/170/index.html#to-stifle",
    "href": "notes/170/index.html#to-stifle",
    "title": "Nuances Between To Stifle and To Smother",
    "section": "To Stifle",
    "text": "To Stifle\n\nDefinition\nTo suppress, restrain, or prevent something from occurring or developing; to stop or control a sound or expression.\n\n\nConnotation and Usage\n\nOften implies intentional suppression or restraint\nFrequently used for emotions, sounds, or actions\nCan suggest a more temporary or immediate act of suppression\nOften used in contexts of personal or social control\n\n\n\nUsage Examples\n\nLiterature: “She stifled a laugh as the clumsy waiter stumbled with the tray.”\nFormal writing: “The government’s attempts to stifle dissent only fueled further protests.”\nCasual conversation: “I had to stifle my yawn during the boring meeting.”\n\n\n\nCommon Collocations\n\nstifle a yawn\nstifle creativity\nstifle innovation"
  },
  {
    "objectID": "notes/170/index.html#to-smother",
    "href": "notes/170/index.html#to-smother",
    "title": "Nuances Between To Stifle and To Smother",
    "section": "To Smother",
    "text": "To Smother\n\nDefinition\nTo overwhelm or suppress completely; to cover entirely, often to the point of suffocation.\n\n\nConnotation and Usage\n\nImplies a more complete or overwhelming suppression\nOften carries a sense of excessive control or oppression\nCan be used literally (to cover completely) or figuratively (to overwhelm emotionally)\nFrequently associated with affection when used positively\n\n\n\nUsage Examples\n\nLiterature: “The thick fog smothered the city, obscuring even the tallest buildings.”\nFormal writing: “The company’s bureaucracy threatened to smother any innovative ideas from employees.”\nCasual conversation: “My grandmother tends to smother us with affection whenever we visit.”\n\n\n\nCommon Collocations\n\nsmother with kisses\nsmother with attention\nsmother a fire"
  },
  {
    "objectID": "notes/170/index.html#comparison",
    "href": "notes/170/index.html#comparison",
    "title": "Nuances Between To Stifle and To Smother",
    "section": "Comparison",
    "text": "Comparison\n\nDegree of suppression: “Stifle” often implies partial or temporary suppression, while “smother” suggests a more complete or overwhelming suppression.\nIntentionality: “Stifle” frequently implies intentional restraint, whereas “smother” can be intentional or unintentional.\nPhysical vs. Emotional: Both can be used for physical or emotional contexts, but “smother” is more commonly used for physical covering or overwhelming affection.\nDuration: “Stifle” often refers to a more immediate or short-term action, while “smother” can imply a longer-lasting or more pervasive effect.\nPositive usage: “Smother” can sometimes be used positively in the context of affection, while “stifle” is rarely used positively."
  },
  {
    "objectID": "notes/170/index.html#synonyms-and-related-words",
    "href": "notes/170/index.html#synonyms-and-related-words",
    "title": "Nuances Between To Stifle and To Smother",
    "section": "Synonyms and Related Words",
    "text": "Synonyms and Related Words\n\nStifle: suppress, restrain, repress, quell\nSmother: overwhelm, suffocate, stifle, extinguish\nRelated words: choke, quash, squelch, muffle"
  },
  {
    "objectID": "notes/170/index.html#related-notes",
    "href": "notes/170/index.html#related-notes",
    "title": "Nuances Between To Stifle and To Smother",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#165"
  },
  {
    "objectID": "notes/39/index.html",
    "href": "notes/39/index.html",
    "title": "Write a note even if you think you don’t need it",
    "section": "",
    "text": "Although my tenacious habit of searching everything on the web when I can’t remember something has been helpful so far, focusing on taking notes may help me remember things better as a it could be a stronger encoding of the information.\nWhen I forget something, I tend not to write a note about it, either because I consider it too trivial to merit one or because I assume I could easily find the information again. However, writing shouldn’t be seen as a way to create an archive of notes but also as a tool to generate new knowledge. Taking the time to write a note, even for seemingly mundane information – such as my Note#38 about switching the case of characters in Vim – can be an effective method for retaining information in long-term memory – as long as the process doesn’t focus only on encoding the information but also involves regular information retrieval practice afterward.\nThis is what I wrote in my draft article, “How to learn”, really. It’s crucial to practice what you preach; and I realize that I need to apply this approach more often myself."
  },
  {
    "objectID": "notes/183/index.html",
    "href": "notes/183/index.html",
    "title": "Python doesn’t perform tail-call optimization",
    "section": "",
    "text": "Python simply doesn’t implement tail-call optimization for this reason:"
  },
  {
    "objectID": "notes/183/index.html#what-is-a-tail-call-optimization",
    "href": "notes/183/index.html#what-is-a-tail-call-optimization",
    "title": "Python doesn’t perform tail-call optimization",
    "section": "What is a tail-call optimization",
    "text": "What is a tail-call optimization\nFrom MIT 6.101:\n\ndef sum_list(x):\n    def sum_helper(sum_so_far, lst):\n        if not lst:\n            return sum_so_far\n        else:\n            num = lst[0]\n            rest = lst[1:]\n            return sum_helper(sum_so_far + num, rest)\n    return sum_helper(0, x)\nThe recursion-depth limit can be fixed by tail-call optimization. If the recursion is written so that the recursive call is the last thing done in the body of the function – like the line return sum_helper(…) in the recursive version of sum_list above – then this recursive call is called a tail call, coming as it does at the tail end of the work the function has to do. Tail-call optimization means that, when the runtime system encounters a tail call, it deduces that it will no longer need the frame for the current call and can simply reuse it for the new recursive call, rather than creating a new frame. With tail-call optimization, every recursive call to sum_helper simply reuses the same frame, the recursion depth never exceeds 1, and the performance of the recursive version is essentially like a loop.\nTail-call optimization can’t be applied to a recursive call that isn’t at the very end of the function. If sum_list were written as we originally had it, with return x[0] + sum_list(x[1:]), then this is not a tail call, because the function still needs to do some more work (adding x[0]) after the recursive call comes back. Tail-call optimization is also blocked if the frame needs to be kept for a function object that was created during the call.\nPython unfortunately does not implement tail-call optimization, but other languages do."
  },
  {
    "objectID": "notes/183/index.html#references",
    "href": "notes/183/index.html#references",
    "title": "Python doesn’t perform tail-call optimization",
    "section": "References",
    "text": "References\n\nMIT 6.101\nWikipedia: Tail call\nArticle by Guido van Rossum (2009)"
  },
  {
    "objectID": "notes/166/index.html",
    "href": "notes/166/index.html",
    "title": "Nuances Among Despondency, Dejection, and Gloom",
    "section": "",
    "text": "These terms all relate to negative emotional states but have distinct connotations in intensity, duration, and usage."
  },
  {
    "objectID": "notes/166/index.html#despondency",
    "href": "notes/166/index.html#despondency",
    "title": "Nuances Among Despondency, Dejection, and Gloom",
    "section": "Despondency",
    "text": "Despondency\nDefinition: A state of deep despair, hopelessness, or discouragement.\nCharacteristics: * Intensity: Often the most severe and profound of the three. * Duration: Typically implies a longer-lasting emotional state.\nUsage: * Literature: “The protagonist’s despondency grew with each failed attempt to escape his fate.” * Formal writing: “The prolonged economic recession led to widespread despondency among job seekers.” * Casual conversation: “After months of fruitless job searching, John sank into despondency.”\nCollocations: deep despondency, utter despondency, sink into despondency"
  },
  {
    "objectID": "notes/166/index.html#dejection",
    "href": "notes/166/index.html#dejection",
    "title": "Nuances Among Despondency, Dejection, and Gloom",
    "section": "Dejection",
    "text": "Dejection\nDefinition: A state of sadness, disappointment, or lowered spirits.\nCharacteristics: * Intensity: Usually less intense than despondency but more than gloom. * Duration: Can be short-lived or last for a moderate period.\nUsage: * Literature: “Her dejection was palpable as she read the rejection letter.” * Formal writing: “The team’s dejection following their narrow defeat was evident in the post-match interview.” * Casual conversation: “Sarah’s dejection was clear as she left the audition, convinced she hadn’t performed well.”\nCollocations: air of dejection, overcome with dejection"
  },
  {
    "objectID": "notes/166/index.html#gloom",
    "href": "notes/166/index.html#gloom",
    "title": "Nuances Among Despondency, Dejection, and Gloom",
    "section": "Gloom",
    "text": "Gloom\nDefinition: A state of melancholy, pessimism, or despondency.\nCharacteristics: * Intensity: Generally less severe than despondency and can be similar to or less intense than dejection. * Duration: Can be situational or short-lived, but may also persist for some time.\nUsage: * Literature: “A pall of gloom hung over the household in the days following the funeral.” * Formal writing: “The constant rain cast a gloom over the entire town, affecting both tourism and local morale.” * Casual conversation: “The gloomy weather matched my mood perfectly.”\nCollocations: doom and gloom, dispel the gloom"
  },
  {
    "objectID": "notes/166/index.html#comparison",
    "href": "notes/166/index.html#comparison",
    "title": "Nuances Among Despondency, Dejection, and Gloom",
    "section": "Comparison",
    "text": "Comparison\n\nIntensity: Despondency &gt; Dejection &gt; Gloom (generally)\nDuration: Despondency (often long-term) &gt; Dejection (moderate) &gt; Gloom (variable)\nCause:\n\nDespondency: Often stems from a deep sense of despair or loss of hope\nDejection: Typically triggered by specific disappointing events\nGloom: Can be caused by external circumstances (like weather) or internal mindset"
  },
  {
    "objectID": "notes/166/index.html#synonyms",
    "href": "notes/166/index.html#synonyms",
    "title": "Nuances Among Despondency, Dejection, and Gloom",
    "section": "Synonyms",
    "text": "Synonyms\n\nDespondency: hopelessness, despair, depression\nDejection: disappointment, downheartedness, low spirits\nGloom: melancholy, pessimism, sombreness"
  },
  {
    "objectID": "notes/166/index.html#related-notes",
    "href": "notes/166/index.html#related-notes",
    "title": "Nuances Among Despondency, Dejection, and Gloom",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#165"
  },
  {
    "objectID": "notes/134/index.html",
    "href": "notes/134/index.html",
    "title": "Moving a Tmux Pane to Another Existing Window",
    "section": "",
    "text": "These instructions are adapted for my own customized meta key, set to ctrl-q. You will obviously need to adapt it to your own meta key if different."
  },
  {
    "objectID": "notes/134/index.html#detach-the-pane",
    "href": "notes/134/index.html#detach-the-pane",
    "title": "Moving a Tmux Pane to Another Existing Window",
    "section": "Detach the Pane",
    "text": "Detach the Pane\n\nPress ctrl-q ! to detach the pane you want to move.\nThis will create a new window containing only the pane you want to move."
  },
  {
    "objectID": "notes/134/index.html#navigate-to-target-window",
    "href": "notes/134/index.html#navigate-to-target-window",
    "title": "Moving a Tmux Pane to Another Existing Window",
    "section": "Navigate to Target Window",
    "text": "Navigate to Target Window\n\nSwitch to the window where you want to move the pane.\nUse ctrl-q 1 to switch to window 1, for example."
  },
  {
    "objectID": "notes/134/index.html#join-the-pane",
    "href": "notes/134/index.html#join-the-pane",
    "title": "Moving a Tmux Pane to Another Existing Window",
    "section": "Join the Pane",
    "text": "Join the Pane\n\nPress ctrl-q : and then type join-pane -s [source-window].\nReplace [source-window] with the ID or name of the window created in the previous step.\nIf needed, list all windows with ctrl-q s to find this ID."
  },
  {
    "objectID": "notes/134/index.html#related-notes",
    "href": "notes/134/index.html#related-notes",
    "title": "Moving a Tmux Pane to Another Existing Window",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#122"
  },
  {
    "objectID": "notes/57/index.html",
    "href": "notes/57/index.html",
    "title": "How to create a virtual environment for a Python project",
    "section": "",
    "text": "A brief guide on creating and managing a virtual environment for your Python projects using either the built-in venv module or the popular third-party tool virtualenv. Both methods allow for project-specific dependencies and settings, enabling you to work on multiple projects with different requirements on the same machine without conflicts.\nYou can install virtualenv using pip by running pip install virtualenv, or you can use your system’s package manager (for example, on Debian-based systems: sudo apt install python3-virtualenv)."
  },
  {
    "objectID": "notes/57/index.html#create-the-virtual-environment",
    "href": "notes/57/index.html#create-the-virtual-environment",
    "title": "How to create a virtual environment for a Python project",
    "section": "Create the virtual environment",
    "text": "Create the virtual environment\n\nWith the venv module:\npython -m venv .venv\n\n\nWith virtualenv:\nvirtualenv .venv\nReplace .venv with your desired environment name (see below for suggestions)."
  },
  {
    "objectID": "notes/57/index.html#activate-the-virtual-environment",
    "href": "notes/57/index.html#activate-the-virtual-environment",
    "title": "How to create a virtual environment for a Python project",
    "section": "Activate the virtual environment",
    "text": "Activate the virtual environment\n\nOn Unix-based systems:\n. .venv/bin/activate\n\n\nOn Windows:\n.venv\\Scripts\\activate\nThe terminal prompt should change to show the virtual environment’s name."
  },
  {
    "objectID": "notes/57/index.html#deactivate-the-virtual-environment",
    "href": "notes/57/index.html#deactivate-the-virtual-environment",
    "title": "How to create a virtual environment for a Python project",
    "section": "Deactivate the virtual environment",
    "text": "Deactivate the virtual environment\ndeactivate"
  },
  {
    "objectID": "notes/57/index.html#naming-the-virtual-environment",
    "href": "notes/57/index.html#naming-the-virtual-environment",
    "title": "How to create a virtual environment for a Python project",
    "section": "Naming the virtual environment",
    "text": "Naming the virtual environment\nThere is no strict rule for naming a virtual environment, but some common conventions include using descriptive names or names that follow a standard pattern. Here are a few suggestions:\n\nvenv: This is a simple and common name used for virtual environments. It is clear and concise, making it easy to recognize.\n.venv: By adding a dot (.) at the beginning, the virtual environment is treated as a hidden folder in Unix-based systems. This is a common convention, especially when the virtual environment is located within the project folder.\nenv: Another short and clear name that indicates it’s a virtual environment.\nmyenv: Replace my with a more descriptive name related to the project or purpose of the environment.\nprojectname_env: Replace projectname with the name of the project. This helps to easily identify the virtual environment associated with a specific project.\n\nKeep in mind that it’s a good practice to choose a name that clearly indicates the purpose or project it’s associated with. This makes it easier for you and others to manage and understand the virtual environments when working on multiple projects."
  },
  {
    "objectID": "notes/103/index.html",
    "href": "notes/103/index.html",
    "title": "Understanding YAML Block Scalars - Folded and Literal Styles",
    "section": "",
    "text": "YAML block scalars are specific types of data in YAML that span multiple lines. There are two styles: “folded” and “literal”."
  },
  {
    "objectID": "notes/103/index.html#folded-style",
    "href": "notes/103/index.html#folded-style",
    "title": "Understanding YAML Block Scalars - Folded and Literal Styles",
    "section": "Folded Style (>)",
    "text": "Folded Style (&gt;)\nThe “folded style” in YAML is denoted using the greater-than sign (&gt;). It is used for text data where:\n\nNewlines should be replaced with spaces, effectively creating a single long line from the source text.\nIf you want to insert a newline in the parsed text, you need to use a double newline in the source.\n\nHere’s an example:\nfolded_style: &gt;\n  This is a very long\n  sentence that spans several\n  lines in the YAML but will be\n  rendered as a single line\n  in the resulting string.\nIn the above YAML, the value of folded_style will be: This is a very long sentence that spans several lines in the YAML but will be rendered as a single line in the resulting string."
  },
  {
    "objectID": "notes/103/index.html#literal-style",
    "href": "notes/103/index.html#literal-style",
    "title": "Understanding YAML Block Scalars - Folded and Literal Styles",
    "section": "Literal Style (|)",
    "text": "Literal Style (|)\nThe “literal style” in YAML is denoted using the pipe character (|). It is used for text data where:\n\nNewlines should be preserved exactly as they are given in the source text.\n\nHere’s an example:\nliteral_style: |\n  This is a sentence.\n  This is another sentence.\n  This is yet another sentence.\nIn the above YAML, the value of literal_style will be:\nThis is a sentence.\nThis is another sentence.\nThis is yet another sentence.\nFor both the folded and literal styles, the initial level of indentation (before the &gt; or |) is removed in the parsed text, but any additional indentation is preserved."
  },
  {
    "objectID": "notes/81/index.html",
    "href": "notes/81/index.html",
    "title": "Instantly Paste Emojis Using a Windows Keybind",
    "section": "",
    "text": "You probably know you can access the clipboard on Windows by pressing Win + V. This opens up a pane with various tabs, including one for pasting emojis. However, a direct way to access the emoji pane (that I just discovered!) is by pressing Win + . (period key).\nFor AZERTY keyboards, use Win + ; (semicolon key) instead."
  },
  {
    "objectID": "notes/81/index.html#related-notes",
    "href": "notes/81/index.html#related-notes",
    "title": "Instantly Paste Emojis Using a Windows Keybind",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#87\nNote#78\nNote#47\nNote#16"
  },
  {
    "objectID": "notes/173/index.html",
    "href": "notes/173/index.html",
    "title": "Nuances Between Pervading and Pervasive",
    "section": "",
    "text": "While both “pervading” and “pervasive” relate to something spreading throughout or being present everywhere, they have subtle differences in usage and connotation."
  },
  {
    "objectID": "notes/173/index.html#pervading",
    "href": "notes/173/index.html#pervading",
    "title": "Nuances Between Pervading and Pervasive",
    "section": "Pervading",
    "text": "Pervading\n\nDefinition\nSpreading through or penetrating every part of something.\n\n\nConnotation and Usage\n\nOften implies an active or ongoing process of spreading\nCan suggest a more dynamic or temporary state\nFrequently used as a verb (pervade) or present participle (pervading)\nOften used to describe sensory experiences or abstract concepts\n\n\n\nUsage Examples\n\nLiterature: “A sense of unease was pervading the town as news of the impending storm spread.”\nFormal writing: “The researcher noted the pervading influence of social media on modern communication patterns.”\nCasual conversation: “The aroma of freshly baked bread was pervading the entire house.”\n\n\n\nCommon Collocations\n\npervading sense\npervading atmosphere\npervading theme"
  },
  {
    "objectID": "notes/173/index.html#pervasive",
    "href": "notes/173/index.html#pervasive",
    "title": "Nuances Between Pervading and Pervasive",
    "section": "Pervasive",
    "text": "Pervasive\n\nDefinition\nExisting in or spreading through every part of something; widespread.\n\n\nConnotation and Usage\n\nImplies a more established or complete presence\nSuggests a more permanent or entrenched state\nTypically used as an adjective\nOften used to describe systemic issues, cultural phenomena, or technological presence\n\n\n\nUsage Examples\n\nLiterature: “The author explored the pervasive impact of technology on human relationships.”\nFormal writing: “The study revealed a pervasive lack of trust in public institutions across all demographics.”\nCasual conversation: “Smartphones have become so pervasive that it’s rare to see anyone without one.”\n\n\n\nCommon Collocations\n\npervasive influence\npervasive problem\npervasive technology"
  },
  {
    "objectID": "notes/173/index.html#comparison",
    "href": "notes/173/index.html#comparison",
    "title": "Nuances Between Pervading and Pervasive",
    "section": "Comparison",
    "text": "Comparison\n\nState vs. Process: “Pervasive” often describes a more established state, while “pervading” can imply an ongoing process or action.\nPermanence: “Pervasive” suggests a more permanent or entrenched presence, whereas “pervading” can indicate a more temporary or changing condition.\nPart of Speech: “Pervading” is often used as a verb or present participle, while “pervasive” is typically used as an adjective.\nScope: Both words indicate widespread presence, but “pervasive” often implies a more complete or systemic spread.\nContext: “Pervading” is more commonly used for sensory experiences or abstract concepts, while “pervasive” is often used for societal issues, cultural phenomena, or technological presence."
  },
  {
    "objectID": "notes/173/index.html#synonyms-and-related-words",
    "href": "notes/173/index.html#synonyms-and-related-words",
    "title": "Nuances Between Pervading and Pervasive",
    "section": "Synonyms and Related Words",
    "text": "Synonyms and Related Words\n\nPervading: penetrating, suffusing, permeating, infusing\nPervasive: ubiquitous, omnipresent, all-encompassing, widespread\nRelated words: prevalent, rampant, extensive, far-reaching"
  },
  {
    "objectID": "notes/173/index.html#related-notes",
    "href": "notes/173/index.html#related-notes",
    "title": "Nuances Between Pervading and Pervasive",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#165"
  },
  {
    "objectID": "notes/74/index.html",
    "href": "notes/74/index.html",
    "title": "The Python Code Formatter Black Can Format Long Strings",
    "section": "",
    "text": "The --preview flag will format long strings but not long comments. There are no current plans to split long comments.\nsource: https://github.com/psf/black/issues/1331#issuecomment-1129236738"
  },
  {
    "objectID": "notes/74/index.html#related-notes",
    "href": "notes/74/index.html#related-notes",
    "title": "The Python Code Formatter Black Can Format Long Strings",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#71"
  },
  {
    "objectID": "notes/157/index.html",
    "href": "notes/157/index.html",
    "title": "Change Model Directory for Ollama",
    "section": "",
    "text": "You can set an environment variable OLLAMA_MODELS according to the documentation. However, it seems like it doesn’t always work for unknown reasons.\nInstead, you can create a symbolic link to a custom model directory:\nsudo ln -s /path/to/custom/ollama/model_dir/ /usr/share/ollama/.ollama"
  },
  {
    "objectID": "notes/82/index.html",
    "href": "notes/82/index.html",
    "title": "Partial Functions in Python",
    "section": "",
    "text": "A partial function is derived from an existing function by pre-filling (or “fixing”) some of its arguments with specific values. This creates a new function that behaves like the original but with fewer arguments to supply. In Python, you create them using functools.partial(func, *args, **kwargs)."
  },
  {
    "objectID": "notes/82/index.html#core-uses-benefits",
    "href": "notes/82/index.html#core-uses-benefits",
    "title": "Partial Functions in Python",
    "section": "Core Uses & Benefits",
    "text": "Core Uses & Benefits\nPartial functions enhance code reusability by allowing you to create specialized versions of general functions. They improve readability by giving these pre-configured functions meaningful names. They are also valuable for customizing callbacks by pre-supplying necessary arguments while still matching an expected function signature."
  },
  {
    "objectID": "notes/82/index.html#examples",
    "href": "notes/82/index.html#examples",
    "title": "Partial Functions in Python",
    "section": "Examples",
    "text": "Examples\n\nFixing a positional argument\nimport functools\ndef add(x, y): return x + y\nadd_three = functools.partial(add, 3)  # x is fixed to 3\nprint(add_three(5))  # Output: 8\n\n\nConfiguring specialized functions by fixing keyword arguments\nimport functools\ndef send_notification(message, recipient, channel):\n    print(f\"Sending to {recipient} via {channel}: {message}\")\n\n# Pre-configure notifiers for different channels\nemail_notifier = functools.partial(send_notification, channel=\"email\")\nsms_notifier = functools.partial(send_notification, channel=\"sms\")\n\n# Later, use the specialized notifiers\nemail_notifier(recipient=\"user@example.com\", message=\"Your order has shipped!\")\n# Output: Sending to user@example.com via email: Your order has shipped!\nsms_notifier(recipient=\"+1234567890\", message=\"Meeting reminder at 2 PM.\")\n# Output: Sending to +1234567890 via sms: Meeting reminder at 2 PM."
  },
  {
    "objectID": "notes/82/index.html#related-notes",
    "href": "notes/82/index.html#related-notes",
    "title": "Partial Functions in Python",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#83"
  },
  {
    "objectID": "notes/136/index.html",
    "href": "notes/136/index.html",
    "title": "yield from: The Extend Method for Generators",
    "section": "",
    "text": "As Trey Hunner said: “The yield from statement is to a list.extend() the way a yield statement is to a list.append().”"
  },
  {
    "objectID": "notes/136/index.html#basic-usage",
    "href": "notes/136/index.html#basic-usage",
    "title": "yield from: The Extend Method for Generators",
    "section": "Basic Usage",
    "text": "Basic Usage\ndef my_generator():\n    yield 1\n    yield 2\n    yield from [3, 4, 5]\n    yield 6\n\ngen = my_generator()\nprint(list(gen))  # Output: [1, 2, 3, 4, 5, 6]\nIn this example, yield from [3, 4, 5] is equivalent to:\nfor item in [3, 4, 5]:\n    yield item"
  },
  {
    "objectID": "notes/136/index.html#example-deep-flattening-nested-iterables",
    "href": "notes/136/index.html#example-deep-flattening-nested-iterables",
    "title": "yield from: The Extend Method for Generators",
    "section": "Example: Deep-Flattening Nested Iterables",
    "text": "Example: Deep-Flattening Nested Iterables\nfrom collections.abc import Iterable\nfrom typing import Any, Iterator\n\n\ndef deep_flatten(iterable: Iterable) -&gt; Iterator[Any]:\n    \"\"\"Flatten an iterable of iterables.\"\"\"\n    for element in iterable:\n        # Handle strings as special case, since they are iterable\n        if isinstance(element, str):\n            yield element\n        # Recursively flatten nested iterables\n        elif isinstance(element, Iterable):\n            yield from deep_flatten(element)\n        # Base case: yield non-iterable elements\n        else:\n            yield element"
  },
  {
    "objectID": "notes/136/index.html#references",
    "href": "notes/136/index.html#references",
    "title": "yield from: The Extend Method for Generators",
    "section": "References:",
    "text": "References:\n\nPython Morsels by Trey Hunner"
  },
  {
    "objectID": "notes/46/index.html",
    "href": "notes/46/index.html",
    "title": "How to disable the ^C char printed in Bash when pressing <CTRL-C>",
    "section": "",
    "text": "stty -echoctl"
  },
  {
    "objectID": "notes/126/index.html",
    "href": "notes/126/index.html",
    "title": "Managing Pinned Dependencies for Python Packages with uv",
    "section": "",
    "text": "There was pip-tools, but now there is uv."
  },
  {
    "objectID": "notes/126/index.html#what-is-uv",
    "href": "notes/126/index.html#what-is-uv",
    "title": "Managing Pinned Dependencies for Python Packages with uv",
    "section": "What is uv",
    "text": "What is uv\nuv should replace pip, pip-tools, and even virtualenv.\n\nA drop-in compatible API\nThis initial release centers on what we refer to as uv’s pip API. It’ll be familiar to those that have used pip and pip-tools in the past:\nInstead of pip install, run uv pip install to install Python dependencies from the command line, a requirements file, or a pyproject.toml.\nInstead of pip-compile, run uv pip compile to generate a locked requirements.txt.\nInstead of pip-sync, run uv pip sync to sync a virtual environment with a locked requirements.txt.\n\n\nAdvanced Resolution Strategies\n\n\nuv supports alternate resolution strategies. By default, uv follows the standard Python dependency resolution strategy of preferring the latest compatible version of each package. But by passing --resolution=lowest, library authors can test their packages against the lowest-compatible version of their dependencies.\nuv allows for resolutions against arbitrary target Python versions. While pip and pip-tools always resolve against the currently-installed Python version (generating, e.g., a Python 3.12-compatible resolution when running under Python 3.12), uv accepts a --python-version parameter, enabling you to generate, e.g., Python 3.7-compatible resolutions even when running under newer versions.\nuv allows for dependency “overrides”. uv takes pip’s “constraints” concepts a step further via overrides (-o overrides.txt), which allow the user to guide the resolver by overriding the declared dependencies of a package. Overrides give the user an escape hatch for working around erroneous upper bounds and other incorrectly-declared dependencies."
  },
  {
    "objectID": "notes/126/index.html#references",
    "href": "notes/126/index.html#references",
    "title": "Managing Pinned Dependencies for Python Packages with uv",
    "section": "References",
    "text": "References\n\npip-tools GitHub repo\npip-tools Documentation\nuv Release Blog Post"
  },
  {
    "objectID": "notes/126/index.html#related-notes",
    "href": "notes/126/index.html#related-notes",
    "title": "Managing Pinned Dependencies for Python Packages with uv",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#70\nNote#112\nNote#131"
  },
  {
    "objectID": "notes/8/index.html",
    "href": "notes/8/index.html",
    "title": "The rise of domain experts in deep learning",
    "section": "",
    "text": "Interview with Jeremy Howard, the founder of fast.ai.\nhttps://future.com/the-rise-of-domain-experts-in-deep-learning\nEdit: I changed my mind about what I wrote below at that time. It was really naive of me.\nArticle qui présente une histoire accélérée des praticiens du deep learning : des chercheurs aux prompt engineers. C’est une expression qu’on voit souvent depuis les débats enflammés autour des IA de générations d’images qui voleraient les artistes – mon emploi du conditionnel dénote ma posture éthique, car je trouve que les discussions autour du scraping relèvent d’un problème accessoire de légaliste. C’est à une toute autre échelle, mais n’importe quel artiste apprend par le pastiche sans jamais qu’il ne soit question de droits d’auteurs. Le véritable enjeu se trouve dans l’accès aux données : les grosses entreprises ont les moyens de récolter des données colossales pour construire leurs modèles ; mais sans les mettre à la disposition de tout un chacun, elles créent un problème d’équité majeur.\nCertains détracteurs et “lanceurs d’alertes” utilisent parfois cette qualification de prompt engineer pour nommer avec sarcasme les personnes qui se servent de ces IA pour créer des images, et ainsi retirer toute la créativité de leur agentivité. Pour moi, il est plutôt clair que c’est la machine qui est le réel “artiste”, tandis que les prompt engineers ont un rôle de directeur artistique – à la façon d’un réalisateur de cinéma. Ici, Jeremy Howard parle du prompt engineering comme d’un ensemble de compétences, sans aucun mépris, que tout le monde va devoir développer par la force des choses. C’est une question d’interactions homme-machine, dit-il, de la même manière que nous avons dû apprendre à nous servir des interfaces graphiques, de nos smartphones, etc."
  },
  {
    "objectID": "notes/13/index.html",
    "href": "notes/13/index.html",
    "title": "Guido van Rossum on dynamic vs static typing",
    "section": "",
    "text": "“I learned a painful lesson, that for small programs dynamic typing is great, for large programs you have to have a more disciplined approach and it helps if the language actually gives you that discipline, rather than telling you ‘Well you can do whatever you want’.”\nGuido van Rossum\n#typing #programming"
  },
  {
    "objectID": "notes/13/index.html#related-notes",
    "href": "notes/13/index.html#related-notes",
    "title": "Guido van Rossum on dynamic vs static typing",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#114"
  },
  {
    "objectID": "notes/178/index.html",
    "href": "notes/178/index.html",
    "title": "Synchronize Panes with tmux",
    "section": "",
    "text": "You can synchronize panes in tmux with the synchronize-panes option – that is, you can send the same input to multiple panes at the same time. It might be useful one day.\n:setw synchronize-panes on"
  },
  {
    "objectID": "notes/73/index.html",
    "href": "notes/73/index.html",
    "title": "Use sys.maxsize instead of float(\"inf\") in Python",
    "section": "",
    "text": "When working with integers, it’s better to use integer values for comparisons. Mixing integers and floating-point numbers can sometimes lead to unexpected behavior due to floating-point precision limitations. Using sys.maxsize and -sys.maxsize ensures that we are working with integers throughout the code, maintaining type consistency."
  },
  {
    "objectID": "notes/73/index.html#type-consistency",
    "href": "notes/73/index.html#type-consistency",
    "title": "Use sys.maxsize instead of float(\"inf\") in Python",
    "section": "",
    "text": "When working with integers, it’s better to use integer values for comparisons. Mixing integers and floating-point numbers can sometimes lead to unexpected behavior due to floating-point precision limitations. Using sys.maxsize and -sys.maxsize ensures that we are working with integers throughout the code, maintaining type consistency."
  },
  {
    "objectID": "notes/73/index.html#readability",
    "href": "notes/73/index.html#readability",
    "title": "Use sys.maxsize instead of float(\"inf\") in Python",
    "section": "Readability",
    "text": "Readability\nWhen reading the code, it’s easier to understand the intent behind using sys.maxsize and -sys.maxsize for initializing the minimum and maximum values, as they represent the largest positive and negative integers supported by the system. In contrast, float(\"inf\") and float(\"-inf\") represent infinite values in the floating-point number system, which might be confusing for some readers, especially when working with integers."
  },
  {
    "objectID": "notes/73/index.html#performance",
    "href": "notes/73/index.html#performance",
    "title": "Use sys.maxsize instead of float(\"inf\") in Python",
    "section": "Performance",
    "text": "Performance\nAlthough the performance difference is negligible in this case, using integer values for comparisons is generally faster than using floating-point numbers. This is because integer arithmetic is simpler and can be executed more quickly by the CPU."
  },
  {
    "objectID": "notes/73/index.html#summary",
    "href": "notes/73/index.html#summary",
    "title": "Use sys.maxsize instead of float(\"inf\") in Python",
    "section": "Summary",
    "text": "Summary\nOverall, using sys.maxsize and -sys.maxsize improves type consistency, readability, and performance when working with integer values in specific contexts."
  },
  {
    "objectID": "notes/73/index.html#related-notes",
    "href": "notes/73/index.html#related-notes",
    "title": "Use sys.maxsize instead of float(\"inf\") in Python",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#49"
  },
  {
    "objectID": "notes/23/index.html",
    "href": "notes/23/index.html",
    "title": "Set timezone in Linux",
    "section": "",
    "text": "sudo timedatectl set-timezone Europe/Paris"
  },
  {
    "objectID": "notes/167/index.html",
    "href": "notes/167/index.html",
    "title": "Nuances Among Fussy, Finicky, and Particular",
    "section": "",
    "text": "These words all describe being selective or having specific preferences, but they carry subtle differences in usage and connotation."
  },
  {
    "objectID": "notes/167/index.html#fussy",
    "href": "notes/167/index.html#fussy",
    "title": "Nuances Among Fussy, Finicky, and Particular",
    "section": "Fussy",
    "text": "Fussy\n\nDefinition\nDifficult to please, often due to concern with minor details or trivial matters.\n\n\nConnotation and Usage\n\nOften implies a negative or irritating quality\nCommonly used for babies or young children who are easily upset\nCan describe adults who are excessively concerned with trivial matters\nApplies to a wide range of situations, from personal taste to habits\n\n\n\nUsage Examples\n\nLiterature: “The fussy old librarian insisted on absolute silence in the reading room.”\nFormal writing: “The company’s fussy attention to detail ensures high-quality products but slows down production.”\nCasual conversation: “My toddler has become so fussy lately, he cries at the slightest discomfort.”\n\n\n\nCommon Collocations\n\nfussy eater\nfussy dresser\nfussy about details"
  },
  {
    "objectID": "notes/167/index.html#finicky",
    "href": "notes/167/index.html#finicky",
    "title": "Nuances Among Fussy, Finicky, and Particular",
    "section": "Finicky",
    "text": "Finicky\n\nDefinition\nExtremely selective or difficult to please, especially regarding matters of taste or preference.\n\n\nConnotation and Usage\n\nSuggests a more specific and often more negative trait than fussy or particular\nFrequently applied to tastes in food, but also to other preferences or behaviors\nImplies being excessively picky or hard to satisfy\nCan sometimes suggest precision or refinement, especially in technical contexts\n\n\n\nUsage Examples\n\nLiterature: “The watchmaker’s finicky approach to his craft resulted in timepieces of unparalleled accuracy.”\nFormal writing: “The experiment requires finicky adjustments to produce reliable results.”\nCasual conversation: “My cat is so finicky, she’ll only eat one specific brand of food.”\n\n\n\nCommon Collocations\n\nfinicky eater\nfinicky tastes\nfinicky about cleanliness"
  },
  {
    "objectID": "notes/167/index.html#particular",
    "href": "notes/167/index.html#particular",
    "title": "Nuances Among Fussy, Finicky, and Particular",
    "section": "Particular",
    "text": "Particular\n\nDefinition\nHighly specific or selective in preferences, requirements, or standards.\n\n\nConnotation and Usage\n\nMore neutral than “fussy” or “finicky,” often without negative implications\nCan sometimes have a positive connotation, implying discerning tastes or high standards\nUsed to describe specific preferences or requirements in various contexts\nCan also describe situations or tasks requiring close attention to detail\n\n\n\nUsage Examples\n\nLiterature: “She was particular about her coffee, always grinding the beans just before brewing.”\nFormal writing: “The client is especially particular about the color scheme, insisting on specific shades for the brand.”\nCasual conversation: “I’m not usually particular about restaurants, but for our anniversary, I want somewhere special.”\n\n\n\nCommon Collocations\n\nparticularly particular\nparticular about appearance\nparticular taste"
  },
  {
    "objectID": "notes/167/index.html#comparison",
    "href": "notes/167/index.html#comparison",
    "title": "Nuances Among Fussy, Finicky, and Particular",
    "section": "Comparison",
    "text": "Comparison\n\nConnotation: “Fussy” often implies irritating or unreasonable behavior, “finicky” suggests being excessively picky, while “particular” is more neutral and can even be positive.\nScope: “Fussy” is broad and often related to general behavior, “finicky” implies a narrower focus often on tastes or preferences, and “particular” can range from broad to specific standards across various contexts.\nAge associations: “Fussy” is often used for babies or children, while “finicky” and “particular” are more commonly used for adults.\nJustification: Being “particular” often implies a justified selectiveness, while “fussy” and “finicky” can suggest excessive or unjustified selectiveness."
  },
  {
    "objectID": "notes/167/index.html#synonyms-and-related-words",
    "href": "notes/167/index.html#synonyms-and-related-words",
    "title": "Nuances Among Fussy, Finicky, and Particular",
    "section": "Synonyms and Related Words",
    "text": "Synonyms and Related Words\n\nFussy: picky, choosy, fastidious\nFinicky: meticulous, exacting, discriminating\nParticular: specific, precise, selective\nRelated words: demanding, discerning, persnickety"
  },
  {
    "objectID": "notes/167/index.html#related-notes",
    "href": "notes/167/index.html#related-notes",
    "title": "Nuances Among Fussy, Finicky, and Particular",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#165"
  },
  {
    "objectID": "notes/155/index.html",
    "href": "notes/155/index.html",
    "title": "Solving X-Server (WSLg) Issues in WSL: Error: Can't open display: :0",
    "section": "",
    "text": "For whatever reason—as usual—, xclip and other program using the X-Server stopped working on my WSL installation. I just got the following error:\nError: Can't open display: :0\nRestarting WSL with wsl --shutdown and then started it again temporarily resolved the problem, but opening a tmux session would break it again. I tried the usual Windows shenanigans: check for updates, restart, etc. Nothing worked.\nI finally found a hacky solution in a GitHub Gist written by oleksis in one of the GitHub issues of WSLg. The important part for me was this:\n\nInit /tmp/.X11-unix is overwritten by mounts\nIf you still don’t see socket X0 follow these steps: issuecomment-826039096\nTo make it work with systemd, create /etc/tmpfiles.d/wslg.conf with following content:\n\n#  This file is part of the debianisation of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n\n# See tmpfiles.d(5) for details\n\n# Type Path           Mode UID  GID  Age Argument\nL+     /tmp/.X11-unix -    -    -    -   /mnt/wslg/.X11-unix"
  },
  {
    "objectID": "notes/87/index.html",
    "href": "notes/87/index.html",
    "title": "Remapping the ² Key on an AZERTY Keyboard with AutoHotkey (Windows)",
    "section": "",
    "text": "This guide explains how to create and automatically run an AutoHotkey script to map the ² key on an AZERTY keyboard to insert a backtick `.\nWhy not using the Windows PowerToys Keyboard Manager? Because it cannot create this kind of combination."
  },
  {
    "objectID": "notes/87/index.html#installing-autohotkey",
    "href": "notes/87/index.html#installing-autohotkey",
    "title": "Remapping the ² Key on an AZERTY Keyboard with AutoHotkey (Windows)",
    "section": "Installing AutoHotkey",
    "text": "Installing AutoHotkey\nhttps://www.autohotkey.com/"
  },
  {
    "objectID": "notes/87/index.html#creating-the-script",
    "href": "notes/87/index.html#creating-the-script",
    "title": "Remapping the ² Key on an AZERTY Keyboard with AutoHotkey (Windows)",
    "section": "Creating the script",
    "text": "Creating the script\nOpen a new text file and insert the following code snippet:\n; Pressing the ² key sends the backtick (`) character.\n; This is useful for AZERTY keyboards, for the ² key is useless.\n²::\nSend, `{ASC 96}\nreturn\nSave this script with a .ahk extension."
  },
  {
    "objectID": "notes/87/index.html#running-the-script",
    "href": "notes/87/index.html#running-the-script",
    "title": "Remapping the ² Key on an AZERTY Keyboard with AutoHotkey (Windows)",
    "section": "Running the script",
    "text": "Running the script\nRun the saved script with AutoHotkey. It will stay active as long as the script is running."
  },
  {
    "objectID": "notes/87/index.html#automatically-starting-the-script-when-windows-starts",
    "href": "notes/87/index.html#automatically-starting-the-script-when-windows-starts",
    "title": "Remapping the ² Key on an AZERTY Keyboard with AutoHotkey (Windows)",
    "section": "Automatically starting the script when Windows starts",
    "text": "Automatically starting the script when Windows starts\n\nPress Win + R to open the Run dialog box.\nIn the Run dialog, type shell:startup and hit Enter. This will open the Startup folder.\nPaste the script file in the Startup folder.\n\nThis will create a shortcut to your script in the Startup folder and run your script automatically every time Windows starts."
  },
  {
    "objectID": "notes/87/index.html#related-notes",
    "href": "notes/87/index.html#related-notes",
    "title": "Remapping the ² Key on an AZERTY Keyboard with AutoHotkey (Windows)",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#3\nNote#47\nNote#81\nNote#78\nNote#16"
  },
  {
    "objectID": "notes/164/index.html",
    "href": "notes/164/index.html",
    "title": "What is Style?",
    "section": "",
    "text": "It’s the thing that, when expressed, is the incarnation of a sensibility."
  },
  {
    "objectID": "notes/152/index.html",
    "href": "notes/152/index.html",
    "title": "Vim: Save a File You Forgot to Open with Sudo",
    "section": "",
    "text": ":w !sudo tee %"
  },
  {
    "objectID": "notes/6/index.html",
    "href": "notes/6/index.html",
    "title": "What is the Chiaroscuro technique?",
    "section": "",
    "text": "Chiaroscuro refers to how light and shadow are rendered on an object in a painting to create the perception of depth. The technique is commonly associated with the Renaissance, where it was brought to prominence by Leonardo da Vinci in such works at The Adoration of the Magi (ca. 1481-82) and Caravaggio in The Incredulity of St. Thomas (ca. 1601-02).\nThe word chiaroscuro is oxymoronic; it comes from the contrasting Italian words for “clear, light” (chiaro) and “obscure, dark” (oscuro).\n\n#art #art-history #art-technique\nhttps://www.merriam-webster.com/words-at-play/art-terms-techniques-vocabulary"
  },
  {
    "objectID": "notes/79/index.html",
    "href": "notes/79/index.html",
    "title": "Delete Lines Not Matching a Specific Pattern in Vim or with Sed",
    "section": "",
    "text": "As a stream editor, sed is more efficient since it doesn’t load the entire file into memory, making it faster than the Vim command. Nonetheless, the difference is negligible for small files."
  },
  {
    "objectID": "notes/79/index.html#using-vim",
    "href": "notes/79/index.html#using-vim",
    "title": "Delete Lines Not Matching a Specific Pattern in Vim or with Sed",
    "section": "Using Vim",
    "text": "Using Vim\nYou can use the :v command or the %g! command to delete lines that don’t match a specific pattern. Both commands are equivalent.\n\nUsing :v\n:v/pattern/d\n\n:v - Operate on lines not matching the pattern.\n/pattern/ - The regular expression pattern to search for.\nd - Delete the lines that meet the criteria.\n\n\n\nUsing %g!\n:%g!/pattern/d\n\n% - Operate on the entire file. (this is optional, as it’s the default behavior)\ng! - Operate on lines not matching the pattern (equivalent to :v).\n/pattern/ - The regular expression pattern to search for.\nd - Delete the lines that meet the criteria."
  },
  {
    "objectID": "notes/79/index.html#using-sed",
    "href": "notes/79/index.html#using-sed",
    "title": "Delete Lines Not Matching a Specific Pattern in Vim or with Sed",
    "section": "Using Sed",
    "text": "Using Sed\nIn sed, you can use the following command to delete lines that don’t match a specific pattern:\nsed '/pattern/!d' input_file &gt; output_file\n\n/pattern/ - The regular expression pattern to search for.\n! - Negate the following command for lines that match the pattern.\nd - Delete the lines that meet the criteria.\ninput_file - The file you want to process.\n&gt; - Redirect the output to a new file.\noutput_file - The file where you want to save the result."
  },
  {
    "objectID": "notes/33/index.html",
    "href": "notes/33/index.html",
    "title": "Can Python functions get lonely?",
    "section": "",
    "text": "This phrase has been coined by Michael Pound1. I find it really catchy and could be reused in an article about AI and emotions."
  },
  {
    "objectID": "notes/33/index.html#footnotes",
    "href": "notes/33/index.html#footnotes",
    "title": "Can Python functions get lonely?",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn the Computerphile video where he talked about LaMDA not being sentient (https://www.youtube.com/watch?v=iBouACLc-hw)↩︎"
  },
  {
    "objectID": "notes/94/index.html",
    "href": "notes/94/index.html",
    "title": "A Quote Diary",
    "section": "",
    "text": "I used to archive numerous quotes in my very old notes. If I happen to rediscover them while rummaging through those archives, I will try to add some of them here. I will also try to add new ones.\n=&gt; Il faut des auteurs médiocres pour les gens médiocres. ___\nI don’t remember the original quote, but I always remembered my interpretation of it:"
  },
  {
    "objectID": "notes/94/index.html#related-notes",
    "href": "notes/94/index.html#related-notes",
    "title": "A Quote Diary",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#9\nNote#36"
  },
  {
    "objectID": "notes/44/index.html",
    "href": "notes/44/index.html",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "",
    "text": "set spelllang=en_us,fr\nYes, with three times the character l."
  },
  {
    "objectID": "notes/44/index.html#add-the-languages-you-want-to-spell-check",
    "href": "notes/44/index.html#add-the-languages-you-want-to-spell-check",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "",
    "text": "set spelllang=en_us,fr\nYes, with three times the character l."
  },
  {
    "objectID": "notes/44/index.html#toggle-the-spell-checker-in-a-file",
    "href": "notes/44/index.html#toggle-the-spell-checker-in-a-file",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "Toggle the Spell Checker in a File",
    "text": "Toggle the Spell Checker in a File\nset spell!"
  },
  {
    "objectID": "notes/44/index.html#navigate-to-misspelled-words",
    "href": "notes/44/index.html#navigate-to-misspelled-words",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "Navigate to Misspelled Words",
    "text": "Navigate to Misspelled Words\n\nNext Misspelled Words\n]s\n\n\nPrevious Misspelled Words\n[s"
  },
  {
    "objectID": "notes/44/index.html#view-spell-checker-recommendations",
    "href": "notes/44/index.html#view-spell-checker-recommendations",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "View Spell Checker Recommendations",
    "text": "View Spell Checker Recommendations\nPress z= with the cursor on the misspelled word."
  },
  {
    "objectID": "notes/44/index.html#accept-the-first-recommendation",
    "href": "notes/44/index.html#accept-the-first-recommendation",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "Accept the First Recommendation",
    "text": "Accept the First Recommendation\nPress 1z= with the cursor on the misspelled word."
  },
  {
    "objectID": "notes/44/index.html#create-a-custom-dictionary",
    "href": "notes/44/index.html#create-a-custom-dictionary",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "Create a Custom Dictionary",
    "text": "Create a Custom Dictionary\n\nCreate a new text file that contains the words you want to add to the custom dictionary. Each word should be on a separate line.\nSave the file with a .dic extension. For example, you could save the file as programming.dic.\nType :set spellfile=path/to/custom.dic and press &lt;Enter&gt; (or add it to your .vimrc).\n\n\nUsing Multiple Custom Dictionaries\n:set spellfile=~/.vim/spell/en.utf-8.add,~/.vim/spell/my_custom.dic"
  },
  {
    "objectID": "notes/44/index.html#add-new-words-to-the-dictionary",
    "href": "notes/44/index.html#add-new-words-to-the-dictionary",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "Add New Words to the Dictionary",
    "text": "Add New Words to the Dictionary\nPress zg with the cursor on the misspelled word.\n\nAdd Words to a Different Dictionary\n\nSwitch to the dictionary you want to add the word to: :set spelllang=fr\nAdd the word using zg.\nSwitch back to your original dictionary: :set spelllang=en_us,fr"
  },
  {
    "objectID": "notes/44/index.html#add-words-to-a-specific-dictionary",
    "href": "notes/44/index.html#add-words-to-a-specific-dictionary",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "Add Words to a Specific Dictionary",
    "text": "Add Words to a Specific Dictionary\nUse :spell {word} {lang} to add a word to a specific dictionary without changing spelllang.\nFor example, :spell bonjour fr adds “bonjour” to the French dictionary."
  },
  {
    "objectID": "notes/44/index.html#remove-words-from-the-dictionary",
    "href": "notes/44/index.html#remove-words-from-the-dictionary",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "Remove Words from the Dictionary",
    "text": "Remove Words from the Dictionary\nPress zw with the cursor on the misspelled word."
  },
  {
    "objectID": "notes/44/index.html#customize-spell-checker-appearance",
    "href": "notes/44/index.html#customize-spell-checker-appearance",
    "title": "How to Use the Native Spell Checker of Vim",
    "section": "Customize Spell Checker Appearance",
    "text": "Customize Spell Checker Appearance\n\nSpellBad: the color for incorrectly spelled words;\nSpellCap: the color for capitalized words that might be incorrect;\nSpellRare: the color for rarely used words;\nSpellLocal: the color for words that are not recognized in the current language but are defined in a custom dictionary."
  },
  {
    "objectID": "notes/109/index.html",
    "href": "notes/109/index.html",
    "title": "Using Alternative Delimiters in Vim’s Substitution Command",
    "section": "",
    "text": "Vim’s :s command lets you use substitution with regular expressions. While / is the common delimiter, you can use other characters (except for \\, \", |)."
  },
  {
    "objectID": "notes/109/index.html#examples",
    "href": "notes/109/index.html#examples",
    "title": "Using Alternative Delimiters in Vim’s Substitution Command",
    "section": "Examples",
    "text": "Examples\n\nStandard Substitution\n:s/foo/bar/g\n\n\nSame substitution with # as delimiter\n:s#foo#bar#g\nUsing a different delimiter lets you avoid escaping slashes in patterns like file paths."
  },
  {
    "objectID": "notes/109/index.html#simplifying-file-path-substitution",
    "href": "notes/109/index.html#simplifying-file-path-substitution",
    "title": "Using Alternative Delimiters in Vim’s Substitution Command",
    "section": "Simplifying File Path Substitution",
    "text": "Simplifying File Path Substitution\n\nWith Escaping Slashes\n:s/\\/User\\/local\\/bin\\//\\/usr\\/sbin\\//g\n\n\nUsing # as Delimiter\n:s#/User/local/bin/#/usr/sbin/#g"
  },
  {
    "objectID": "notes/63/index.html",
    "href": "notes/63/index.html",
    "title": "Creating and managing cron jobs",
    "section": "",
    "text": "To create a cron job, follow these steps:\n\nType crontab -e to open the cron table for editing\nAdd your cron job in the following format: * * * * * command-to-be-executed\n\nEach field represents a unit of time (minute, hour, day, month, and weekday)\nUse an asterisk (*) for any field to represent every possible value\n\nSave and exit the file\n\nExample cron job (runs every day at 3:30 PM):\n30 15 * * * /path/to/script.sh"
  },
  {
    "objectID": "notes/63/index.html#how-to-create-a-cron-job",
    "href": "notes/63/index.html#how-to-create-a-cron-job",
    "title": "Creating and managing cron jobs",
    "section": "",
    "text": "To create a cron job, follow these steps:\n\nType crontab -e to open the cron table for editing\nAdd your cron job in the following format: * * * * * command-to-be-executed\n\nEach field represents a unit of time (minute, hour, day, month, and weekday)\nUse an asterisk (*) for any field to represent every possible value\n\nSave and exit the file\n\nExample cron job (runs every day at 3:30 PM):\n30 15 * * * /path/to/script.sh"
  },
  {
    "objectID": "notes/63/index.html#basic-cron-commands",
    "href": "notes/63/index.html#basic-cron-commands",
    "title": "Creating and managing cron jobs",
    "section": "Basic Cron Commands",
    "text": "Basic Cron Commands\n\ncrontab -l: List all your current cron jobs\ncrontab -e: Edit your cron jobs\ncrontab -r: Remove all your cron jobs\ncrontab -ir: Interactively remove a specific cron job"
  },
  {
    "objectID": "notes/63/index.html#adding-path-for-cron",
    "href": "notes/63/index.html#adding-path-for-cron",
    "title": "Creating and managing cron jobs",
    "section": "Adding PATH for Cron",
    "text": "Adding PATH for Cron\nCron jobs may not have access to the same environment variables as your regular user, so it’s essential to set the PATH variable. To do this, add the following line at the beginning of your crontab file:\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nReplace the example paths with the appropriate paths for your system."
  },
  {
    "objectID": "notes/63/index.html#cron-tips",
    "href": "notes/63/index.html#cron-tips",
    "title": "Creating and managing cron jobs",
    "section": "Cron Tips",
    "text": "Cron Tips\n\nTest your commands outside of cron first to ensure they work correctly\nUse absolute paths for commands and files to avoid potential issues\nRedirect output to a log file to capture any errors or successes. Example:\n\n30 15 * * * /path/to/script.sh &gt;&gt; /path/to/logfile.log 2&gt;&1\n\nUse the MAILTO variable to send email notifications about cron job status\nBe cautious when setting up frequent or resource-intensive cron jobs to avoid system overloads"
  },
  {
    "objectID": "notes/165/index.html",
    "href": "notes/165/index.html",
    "title": "Vocabulary Nuances",
    "section": "",
    "text": "Note#166\nNote#167\nNote#168\nNote#169\nNote#170\nNote#171\nNote#172\nNote#173"
  },
  {
    "objectID": "notes/61/index.html",
    "href": "notes/61/index.html",
    "title": "Ignoring portions of code with the Python code formatter Black",
    "section": "",
    "text": "To make Black ignore a specific portion of your code, you can use the # fmt: off and # fmt: on comments.\nFollow these steps:\n\nAdd # fmt: off before the section you want Black to ignore.\nWrite your code (the portion you don’t want Black to format).\nAdd # fmt: on after the section you want Black to ignore.\n\nExample:\nimport numpy as np\n\n# fmt: off\nmatrix = np.array([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n])\n# fmt: on\n\ndef some_function():\n    pass\nIn this example, the matrix array will not be formatted by Black, while the rest of the code will follow Black’s formatting rules."
  },
  {
    "objectID": "notes/76/index.html",
    "href": "notes/76/index.html",
    "title": "Pathlib vs. os.path Performance",
    "section": "",
    "text": "Object creation overhead: Path objects store more information and provide additional methods compared to os.path functions, which can lead to a slight overhead when creating and manipulating Path objects.\nMethod calls vs. functions: Method calls on Path objects can be slower than direct function calls from the os.path module, since Python method calls generally have some extra overhead compared to function calls.\nAdditional functionality: Some pathlib methods may perform more work than their equivalent os.path functions to provide additional functionality or to handle corner cases, which can result in slower performance."
  },
  {
    "objectID": "notes/76/index.html#reasons-for-path-from-pathlib-being-slower-than-os.path",
    "href": "notes/76/index.html#reasons-for-path-from-pathlib-being-slower-than-os.path",
    "title": "Pathlib vs. os.path Performance",
    "section": "",
    "text": "Object creation overhead: Path objects store more information and provide additional methods compared to os.path functions, which can lead to a slight overhead when creating and manipulating Path objects.\nMethod calls vs. functions: Method calls on Path objects can be slower than direct function calls from the os.path module, since Python method calls generally have some extra overhead compared to function calls.\nAdditional functionality: Some pathlib methods may perform more work than their equivalent os.path functions to provide additional functionality or to handle corner cases, which can result in slower performance."
  },
  {
    "objectID": "notes/76/index.html#tips-to-minimize-performance-difference",
    "href": "notes/76/index.html#tips-to-minimize-performance-difference",
    "title": "Pathlib vs. os.path Performance",
    "section": "Tips to minimize performance difference",
    "text": "Tips to minimize performance difference\n\nUse the most appropriate method or function for your use case. Sometimes pathlib provides a more efficient way to perform a certain operation than os.path does, or vice versa.\nMinimize the creation of unnecessary Path objects. If you need to manipulate paths in a performance-critical loop, consider using os.path functions or caching Path objects where possible to avoid creating new objects repeatedly.\nProfile your code to identify performance bottlenecks. If you find that pathlib is causing a significant slowdown in your code, you can consider switching to os.path for those specific operations."
  },
  {
    "objectID": "notes/76/index.html#general-advice",
    "href": "notes/76/index.html#general-advice",
    "title": "Pathlib vs. os.path Performance",
    "section": "General Advice",
    "text": "General Advice\nIn most cases, the performance difference between pathlib and os.path is negligible for typical use cases. It’s usually more beneficial to prioritize code readability and maintainability, which pathlib often provides, over minor performance optimizations."
  },
  {
    "objectID": "notes/41/index.html",
    "href": "notes/41/index.html",
    "title": "How to add quotes, parenthesis, etc., around text in Vim",
    "section": "",
    "text": "With your cursor on the word in normal mode\nciw()&lt;Esc&gt;P\nReplace () with what you want to add around the word (\"\", [], {}, etc.). You can adapt this command to any (visual) selection for larger portions of text."
  },
  {
    "objectID": "notes/19/index.html",
    "href": "notes/19/index.html",
    "title": "Checking user passwords",
    "section": "",
    "text": "An administrator can use john or crack (both are brute force password crackers) together with an appropriate wordlist to check users’ passwords and take appropriate action when a weak password is detected. You can search for Debian GNU packages that contain word lists using apt-cache search wordlist, or visit the classic Internet wordlist sites such as ftp://ftp.ox.ac.uk/pub/wordlists or ftp://ftp.cerias.purdue.edu/pub/dict.\n\nhttps://www.debian.org/doc/manuals/securing-debian-manual/ch04s11.en.html#user-pwgen\n#cybersecurity #passwords #cracking"
  },
  {
    "objectID": "notes/18/index.html",
    "href": "notes/18/index.html",
    "title": "Generating Secure Passwords with Linux Tools",
    "section": "",
    "text": "Debian provides makepasswd, apg, and pwgen packages which provide programs (the name is the same as the package) that can be used for generate passwords.\nMakepassd will generate true random passwords with an emphasis on security over pronounceability while pwgen will try to make meaningless but pronounceable passwords.\nhttps://www.debian.org/doc/manuals/securing-debian-manual/ch04s11.en.html#user-pwgen"
  },
  {
    "objectID": "notes/18/index.html#highly-secure-random-passwords-with-makepasswd",
    "href": "notes/18/index.html#highly-secure-random-passwords-with-makepasswd",
    "title": "Generating Secure Passwords with Linux Tools",
    "section": "Highly Secure Random Passwords with makepasswd",
    "text": "Highly Secure Random Passwords with makepasswd\nThe makepasswd command is a utility available in many Linux distributions to create high-security passwords. It focuses on generating truly random character strings, which, while less pronounceable, offer a high degree of security.\nmakepasswd --chars 16 --count 10\nThe --chars 16 option sets the length of the password to 16 characters, and the --count 10 option specifies the creation of 10 unique passwords."
  },
  {
    "objectID": "notes/18/index.html#pronounceable-passwords-with-pwgen",
    "href": "notes/18/index.html#pronounceable-passwords-with-pwgen",
    "title": "Generating Secure Passwords with Linux Tools",
    "section": "Pronounceable Passwords with pwgen",
    "text": "Pronounceable Passwords with pwgen\npwgen is another password generation utility available on many Linux distributions. Unlike makepasswd, it aims to produce passwords that, while still secure, are easier to pronounce and thus potentially easier to remember.\npwgen 16 10 -1\nThe 16 argument sets the length of the password to 16 characters, 10 specifies the generation of 10 unique passwords, and the -1 flag ensures that each password is printed on a separate line for better readability."
  },
  {
    "objectID": "notes/106/index.html",
    "href": "notes/106/index.html",
    "title": "Working With Timezones in Python",
    "section": "",
    "text": "Need to work with timezones in #Python?\nDon’t use pytz! Use zoneinfo.\nIt’s included in the standard library from Python 3.9 onward and pip install-able if you’re on 3.8.\nBig NOTE: If your code needs to run on Windows, you’ll also need to pip install tzdata too!\nWhat’s wrong with pytz? Silent bugs due to datetime arithmetic issues.\n&gt;&gt;&gt; pt = pytz.timezone(\"America/Los_Angeles\")\n&gt;&gt;&gt; mar1 = pt.localize(datetime(2023, 3, 1, 10, 0))\n&gt;&gt;&gt; apr1 = pt.localize(datetime(2023, 4, 1, 10, 0))\n&gt;&gt;&gt; apr1 &lt; mar1 + timedelta(days=31)\nTrue\nThese two times should be equal, but instead one is an hour before the other due to their timezone offsets.\n&gt;&gt;&gt; print(apr1_10am)\n2023-04-01 10:00:00-07:00\n&gt;&gt;&gt; print(march1_10am + timedelta(days=31))\n2023-04-01 10:00:00-08:00\nThat second one is in PST time during PDT!\nYou might say “well you’re supposed to do datetime arithmetic only on UTC times”.\nTrue… but it doesn’t have to be that way!\nThat’s a limitation with the way pytz works and it can cause all sorts of silent bugs.\nzoneinfo will do the right thing here instead.\nTweet from Trey Hunner"
  },
  {
    "objectID": "notes/106/index.html#references",
    "href": "notes/106/index.html#references",
    "title": "Working With Timezones in Python",
    "section": "References",
    "text": "References\nhttps://twitter.com/treyhunner/status/1677166047634370561"
  },
  {
    "objectID": "notes/30/index.html",
    "href": "notes/30/index.html",
    "title": "How to know the number of selected lines in Vim",
    "section": "",
    "text": "Select lines in VISUAL mode, and then press g + &lt;C-g&gt;."
  },
  {
    "objectID": "notes/70/index.html",
    "href": "notes/70/index.html",
    "title": "Distributing a Python CLI Application with Autocompletion",
    "section": "",
    "text": "A guide on how to distribute a Python CLI application, ensuring easy installation and shell autocompletion for users."
  },
  {
    "objectID": "notes/70/index.html#packaging-and-publishing-to-pypi",
    "href": "notes/70/index.html#packaging-and-publishing-to-pypi",
    "title": "Distributing a Python CLI Application with Autocompletion",
    "section": "Packaging and Publishing to PyPI",
    "text": "Packaging and Publishing to PyPI\n\nUse setuptools in your setup.py file\nfrom setuptools import setup, find_packages\n\n\nwith open(\"README.md\", encoding=\"UTF-8\") as file:\n    readme = file.read()\n\nwith open(\"requirements.txt\", encoding=\"UTF-8\") as file:\n    requirements = [line.strip() for line in file]\n\nsetup(\n    name=\"your-package-name\",\n    version=\"your-package-version\",\n    packages=find_packages(),\n    install_requires=[\n        requirements\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"your-command-name = your_package.module:function\"\n        ]\n    },\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n)\nReplace your-package-name, your-package-version, your-command-name, your_package.module, and function with the appropriate values for your project.\n\n\nTesting your package\nIn your virtual environment, you can install and test your package by running the following command:\npip install --editable .\nYou should be able to call your command in your virtual environment:\n$ my_script\nHello World!\n\n\nPublish your package to PyPI\n\nInstall the required tools: pip install setuptools wheel twine\nCreate a source distribution and a wheel distribution: python setup.py sdist bdist_wheel\nUpload the distributions to PyPI: twine upload dist/*"
  },
  {
    "objectID": "notes/70/index.html#storing-pypi-api-tokens",
    "href": "notes/70/index.html#storing-pypi-api-tokens",
    "title": "Distributing a Python CLI Application with Autocompletion",
    "section": "Storing PyPi API Tokens",
    "text": "Storing PyPi API Tokens\nThere are multiple ways to manage and securely store PyPI API tokens:\n\nEnvironment Variables: Store your API tokens as environment variables and reference them in your shell.\n.pypirc file: Store your tokens in a ~/.pypirc configuration file in your home directory. Beware of security risks as the file stores tokens in plaintext.\nkeyring library: Use the keyring library to securely store API tokens.\n\n\nThe .pypirc file\nA ~/.pypirc file might look like this:\n[distutils]\n  index-servers =\n    pypi\n    PROJECT_NAME\n\n[pypi]\n  username = __token__\n  password = API_TOKEN\n\n[PROJECT_NAME]\n  repository = https://upload.pypi.org/legacy/\n  username = __token__\n  password = API_TOKEN\nThis file tells your packaging tools to authenticate against PyPi or other Python package indexes. Here:\n\ndistutils is the main section, where you define your index servers.\npypi is where you put your default PyPI credentials.\nPROJECT_NAME is used to define per-project credentials.\n\n\n\nUsing Keyring\nWhen using the keyring library, ensure that you have the necessary backend installed for your system. On Linux, keyring often uses the Secret Service daemon provided by GNOME or KWallet provided by KDE. For terminal-only environments or cloud servers, keyrings.alt may be used as a backend but it is less secure as it stores secrets in plaintext. On macOS, there is Keychain. And on Windows, Windows Credential Locker.\nThen, you can use keyring to store your API token:\nkeyring set https://upload.pypi.org/legacy/ your-username\nUnfortunately, there isn’t a builtin way to store different API tokens per project. Maybe this will change in the future, as PyPi is pushing everyone to enable 2FA, which requires the use of an API token to upload—and not just a password."
  },
  {
    "objectID": "notes/70/index.html#shell-autocompletion",
    "href": "notes/70/index.html#shell-autocompletion",
    "title": "Distributing a Python CLI Application with Autocompletion",
    "section": "Shell Autocompletion",
    "text": "Shell Autocompletion\n\nIf using argcomplete, follow the instructions in the official documentation.\nIf using click, follow the instructions in the official documentation.\n\n\nGenerate Completion Files for click\nSave the script somewhere:\n\nBash\n_FOO_BAR_COMPLETE=bash_source foo-bar &gt; ~/.foo-bar-complete.bash\nSource the file in ~/.bashrc\n. ~/.foo-bar-complete.bash\nZsh\n_FOO_BAR_COMPLETE=zsh_source foo-bar &gt; ~/.foo-bar-complete.zsh\nSource the file in ~/.zshrc\n. ~/.foo-bar-complete.zsh\nDon’t forget to make it executable.\n\nI didn’t test it, but this might work for powershell:\nInvoke-Expression -Command (env:_YOUR_COMMAND_NAME_COMPLETE=PowerShell your-command-name)"
  },
  {
    "objectID": "notes/70/index.html#distributing-with-pipx",
    "href": "notes/70/index.html#distributing-with-pipx",
    "title": "Distributing a Python CLI Application with Autocompletion",
    "section": "Distributing with pipx",
    "text": "Distributing with pipx\nInstruct users to install and use pipx:\n\nUsers should first install pipx (if they haven’t already) using pip: pip install --user pipx, or their system’s package manager.\nThey may need to add the pipx binary location to their PATH environment variable. For example, on Linux and macOS, they can add the following line to their shell profile file (.bashrc, .zshrc, or similar):\n\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\nUsers can then install your CLI application using pipx: pipx install your-package-name."
  },
  {
    "objectID": "notes/70/index.html#related-notes",
    "href": "notes/70/index.html#related-notes",
    "title": "Distributing a Python CLI Application with Autocompletion",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#112\nNote#126\nNote#131\nNote#132"
  },
  {
    "objectID": "notes/35/index.html",
    "href": "notes/35/index.html",
    "title": "How to automatically create ordered lists in Vim",
    "section": "",
    "text": "Your start with something like this\none\ntwo\nthree\n\n\nUse the VISUAL BLOCK mode and Shift-i to add numbers\n0. one\n0. two\n0. three\n\n\nSelect in VISUAL LINE mode, then you can increment by 1 with Ctrl-a\n1. one\n1. two\n1. three\nNote that this would already be correctly rendered when converted from Markdown to HTML.\n\n\nOr you can press g Ctrl-a to order the lines in the text file\n1. one\n2. two\n3. three\n\n\nInstead of Ctrl-a, you can decrement by pressing Ctrl-x.\n# before \n1. one\n2. two\n3. three\n\n# after\n0. one\n0. two\n0. three"
  },
  {
    "objectID": "notes/180/index.html",
    "href": "notes/180/index.html",
    "title": "There Are No Prompt Engineers",
    "section": "",
    "text": "When it comes to actually write instructions to a language model, we are all the same."
  },
  {
    "objectID": "notes/180/index.html#instructions-for-apple-intelligence",
    "href": "notes/180/index.html#instructions-for-apple-intelligence",
    "title": "There Are No Prompt Engineers",
    "section": "Instructions for Apple Intelligence",
    "text": "Instructions for Apple Intelligence\nFrom this tweet:\n\nYou are an assistant which helps the user respond to their mails. Please draft a concise and natural reply based on the provided reply snippet. Please limit the answer within 50 words. Do not hallucinate. Do not make up factual information. Preserve the input mail tone.\nYou are a helpful mail assistant which can help identify relevant questions from a given mail and a short reply snippet. Given a mail and the reply snippet, ask relevant questions which are explicitly asked in the mail. The answer to those questions will be selected by the recipient which will help reduce hallucination in drafting the response. Please output top questions along with set of possible answers/options for each of those questions. Do not ask questions which are answered by the reply snippet. The questions should be short, no more than 8 words. Present your output in a json format with a list of dictionaries containing question and answers as the keys. If no question is asked in the mail, then output an empty list []. Only output valid json and nothing else."
  },
  {
    "objectID": "notes/180/index.html#instructions-by-one-of-the-cursor-developers",
    "href": "notes/180/index.html#instructions-by-one-of-the-cursor-developers",
    "title": "There Are No Prompt Engineers",
    "section": "Instructions by One of the Cursor Developers",
    "text": "Instructions by One of the Cursor Developers\nFrom this tweet:\n\nDO NOT GIVE ME HIGH LEVEL SHIT, IF I ASK FOR FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON’T WANT “Here’s how you can blablabla”\n\nBe casual unless otherwise specified\nBe terse\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just the conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it’s crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you’re an AI\nPlease respect my prettier preferences when you provide code.\nSplit into multiple responses if one response isn’t enough to answer the question.\n\nIf I ask for adjustments to code I have provided you, do not repeat all of my code unnecessarily. Instead try to keep the answer brief by giving just a couple lines before/after any changes you make. Multiple code blocks are ok."
  },
  {
    "objectID": "notes/180/index.html#references",
    "href": "notes/180/index.html#references",
    "title": "There Are No Prompt Engineers",
    "section": "References",
    "text": "References\n\n@burkov mocking tweet on Apple Intelligence\n@kayladotdev tweet reporting the Cursor’s config of @shaoruu"
  },
  {
    "objectID": "notes/188/index.html",
    "href": "notes/188/index.html",
    "title": "Automatic PyTorch Backend Selection with uv",
    "section": "",
    "text": "Tweet by Charlie Marsh:"
  },
  {
    "objectID": "notes/188/index.html#references",
    "href": "notes/188/index.html#references",
    "title": "Automatic PyTorch Backend Selection with uv",
    "section": "References",
    "text": "References\nuv documentation"
  },
  {
    "objectID": "notes/139/index.html",
    "href": "notes/139/index.html",
    "title": "Vim Shortcuts in Insert Mode",
    "section": "",
    "text": "Deletion and Backspace\n\nCtrl-W: Deletes the word before the cursor.\nCtrl-H: Deletes the character before the cursor.\nCtrl-U: Deletes everything from the cursor to the start of the line.\n\n\n\nIndentation\n\nCtrl-T: Increases the indent of the current line.\nCtrl-D: Decreases the indent of the current line.\n\n\n\nSingle Command Execution\n\nCtrl-O: Leaves insert mode for a single command.\n\n\n\nCharacter Insertion\n\nCtrl-E: Inserts the character below the cursor.\nCtrl-Y: Inserts the character above the cursor.\n\n\n\nMiscellaneous\n\nCtrl-I: Inserts a tab character, equivalent to the Tab key.\nCtrl-R: Followed by a register, pastes its contents.\n**Ctrl-@**: Inserts the last inserted text and stops insert mode.\nCtrl-A: Inserts previously inserted text.\n\n\n\nLine and Character Manipulation\n\nCtrl-J: Equivalent to the Enter key, starts a new line.\nCtrl-K: Followed by two characters, inserts a digraph.\nCtrl-N: Inserts the next match from the keyword completion list.\nCtrl-P: Inserts the previous match from the keyword completion list.\nCtrl-X Ctrl-O: Triggers omni-completion (context-specific completion options based on file type and contents).\n\n\n\nUndo Sequence Management\n\nCtrl-G u: Breaks the undo sequence, allowing separate undo operations for text entered before and after this command."
  },
  {
    "objectID": "notes/40/index.html",
    "href": "notes/40/index.html",
    "title": "How to use the undofile of Vim",
    "section": "",
    "text": "The simplest version is: create ~/.vim/undo-dir/ directory and add the following to the .vimrc:\nset undodir=~/.vim/undo-dir\nset undofile\nHowever, it’s not flawless, and it’s better to read on. From my own .vimrc:\n\" Let's save undo info!\nif !isdirectory($HOME.\"/.vim\")\n    call mkdir($HOME.\"/.vim\", \"\", 0770)\nendif\nif !isdirectory($HOME.\"/.vim/undo-dir\")\n    call mkdir($HOME.\"/.vim/undo-dir\", \"\", 0700)\nendif\nset undodir=~/.vim/undo-dir\nset undofile\nI prefer not to clutter random directories with undo files. So I set the undodir option, which puts all of them in one undo directory. That leaves one problem—I’m lazy, and don’t feel like creating that directory on all my machines (I use a version control system to sync my .vimrc across a bunch of machines). Thankfully, it’s easy enough to have Vim check for and create the directories if they don’t exist.\nNote also the 0700 mode on the undo directory (that’s full permissions for the owner, no permissions for anyone else). Which files I’ve edited, when, etc. should stay private. And since this is a directory only I can access, I don’t have to worry about someone else putting a symlink in there, or their own undo file, or whatever as you’d have to worry about using a system temporary directory.\nFinally, not being a system temporary directory, it’s not subject to the system tempfile cleanup policy. Often, that’s fairly short—a week or so. But to keep it from growing forever, I put the following in my crontab:\n# m h  dom mon dow   command\n 43 00 *   *   3     find /home/anthony/.vim/undo-dir -type f -mtime +90 -delete\nSo after 90 days of not being modified, they’re deleted. (Honestly, they’re not really that big, and you could easily leave them forever with how cheap disk is. But consider also your own privacy if your machine is ever compromised.)\n\nhttps://vi.stackexchange.com/a/53"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Blog",
    "section": "",
    "text": "Week 1: When and Why to Fine-Tune an LLM\n\n\n\nmastering-llm\n\n\n\nMy notes for the first week of the Mastering LLMs conference hosted by Hamel Husain and Dan Becker.\n\n\n\n\n\nMay 26, 2024\n\n5 min\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes",
    "section": "",
    "text": "TipTip: Full-Text Search\n\n\n\nPress s, f, or / on your keyboard to search the entire website.\n\n\nPlease keep in mind that these notes are just notes and should be regarded as such.\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Note#\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nNote#\n\n\n\nTitle\n\n\n\n \n\n\n\nDate\n\n\n\n\n\n\n\n\n190\n\n\nCommand Aliases in Click: True Aliases vs Prefix Matching\n\n\n \n\n\nOctober 2025\n\n\n\n\n\n\n189\n\n\nRemap Win + e to File Pilot\n\n\n \n\n\nAugust 2025\n\n\n\n\n\n\n188\n\n\nAutomatic PyTorch Backend Selection with uv\n\n\n \n\n\nMay 2025\n\n\n\n\n\n\n187\n\n\nA Needlessly Complex Word for a Simple Idea\n\n\n \n\n\nMarch 2025\n\n\n\n\n\n\n186\n\n\nZero-Setup Python Script Dependencies with uv\n\n\n \n\n\nMarch 2025\n\n\n\n\n\n\n185\n\n\nComics are Comics\n\n\n \n\n\nMarch 2025\n\n\n\n\n\n\n184\n\n\nQuarto has Native Support for Mermaid and Graphviz Diagrams\n\n\n \n\n\nMarch 2025\n\n\n\n\n\n\n183\n\n\nPython doesn’t perform tail-call optimization\n\n\n \n\n\nFebruary 2025\n\n\n\n\n\n\n182\n\n\nStandard Recursive Paradigm\n\n\n \n\n\nFebruary 2025\n\n\n\n\n\n\n181\n\n\nUse getpass to Get Passwords in Small Python Scripts\n\n\n \n\n\nNovember 2024\n\n\n\n\n\n\n180\n\n\nThere Are No Prompt Engineers\n\n\n \n\n\nNovember 2024\n\n\n\n\n\n\n179\n\n\nWhen to use NotImplemented and NotImplementedError in Python\n\n\n \n\n\nOctober 2024\n\n\n\n\n\n\n178\n\n\nSynchronize Panes with tmux\n\n\n \n\n\nOctober 2024\n\n\n\n\n\n\n177\n\n\nCreating Unique Non-None Placeholders in Python\n\n\n \n\n\nSeptember 2024\n\n\n\n\n\n\n176\n\n\nSome Python Type Challenges\n\n\n \n\n\nSeptember 2024\n\n\n\n\n\n\n175\n\n\nEasily move a WSL distribution to another drive\n\n\n \n\n\nAugust 2024\n\n\n\n\n\n\n174\n\n\nHiding Commands and Options in Click CLI Help Messages\n\n\n \n\n\nAugust 2024\n\n\n\n\n\n\n173\n\n\nNuances Between Pervading and Pervasive\n\n\n \n\n\nAugust 2024\n\n\n\n\n\n\n172\n\n\nNuances Among To Libel, To Vilify, and To Defame\n\n\n \n\n\nAugust 2024\n\n\n\n\n\n\n171\n\n\nNuances Between To Spur and To Foster\n\n\n \n\n\nAugust 2024\n\n\n\n\n\n\n170\n\n\nNuances Between To Stifle and To Smother\n\n\n \n\n\nAugust 2024\n\n\n\n\n\n\n169\n\n\nNuances Between To Wail and To Bewail\n\n\n \n\n\nJuly 2024\n\n\n\n\n\n\n168\n\n\nNuances Between To Relinquish and To Forego\n\n\n \n\n\nJuly 2024\n\n\n\n\n\n\n167\n\n\nNuances Among Fussy, Finicky, and Particular\n\n\n \n\n\nJuly 2024\n\n\n\n\n\n\n166\n\n\nNuances Among Despondency, Dejection, and Gloom\n\n\n \n\n\nJuly 2024\n\n\n\n\n\n\n165\n\n\nVocabulary Nuances\n\n\n \n\n\nJuly 2024\n\n\n\n\n\n\n164\n\n\nWhat is Style?\n\n\n \n\n\nJuly 2024\n\n\n\n\n\n\n163\n\n\nHow to Install Outdated Python Versions on Debian\n\n\n \n\n\nJuly 2024\n\n\n\n\n\n\n162\n\n\nShow the Lines of Context Around a ripgrep or grep Search\n\n\n \n\n\nJuly 2024\n\n\n\n\n\n\n161\n\n\nUse Multiple GitHub Accounts with the gh CLI\n\n\n \n\n\nJune 2024\n\n\n\n\n\n\n160\n\n\nHow to Rename a WSL Distribution\n\n\n \n\n\nJune 2024\n\n\n\n\n\n\n159\n\n\nUse git reset --keep, not git reset --hard\n\n\n \n\n\nJune 2024\n\n\n\n\n\n\n158\n\n\nCreate a “Featured” Column in Quarto Listings\n\n\n \n\n\nJune 2024\n\n\n\n\n\n\n157\n\n\nChange Model Directory for Ollama\n\n\n \n\n\nJune 2024\n\n\n\n\n\n\n156\n\n\nThe hosts File as a Self-Care Hack to Block Distractions\n\n\n⭐\n\n\nJune 2024\n\n\n\n\n\n\n155\n\n\nSolving X-Server (WSLg) Issues in WSL: Error: Can't open display: :0\n\n\n \n\n\nMay 2024\n\n\n\n\n\n\n154\n\n\nReading Note – People Cannot Distinguish GPT-4 from a Human in a Turing Test (2024)\n\n\n \n\n\nMay 2024\n\n\n\n\n\n\n153\n\n\nA Short Course on OSS Licensing for Research and Education\n\n\n \n\n\nMay 2024\n\n\n\n\n\n\n152\n\n\nVim: Save a File You Forgot to Open with Sudo\n\n\n \n\n\nMay 2024\n\n\n\n\n\n\n151\n\n\nVim: Moving to Next Search Pattern in Incremental Search\n\n\n \n\n\nApril 2024\n\n\n\n\n\n\n150\n\n\nBFS vs DFS\n\n\n \n\n\nApril 2024\n\n\n\n\n\n\n149\n\n\nHow to Execute Parallel and Concurrent Commands in Bash\n\n\n \n\n\nApril 2024\n\n\n\n\n\n\n148\n\n\nVim ga Command Shows ASCII Information\n\n\n \n\n\nApril 2024\n\n\n\n\n\n\n147\n\n\nResolving Vim Sluggishness Caused by ALE Linters with LaTeX Files\n\n\n \n\n\nMarch 2024\n\n\n\n\n\n\n146\n\n\nAutomating a Reading Note Template Generation Using Zotero Metadata\n\n\n \n\n\nMarch 2024\n\n\n\n\n\n\n145\n\n\nUnnecessary else Statement Can Be Better for Readability\n\n\n \n\n\nMarch 2024\n\n\n\n\n\n\n144\n\n\nUse ddof=1 for Sample Dispersion Measures with NumPy\n\n\n \n\n\nMarch 2024\n\n\n\n\n\n\n143\n\n\nUse git maintenance start\n\n\n \n\n\nFebruary 2024\n\n\n\n\n\n\n142\n\n\nGPG Key Configuration for Signing Commits with Git and GitHub\n\n\n \n\n\nFebruary 2024\n\n\n\n\n\n\n141\n\n\nManaging Git Configurations Conditionally\n\n\n \n\n\nFebruary 2024\n\n\n\n\n\n\n140\n\n\nThe Most Common Applications of Machine Learning\n\n\n \n\n\nFebruary 2024\n\n\n\n\n\n\n139\n\n\nVim Shortcuts in Insert Mode\n\n\n \n\n\nJanuary 2024\n\n\n\n\n\n\n138\n\n\nUsing Canonical Form via String Sorting for Anagram Grouping\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n137\n\n\nBasic Time Frames of Emotion\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n136\n\n\nyield from: The Extend Method for Generators\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n135\n\n\nHow to Know if an Object is an Iterable in Python\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n134\n\n\nMoving a Tmux Pane to Another Existing Window\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n133\n\n\nA Better Library for Logging in Python: Eliot\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n132\n\n\nrich.status: a Spinner for Better CLI UX\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n131\n\n\nPython Packaging with pyproject.toml\n\n\n⭐\n\n\nOctober 2023\n\n\n\n\n\n\n130\n\n\nVim Command for Retrieving Syntax Highlighting Information\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n129\n\n\nOptimizing Memory and Attribute Lookup in Python Classes with __slots__\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n128\n\n\nVim :g Command: A Practical Guide\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n127\n\n\nEquality vs Identity in Python\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n126\n\n\nManaging Pinned Dependencies for Python Packages with uv\n\n\n \n\n\nOctober 2023\n\n\n\n\n\n\n125\n\n\nUsing Git Interactive Rebase to Edit Commit Contents\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n124\n\n\nThe “Safe Triangle” Design Pattern for Better UI Context Menus\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n123\n\n\nSpeedy Directory Switching with CDPATH\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n122\n\n\nChatGPT Integration for Code Analysis in Vim\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n121\n\n\n!! Substitution in Bash and Zsh\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n120\n\n\nA Quick Guide to mktemp in Bash\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n119\n\n\nExtracting Largest and Smallest Items from a Collection in Python\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n118\n\n\nCheat Sheet for Python f-string\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n117\n\n\nrandom.choices(list, k=n) vs random.sample(list, k=n) in Python\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n116\n\n\nUnderstanding Keyword-Only Function Arguments in Python\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n115\n\n\nHow To Detect a Hashable Object in Python\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n114\n\n\nStrong vs. Weak Typing\n\n\n \n\n\nSeptember 2023\n\n\n\n\n\n\n113\n\n\nCommand History Search (Shell with Vi Mode)\n\n\n \n\n\nAugust 2023\n\n\n\n\n\n\n112\n\n\nManaging Upgrades of Bundled CLI Tools in a metapackage Installed via pipx\n\n\n \n\n\nAugust 2023\n\n\n\n\n\n\n111\n\n\nUUID: An Introduction and Usage\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n110\n\n\nExtracting Unique Patterns with grep or ripgrep\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n109\n\n\nUsing Alternative Delimiters in Vim’s Substitution Command\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n108\n\n\nw3m Cheatsheet\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n107\n\n\nStop Writing Your Error Messages to stdout\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n106\n\n\nWorking With Timezones in Python\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n105\n\n\nGoogle Dorking Cheat Sheet\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n104\n\n\ned Is Pronounced “ee-dee”\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n103\n\n\nUnderstanding YAML Block Scalars - Folded and Literal Styles\n\n\n \n\n\nJuly 2023\n\n\n\n\n\n\n102\n\n\nJedi-Vim Plugin Cheat Sheet\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n101\n\n\nUnderstanding xclip File Commands and Their Use Cases\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n100\n\n\nThere’s been the “good Bing 😊”. But is there a good Edge?\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n99\n\n\nUsing xclip for Clipboard Operations in WSL and VMs Running on Windows\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n98\n\n\nLICEcap: A Simple Tool for Recording GIFs\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n97\n\n\nSeam Carving Algorithm\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n96\n\n\nRemoving Vocals from Music: A Simple Hack\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n95\n\n\nRGB vs HSL Color Models\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n94\n\n\nA Quote Diary\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n93\n\n\nGeneral Strategy Whenever You Have a Bug\n\n\n \n\n\nJune 2023\n\n\n\n\n\n\n92\n\n\nUnderstanding Vim Regular Expressions: A Comparison with PCRE\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n91\n\n\nLearn Git and GitHub\n\n\n⭐\n\n\nMay 2023\n\n\n\n\n\n\n90\n\n\nContainers, Docker, and Podman\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n89\n\n\nThe XOR Operator and Its Applications to Programming\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n88\n\n\nSetting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n87\n\n\nRemapping the ² Key on an AZERTY Keyboard with AutoHotkey (Windows)\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n86\n\n\nCasting malloc and calloc in C and C++\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n85\n\n\nFile and Directory Listing in Python\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n84\n\n\nDifference between set and setx in a Windows shell\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n83\n\n\nPartial Functions vs Closures in Python\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n82\n\n\nPartial Functions in Python\n\n\n \n\n\nMay 2023\n\n\n\n\n\n\n81\n\n\nInstantly Paste Emojis Using a Windows Keybind\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n80\n\n\nUsing in vs. find() in Python\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n79\n\n\nDelete Lines Not Matching a Specific Pattern in Vim or with Sed\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n78\n\n\nQuick Workflow for Making a Screencast on Windows\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n77\n\n\nHow to Add a title and alt Attribute, and a caption to an Image Using Pandoc Markdown\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n76\n\n\nPathlib vs. os.path Performance\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n75\n\n\nDon’t use time.time()\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n74\n\n\nThe Python Code Formatter Black Can Format Long Strings\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n73\n\n\nUse sys.maxsize instead of float(\"inf\") in Python\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n72\n\n\nCombining Multiple GitHub Repositories into a Single Repository\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n71\n\n\nHandling Long Strings in Python\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n70\n\n\nDistributing a Python CLI Application with Autocompletion\n\n\n⭐\n\n\nApril 2023\n\n\n\n\n\n\n69\n\n\nRenaming Variables and Functions Across Multiple Files in Vim\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n68\n\n\nPerformance of Set-Based Word Existence Check\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n67\n\n\nIf Your Code Uses f-strings, Your Dictionaries Are Already Ordered\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n66\n\n\nTitles in English Should Be Capitalized\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n65\n\n\nVim Buffers: Renaming, Switching and Opening Files\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n64\n\n\nHow to Determine the Operating System Programmatically\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n63\n\n\nCreating and managing cron jobs\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n62\n\n\nEnhancing Variable Renaming in Vim\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n61\n\n\nIgnoring portions of code with the Python code formatter Black\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n60\n\n\nHow to use macros in Vim\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n59\n\n\nwhich vs command -v\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n58\n\n\nLinux Output Redirection\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n57\n\n\nHow to create a virtual environment for a Python project\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n56\n\n\nANSI Escape Sequences\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n55\n\n\nProtect yourself from overwriting files with the noclobber option\n\n\n \n\n\nApril 2023\n\n\n\n\n\n\n54\n\n\nHow to add a user to the sudo group\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n53\n\n\nDifference between su and su -\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n52\n\n\nEnabling autocompletion for a custom script in zsh or bash\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n51\n\n\nOpen a file from a path in Vim\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n50\n\n\npushd and popd are on a boat…\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n49\n\n\nHandling infinity in programming languages\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n48\n\n\nEvaluating variables in f-strings in Python\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n47\n\n\nA Very Simple Windows Management Workflow for Windows\n\n\n⭐\n\n\nMarch 2023\n\n\n\n\n\n\n46\n\n\nHow to disable the ^C char printed in Bash when pressing &lt;CTRL-C&gt;\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n45\n\n\nHow to sort inside brackets (parentheses, etc.) in Vim\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n44\n\n\nHow to Use the Native Spell Checker of Vim\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n43\n\n\nNo more delay when pasting before the cursor in Vim\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n42\n\n\nApply a (useless) rot13 to an entire file in Vim\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n41\n\n\nHow to add quotes, parenthesis, etc., around text in Vim\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n40\n\n\nHow to use the undofile of Vim\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n39\n\n\nWrite a note even if you think you don’t need it\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n38\n\n\nHow to switch the case of characters in Vim\n\n\n \n\n\nMarch 2023\n\n\n\n\n\n\n37\n\n\nHow to run the Python code formatter Black in Vim\n\n\n \n\n\nFebruary 2023\n\n\n\n\n\n\n36\n\n\nChanger de langue (citation de Cioran)\n\n\n \n\n\nFebruary 2023\n\n\n\n\n\n\n35\n\n\nHow to automatically create ordered lists in Vim\n\n\n \n\n\nFebruary 2023\n\n\n\n\n\n\n34\n\n\nWhat are the five critera for good interface design?\n\n\n \n\n\nFebruary 2023\n\n\n\n\n\n\n33\n\n\nCan Python functions get lonely?\n\n\n \n\n\nJanuary 2023\n\n\n\n\n\n\n32\n\n\nUse the casefold() method in Python when doing case-insensitive stuff\n\n\n \n\n\nJanuary 2023\n\n\n\n\n\n\n31\n\n\nHow to disable cursor blinking in a Linux shell\n\n\n \n\n\nJanuary 2023\n\n\n\n\n\n\n30\n\n\nHow to know the number of selected lines in Vim\n\n\n \n\n\nDecember 2022\n\n\n\n\n\n\n29\n\n\nThe problem of seeking informations and the limits of LLMs in that regard\n\n\n \n\n\nDecember 2022\n\n\n\n\n\n\n28\n\n\nHow to see network traffic in real time in Linux\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n27\n\n\nHow to increase the max upload file size for a PHP web server\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n26\n\n\nHow to securely wipe and erase a disk in Linux\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n25\n\n\nHow to import/export a database in MySQL/MariaDB\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n24\n\n\nHow to easily copy a public SSH key to another machine\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n23\n\n\nSet timezone in Linux\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n22\n\n\nBash history Toolkit\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n21\n\n\nHow to Determine Character Frequencies in a Python String\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n20\n\n\nHow to use ssh-agent to automatically enter your SSH key passphrase\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n19\n\n\nChecking user passwords\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n18\n\n\nGenerating Secure Passwords with Linux Tools\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n17\n\n\nHow to make .bashrc aliases available within a Vim shell command (:.!bash)\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n16\n\n\nUpgrade Windows Applications With a CLI Package Manager\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n15\n\n\nSome of my favorite fonts\n\n\n \n\n\nNovember 2022\n\n\n\n\n\n\n14\n\n\nExperts and Novices don’t learn the same way\n\n\n \n\n\nOctober 2022\n\n\n\n\n\n\n13\n\n\nGuido van Rossum on dynamic vs static typing\n\n\n \n\n\nSeptember 2022\n\n\n\n\n\n\n12\n\n\nHow to sort files and folders by size in Linux\n\n\n \n\n\nSeptember 2022\n\n\n\n\n\n\n11\n\n\nDifferences between Casting, Parsing and Converting\n\n\n \n\n\nSeptember 2022\n\n\n\n\n\n\n10\n\n\nHow to disable ligatures for the Fira Code font in Windows Terminal\n\n\n \n\n\nSeptember 2022\n\n\n\n\n\n\n9\n\n\nMoby Dick, extrait de la première page\n\n\n \n\n\nAugust 2022\n\n\n\n\n\n\n8\n\n\nThe rise of domain experts in deep learning\n\n\n \n\n\nAugust 2022\n\n\n\n\n\n\n7\n\n\nHow will machine learning impact the IT industry?\n\n\n \n\n\nAugust 2022\n\n\n\n\n\n\n6\n\n\nWhat is the Chiaroscuro technique?\n\n\n \n\n\nAugust 2022\n\n\n\n\n\n\n5\n\n\nC++ is not a superset of C\n\n\n \n\n\nAugust 2022\n\n\n\n\n\n\n4\n\n\nCybersecurity questions preparation exams\n\n\n \n\n\nJuly 2022\n\n\n\n\n\n\n3\n\n\nHow to remap keys in Linux\n\n\n \n\n\nJuly 2022\n\n\n\n\n\n\n2\n\n\nHow to change the default editor in Linux (when it’s Nano instead of Vim)\n\n\n \n\n\nJuly 2022\n\n\n\n\n\n\n1\n\n\nWhat is the difference between 127.0.0.1 and 0.0.0.0?\n\n\n \n\n\nJuly 2022\n\n\n\n\n\n\n0\n\n\nCitation de Louis Blanc\n\n\n \n\n\nJuly 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html",
    "href": "posts/mastering-llm-week-1/index.html",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "",
    "text": "I have rephrased the quotes for better readability, and enriched some of the content with additional information."
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#start-simple",
    "href": "posts/mastering-llm-week-1/index.html#start-simple",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Start Simple",
    "text": "Start Simple\n\n\nDo not start by trying to fine-tune but with prompt engineering and retrieval augmented generation (RAG)\nUse OpenAI, Claude, etc.\n“Vibe-checks” are okay in the beginning\nWrite simple tests and assertions\nShip fast"
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#evaluations-are-central",
    "href": "posts/mastering-llm-week-1/index.html#evaluations-are-central",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Evaluations are Central",
    "text": "Evaluations are Central\nhttps://hamel.dev/blog/posts/evals/"
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#when-to-fine-tune",
    "href": "posts/mastering-llm-week-1/index.html#when-to-fine-tune",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "When to Fine-Tune",
    "text": "When to Fine-Tune\n\nIf you have a prompt that resembles a programming language with numerous conditional statements, it’s an indication that fine-tuning might be beneficial.\nAdditionally, because of the diverse types of examples and various edge cases, it is challenging to cover all possibilities with just a few examples. However, there are strategies to enhance these few-shot examples. For instance, you could use RAG and maintain a database of different examples, making the few-shot examples dynamic. This approach can sometimes be effective.\nThese are some indicators to consider when evaluating the problem itself.\nHamel Husain\n\n\nData Privacy\nFine-tuning allows you to use private data to customize a model without exposing sensitive information to third-party services.\n\n\nQuality vs Latency Trade-off\nWhile using and/or generating fewer tokens can reduce latency, a fine-tuned model may also become so specialized that it limits its ability to perform other tasks.\n\n\nExtremely Narrow Problem\nFor very specialized tasks, general models may not perform adequately. Fine-tuning can help to address these issues.\n\n\nWhen Prompt Engineering Becomes Impractical\nFor complex tasks that require detailed prompts with many conditions, prompt engineering can become inefficient. In such cases, fine-tuning can be an effective solution."
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#fine-tuning-vs-rag",
    "href": "posts/mastering-llm-week-1/index.html#fine-tuning-vs-rag",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Fine-Tuning vs RAG",
    "text": "Fine-Tuning vs RAG\nOne does not replace the other. They are two different things.\nThey can be complementary, though. You could use a fine-tuned model to generate better answers with your RAG system."
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#preparing-your-data",
    "href": "posts/mastering-llm-week-1/index.html#preparing-your-data",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Preparing your Data",
    "text": "Preparing your Data\nGet as much data as possible (prompt/output pairs). Ultimately, it will often be a matter of time and cost.\n\nConsistent Template\nIt is paramount to clean and have a consistent template for your data."
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#synthetic-data",
    "href": "posts/mastering-llm-week-1/index.html#synthetic-data",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Synthetic Data",
    "text": "Synthetic Data\n\nUse the most powerful model to generate synthetic data. To avoid any legal issues, Mistral Large seems quite permissive in its terms and conditions.\nHamel Husain\n\nBut you do you. OpenAI, Anthropic, Google, and the other all used stolen data to train their models while legislating against their intellectual property being open source.\nThis was not in the course, but I think it might be relevant regarding the intellectual property: A short course on OSS Licensing for Research and Education.\nYou probably know what you are doing."
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#base-models-vs-instruct-models",
    "href": "posts/mastering-llm-week-1/index.html#base-models-vs-instruct-models",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Base Models vs Instruct Models",
    "text": "Base Models vs Instruct Models\n\nAn instruction tuned model is a base model that has been fine-tuned to speak with you in a chat like manner.\nHamel Husain\n\nWhich one to choose will depend on the problem you are trying to solve with fine-tuning. Basically, if you’re not building a chatbot, you might not need an instruct model."
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#which-size-to-choose",
    "href": "posts/mastering-llm-week-1/index.html#which-size-to-choose",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Which Size to Choose",
    "text": "Which Size to Choose\nChoosing the right model size is crucial as it affects both performance and operational costs.\nTry the 7B range models first, but you should develop an intuition with experience. Is the task something a small model can do? Does it require more “reasoning”?\n\nA larger model will cost more and be harder to host. I only fine-tune when it’s a very narrow problem, and where I think it’s going to fit in a small model.\nHamel Husain"
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#manage-user-expectations",
    "href": "posts/mastering-llm-week-1/index.html#manage-user-expectations",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Manage User Expectations",
    "text": "Manage User Expectations\n\nThe “Ask me anything” problem\n9 out of 10 people will ask you to build a chat bot: don’t do it\nBe skeptical of general chat bot\nFigure out how to have a better scope of the problem\n\nThe “Ask Me Anything” approach should be avoided because it sets unrealistic expectations for users.\nMaintaining such a broad scope is not only challenging but also impractical, as it requires the chatbot to understand and process a wide range of inputs. Instead, it is better to define a specific scope right from the start.\nExamples of why you should not build general chatbots:\n\nDPD error caused chatbot to swear at customer\nAir Canada has to honor a refund policy its chatbot made up\nBelgian man dies by suicide following exchanges with chatbot"
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#establish-standards-for-ideal-promptoutput-pairs",
    "href": "posts/mastering-llm-week-1/index.html#establish-standards-for-ideal-promptoutput-pairs",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "Establish Standards for Ideal Prompt/Output Pairs",
    "text": "Establish Standards for Ideal Prompt/Output Pairs\nDon’t mix “okay” answers with “great” ones in your dataset. You should have a clear distinction between them.\nIt is hard to write great answers, but we are good at evaluating which ones we prefer. There are many algorithms to implement those preferences. Currently, the one that seems to work best is Direct Preference Optimization (DPO).\nRemark: the 23rd of May, 2024, an article was published on a new algorithm found to be both simpler and more effective than DPO: Simple Preference Optimization (SimPO). This is very new at the time of writing (25th of May, 2024), so we will have to wait and see how it really performs.\n\nWhat is DPO?\nBasically, instead of linking a single output to a prompt, you will create a dataset with a prompt and a preference between two outputs: a chosen response and a rejected response.\nSee more:\n\nThe original article on the DPO algorithm (Rafailov et al., 2023).\nA practical example of DPO with the TRL library from HuggingFace\n\n\n\nPractical Application and Comparison of DPO\nThe use case was to automate responses to incoming emails. Here are the results of the blinded comparisons (ordered from best to worst):\n\nDPO\nHuman Agent\nSupervised Fine-Tuning on Mistral\nGPT-4\n\nDPO consistently produced “super human” responses in comparison to the other methods."
  },
  {
    "objectID": "posts/mastering-llm-week-1/index.html#references",
    "href": "posts/mastering-llm-week-1/index.html#references",
    "title": "Week 1: When and Why to Fine-Tune an LLM",
    "section": "References",
    "text": "References\n\nYour AI Product Needs Evals\nA short course on OSS Licensing for Research and Education\nDPD error caused chatbot to swear at customer\nAir Canada has to honor a refund policy its chatbot made up\nBelgian man dies by suicide following exchanges with chatbot\nSimPO: Simple Preference Optimization with a Reference-Free Reward (Meng et al., 2024)\nDirect Preference Optimization: Your Language Model is Secretly a Reward Model (Rafailov et al., 2023)\nA practical example of DPO with the TRL library from HuggingFace"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website serves as a platform for publishing some of my notes.\nThe image changes daily."
  },
  {
    "objectID": "notes/36/index.html",
    "href": "notes/36/index.html",
    "title": "Changer de langue (citation de Cioran)",
    "section": "",
    "text": "Si on en croit Simone Weil, changer de religion est aussi dangereux pour un croyant que changer de langue pour un écrivain. Je ne suis pas tout à fait de cet avis. Écrire dans une langue étrangère est une émancipation. C’est se libérer de son propre passé. Je dois avouer cependant qu’au commencement le français me faisait l’effet d’une camisole de force. Rien ne saurait moins convenir à un Balkanique que la rigueur de cette langue. […] Lorsque plus tard je me suis mis à écrire en français, j’ai fini par me rendre compte qu’adopter une langue étrangère était peut-être une libération mais aussi une épreuve, voire un supplice, un supplice fascinant néanmoins.\nAvec Gerd Bergfleth, 1984.\nCioran"
  },
  {
    "objectID": "notes/36/index.html#related-notes",
    "href": "notes/36/index.html#related-notes",
    "title": "Changer de langue (citation de Cioran)",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#9\nNote#94"
  },
  {
    "objectID": "notes/102/index.html",
    "href": "notes/102/index.html",
    "title": "Jedi-Vim Plugin Cheat Sheet",
    "section": "",
    "text": "&lt;leader&gt;d: Use this to navigate to the definition of a function or method under the cursor. It goes as far as possible to the original definition—it therefore might open a new buffer with another file.\n&lt;leader&gt;g: This is a typical “goto” function. It looks for the definition in the same file.\n&lt;leader&gt;r: Deletes the word under the cursor and awaits new variable name in Vim’s insert mode. Once provided, it replaces all occurrences project-wide.\n&lt;leader&gt;R: Keeps the word under the cursor, moves to its end, and awaits new variable name in Vim’s insert mode. Once provided, it replaces all occurrences project-wide.\n&lt;leader&gt;n: List all usages of the name under the cursor in a file.\nK: This keybinding is used to display the documentation for the function or method under the cursor.\n&lt;ctrl-space&gt;: Triggers Jedi-vim autocompletion, aiding in the quick completion of Python code variables, functions, and more.\n:Pyimport os: This command is used to import and open the os module. It allows for the direct interaction and experimentation with Python modules within Vim."
  },
  {
    "objectID": "notes/102/index.html#keybindings",
    "href": "notes/102/index.html#keybindings",
    "title": "Jedi-Vim Plugin Cheat Sheet",
    "section": "",
    "text": "&lt;leader&gt;d: Use this to navigate to the definition of a function or method under the cursor. It goes as far as possible to the original definition—it therefore might open a new buffer with another file.\n&lt;leader&gt;g: This is a typical “goto” function. It looks for the definition in the same file.\n&lt;leader&gt;r: Deletes the word under the cursor and awaits new variable name in Vim’s insert mode. Once provided, it replaces all occurrences project-wide.\n&lt;leader&gt;R: Keeps the word under the cursor, moves to its end, and awaits new variable name in Vim’s insert mode. Once provided, it replaces all occurrences project-wide.\n&lt;leader&gt;n: List all usages of the name under the cursor in a file.\nK: This keybinding is used to display the documentation for the function or method under the cursor.\n&lt;ctrl-space&gt;: Triggers Jedi-vim autocompletion, aiding in the quick completion of Python code variables, functions, and more.\n:Pyimport os: This command is used to import and open the os module. It allows for the direct interaction and experimentation with Python modules within Vim."
  },
  {
    "objectID": "notes/102/index.html#additional-information",
    "href": "notes/102/index.html#additional-information",
    "title": "Jedi-Vim Plugin Cheat Sheet",
    "section": "Additional Information",
    "text": "Additional Information\nTo access the built-in documentation of Jedi-Vim in Vim, use the following command:\n:help jedi"
  },
  {
    "objectID": "notes/102/index.html#related-notes",
    "href": "notes/102/index.html#related-notes",
    "title": "Jedi-Vim Plugin Cheat Sheet",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#62\nNote#69"
  },
  {
    "objectID": "notes/102/index.html#references",
    "href": "notes/102/index.html#references",
    "title": "Jedi-Vim Plugin Cheat Sheet",
    "section": "References",
    "text": "References\n\nhttps://github.com/davidhalter/jedi-vim"
  },
  {
    "objectID": "notes/58/index.html",
    "href": "notes/58/index.html",
    "title": "Linux Output Redirection",
    "section": "",
    "text": "To redirect stdout to a file, use the &gt; operator:\ncommand &gt; output.txt\nTo append stdout to a file, use the &gt;&gt; operator:\ncommand &gt;&gt; output.txt"
  },
  {
    "objectID": "notes/58/index.html#standard-output-stdout",
    "href": "notes/58/index.html#standard-output-stdout",
    "title": "Linux Output Redirection",
    "section": "",
    "text": "To redirect stdout to a file, use the &gt; operator:\ncommand &gt; output.txt\nTo append stdout to a file, use the &gt;&gt; operator:\ncommand &gt;&gt; output.txt"
  },
  {
    "objectID": "notes/58/index.html#standard-error-stderr",
    "href": "notes/58/index.html#standard-error-stderr",
    "title": "Linux Output Redirection",
    "section": "Standard Error (stderr)",
    "text": "Standard Error (stderr)\nTo redirect stderr to a file, use the 2&gt; operator:\ncommand 2&gt; errors.txt"
  },
  {
    "objectID": "notes/58/index.html#redirecting-stdout-and-stderr-separately",
    "href": "notes/58/index.html#redirecting-stdout-and-stderr-separately",
    "title": "Linux Output Redirection",
    "section": "Redirecting stdout and stderr Separately",
    "text": "Redirecting stdout and stderr Separately\nTo redirect stdout and stderr to separate files:\ncommand &gt; output.txt 2&gt; errors.txt"
  },
  {
    "objectID": "notes/58/index.html#redirecting-stdout-and-stderr-to-the-same-file",
    "href": "notes/58/index.html#redirecting-stdout-and-stderr-to-the-same-file",
    "title": "Linux Output Redirection",
    "section": "Redirecting stdout and stderr to the Same File",
    "text": "Redirecting stdout and stderr to the Same File\nTo redirect both stdout and stderr to the same file:\ncommand &gt; output_and_errors.txt 2&gt;&1\nHere, 2&gt;&1 means “redirect stderr (2) to the same location as stdout (1)”.\nOr even simpler, as it does the same thing:\ncommand &&gt; output_and_errors.txt"
  },
  {
    "objectID": "notes/58/index.html#related-notes",
    "href": "notes/58/index.html#related-notes",
    "title": "Linux Output Redirection",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#55"
  },
  {
    "objectID": "notes/20/index.html",
    "href": "notes/20/index.html",
    "title": "How to use ssh-agent to automatically enter your SSH key passphrase",
    "section": "",
    "text": "First, set up the environment variables:\nThen, add your private key to the agent and enter your passphrase:\nYour passphrase is now cached for the rest of the shell session.\nFinally, you can list the fingerprints of all your keys currently represented by the agent:"
  },
  {
    "objectID": "notes/20/index.html#related-notes",
    "href": "notes/20/index.html#related-notes",
    "title": "How to use ssh-agent to automatically enter your SSH key passphrase",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#24\nNote#88"
  },
  {
    "objectID": "notes/80/index.html",
    "href": "notes/80/index.html",
    "title": "Using in vs. find() in Python",
    "section": "",
    "text": "If you don’t need the index, but just want to test for inclusion, always use the in keyword instead of the find() method in Python."
  },
  {
    "objectID": "notes/80/index.html#overview",
    "href": "notes/80/index.html#overview",
    "title": "Using in vs. find() in Python",
    "section": "",
    "text": "If you don’t need the index, but just want to test for inclusion, always use the in keyword instead of the find() method in Python."
  },
  {
    "objectID": "notes/80/index.html#reasons-for-different-functionality",
    "href": "notes/80/index.html#reasons-for-different-functionality",
    "title": "Using in vs. find() in Python",
    "section": "Reasons for Different Functionality",
    "text": "Reasons for Different Functionality\n\nImplementation and Short-circuiting\n\nThe in keyword is a built-in operator in Python that works in conjunction with the __contains__ magic method of an object, while the find() method is a Python-level method implemented by certain types like strings.\nBoth in and find() can stop the search as soon as they find the element or substring, which is a form of short-circuiting. This behavior can optimize the speed of these operations for specific use cases.\nThe in operator only needs to return a boolean value indicating presence or absence, while the find() method returns the index of the first occurrence of the substring.\nFor built-in types like sets and dictionaries, Python’s in operator can use a hash-based lookup, which can be faster than a linear search for certain cases.\n\n\n\nPurpose\n\nThe in operator is designed specifically to check for the presence of an element in a sequence, while the find() method is designed to search for a substring and return its index.\nSince the in operator only needs to return a boolean value, its implementation is focused on presence checking, while find() also provides the index of the found substring."
  },
  {
    "objectID": "notes/80/index.html#conclusion",
    "href": "notes/80/index.html#conclusion",
    "title": "Using in vs. find() in Python",
    "section": "Conclusion",
    "text": "Conclusion\nThe choice between in and find() depends on the specific use case. The in operator is ideal for simple presence checks, while the find() method is suitable when you need to know the index of the substring.\nIn terms of performance, the in keyword will always be faster than the find() method."
  },
  {
    "objectID": "notes/140/index.html",
    "href": "notes/140/index.html",
    "title": "The Most Common Applications of Machine Learning",
    "section": "",
    "text": "making predictions;\ncompressing data;\ngenerating new data;\nlearning a series of action."
  },
  {
    "objectID": "notes/92/index.html",
    "href": "notes/92/index.html",
    "title": "Understanding Vim Regular Expressions: A Comparison with PCRE",
    "section": "",
    "text": "If you’re reading this in raw Markdown, be careful with the escaped | characters. I had to escape them in the raw text so that they would render in HTML correctly."
  },
  {
    "objectID": "notes/92/index.html#differences-between-vim-and-pcre-syntax",
    "href": "notes/92/index.html#differences-between-vim-and-pcre-syntax",
    "title": "Understanding Vim Regular Expressions: A Comparison with PCRE",
    "section": "Differences Between Vim and PCRE Syntax",
    "text": "Differences Between Vim and PCRE Syntax\n\n\n\n\n\n\n\n\nDescription\nPCRE Syntax\nVim Syntax\n\n\n\n\nZero or more of previous item, as few as possible (non-greedy)\n*?\n\\{-}\n\n\nOne or more of previous item, as many as possible (greedy)\n+\n\\+\n\n\nOne or more of previous item, as few as possible (non-greedy)\n+?\n\\{-1,}\n\n\nZero or one of previous item\n?\n\\?\n\n\nWord boundary\n\\b\n\\&lt; or \\&gt;\n\n\nGroup start\n(\n\\(\n\n\nGroup end\n)\n\\)\n\n\nOr\n\\|\n\\\\|\n\n\nEscaping special characters\n\\\n\\\\\n\n\n\n\nExamples\nThe following examples illustrate the differences between PCRE and Vim regex syntax through practical use cases:\n\n\n\nTask\nPCRE Example\nVim Example\n\n\n\n\nMatch “test” exactly\ntest\ntest\n\n\nMatch “test” at the start of line\n^test\n^test\n\n\nMatch “test” at the end of line\ntest$\ntest$\n\n\nMatch “test” as a whole word\n\\btest\\b\n\\&lt;test\\&gt;\n\n\nMatch one or more “a”s\na+\na\\+\n\n\nMatch zero or more “a”s\na*\na*\n\n\nMatch “a” zero or one times\na?\na\\?\n\n\nNon-greedy match for one or more “a”s\na+?\na\\{-1,}\n\n\nNon-greedy match for zero or more “a”s\na*?\na\\{-}\n\n\nMatch “a” followed by “b” or “c”\na(b\\|c)\na\\(b\\\\|c\\)\n\n\n\nThese examples should give you an idea of how to convert PCRE regular expressions to Vim’s syntax. Remember that the behavior of some regex patterns can change based on Vim’s magic mode setting, so be sure to specify the mode (\\v for very magic and \\V for very nomagic) to avoid confusion.\n\n\nVim’s Built-in Documentation\n:help perl-pattern\nThis command navigates to a section in Vim’s help documentation that explicitly describes the differences between Vim’s regex and Perl’s regex (PCRE)."
  },
  {
    "objectID": "notes/92/index.html#vim-magic-regex-mode",
    "href": "notes/92/index.html#vim-magic-regex-mode",
    "title": "Understanding Vim Regular Expressions: A Comparison with PCRE",
    "section": "Vim Magic Regex Mode",
    "text": "Vim Magic Regex Mode\nVim’s regular expressions offer two primary modes: magic and nomagic. These modes define how special characters, those with meanings beyond their literal representation, are treated.\nThe magic mode aligns Vim’s regular expressions more closely with the behavior of regular expressions in other languages and tools, considering characters such as . , * , ^ , and $ as special. This mode is activated by initiating the regular expression with \\v.\nIn contrast, nomagic mode necessitates escaping more characters with a backslash, as it considers fewer characters special. This mode can be activated by initiating the regular expression with \\V.\nImportantly, Vim operates in a somewhat magic mode by default, a middle ground between the two extremes. To avoid confusion, it is recommended to explicitly specify the mode (\\v for very magic and \\V for very nomagic).\n\nExamples of Magic, Somewhat Magic, and Nomagic Modes\nThe following examples demonstrate the impact of magic, somewhat magic (default), and nomagic modes on Vim regular expressions:\n\n\n\n\n\n\n\n\n\nTask\nMagic Mode Example (\\v)\nDefault (Somewhat Magic) Mode Example\nNomagic Mode Example (\\V)\n\n\n\n\nMatch “test” exactly\n\\vtest\ntest\n\\Vtest\n\n\nMatch “test” at the start of line\n\\v^test\n^test\n\\V\\^test\n\n\nMatch “test” at the end of line\n\\vtest$\ntest$\n\\Vtest\\$\n\n\nMatch “test” as a whole word\n\\v&lt;test&gt;\n\\&lt;test\\&gt;\n\\V\\&lt;test\\&gt;\n\n\nMatch one or more “a”s\n\\va+\na\\+\n\\Va\\+\n\n\nMatch zero or more “a”s\n\\va*\na*\n\\Va\\*\n\n\nMatch “a” zero or one times\n\\va?\na\\?\n\\Va\\?\n\n\nNon-greedy match for one or more “a”s\n\\va{-1,}\na\\{-1,\\}\n\\Va\\{-1,\\}\n\n\nNon-greedy match for zero or more “a”s\n\\va{-}\na\\{-\\}\n\\Va\\{-\\}\n\n\nMatch “a” followed by “b” or “c”\n\\v(a\\|b)\n\\(\\a\\|b\\)\n\\V\\(a\\\\|b\\)\n\n\n\nIn magic mode, Vim’s regex behaves more like other languages’ regular expressions, so you often need fewer backslashes. The default somewhat magic mode treats fewer characters as special, so more backslashes are required compared to magic mode. nomagic mode treats even fewer characters as special, so even more backslashes are typically required.\n\n\nVim’s Built-in Documentation\nFor more information about the magic mode in Vim’s regular expressions, refer to the built-in documentation by typing:\n:help /\\v"
  },
  {
    "objectID": "notes/92/index.html#references",
    "href": "notes/92/index.html#references",
    "title": "Understanding Vim Regular Expressions: A Comparison with PCRE",
    "section": "References",
    "text": "References\n\nhttps://learnbyexample.github.io/vim_reference/Regular-Expressions.html\nhttp://vimregex.com\nPart V of Practical Vim by Neil Drew\nGeneral guides on regex: https://www.regular-expressions.info/"
  },
  {
    "objectID": "notes/172/index.html",
    "href": "notes/172/index.html",
    "title": "Nuances Among To Libel, To Vilify, and To Defame",
    "section": "",
    "text": "While all three terms involve damaging someone’s reputation, they differ in their specific meanings, legal implications, and usage contexts."
  },
  {
    "objectID": "notes/172/index.html#to-libel",
    "href": "notes/172/index.html#to-libel",
    "title": "Nuances Among To Libel, To Vilify, and To Defame",
    "section": "To Libel",
    "text": "To Libel\n\nDefinition\nTo publish a false statement that is damaging to a person’s reputation, usually in written or printed form.\n\n\nConnotation and Usage\n\nHas a specific legal definition and implications\nPrimarily refers to written or published false statements\nOften used in media and journalism contexts\nImplies a more formal or public act of defamation\n\n\n\nUsage Examples\n\nLiterature: “The newspaper was sued for libeling the celebrity with false accusations.”\nFormal writing: “The politician claimed he had been libeled by the magazine’s article.”\nCasual conversation: “Be careful what you post online; you could accidentally libel someone.”\n\n\n\nCommon Collocations\n\nlibel suit\nlibel laws\ncommit libel"
  },
  {
    "objectID": "notes/172/index.html#to-vilify",
    "href": "notes/172/index.html#to-vilify",
    "title": "Nuances Among To Libel, To Vilify, and To Defame",
    "section": "To Vilify",
    "text": "To Vilify\n\nDefinition\nTo speak or write about in an abusively disparaging manner; to slander.\n\n\nConnotation and Usage\n\nSuggests a more emotional or intense form of criticism\nDoes not necessarily imply false statements, but extremely negative portrayal\nOften used in contexts of public opinion or rhetoric\nCan be applied to individuals, groups, or ideas\n\n\n\nUsage Examples\n\nLiterature: “The author vilified the corrupt regime in his scathing novel.”\nFormal writing: “The report accused the media of vilifying minority groups.”\nCasual conversation: “It’s unfair how they vilify anyone who disagrees with them.”\n\n\n\nCommon Collocations\n\nvilify opponents\nunjustly vilify\nvilify in the press"
  },
  {
    "objectID": "notes/172/index.html#to-defame",
    "href": "notes/172/index.html#to-defame",
    "title": "Nuances Among To Libel, To Vilify, and To Defame",
    "section": "To Defame",
    "text": "To Defame\n\nDefinition\nTo damage the good reputation of someone; slander or libel.\n\n\nConnotation and Usage\n\nA broader term that can include both spoken (slander) and written (libel) false statements\nOften used in legal contexts, but also in general usage\nImplies causing harm to someone’s reputation through false statements\nCan be used in both formal and informal settings\n\n\n\nUsage Examples\n\nLiterature: “The character spent years trying to clear his name after being defamed by his rivals.”\nFormal writing: “The company sued for damages, claiming it had been defamed by false advertising.”\nCasual conversation: “Be careful not to defame anyone in your blog posts; it could lead to legal trouble.”\n\n\n\nCommon Collocations\n\ndefame character\ndefamation lawsuit\npublicly defame"
  },
  {
    "objectID": "notes/172/index.html#comparison",
    "href": "notes/172/index.html#comparison",
    "title": "Nuances Among To Libel, To Vilify, and To Defame",
    "section": "Comparison",
    "text": "Comparison\n\nLegal specificity: “Libel” is the most legally specific, referring to written defamation. “Defame” is broader, covering both written and spoken false statements. “Vilify” is the least legally specific.\nTruth vs. Falsehood: “Libel” and “defame” imply false statements, while “vilify” can involve true but extremely negative portrayals.\nMedium: “Libel” typically involves written or published statements, “vilify” can be spoken or written, and “defame” covers both.\nIntensity: “Vilify” often implies the most intense or emotional negative portrayal, while “libel” and “defame” can vary in intensity.\nContext: “Libel” is often used in media contexts, “vilify” in rhetorical or public opinion contexts, and “defame” in both legal and general contexts."
  },
  {
    "objectID": "notes/172/index.html#synonyms-and-related-words",
    "href": "notes/172/index.html#synonyms-and-related-words",
    "title": "Nuances Among To Libel, To Vilify, and To Defame",
    "section": "Synonyms and Related Words",
    "text": "Synonyms and Related Words\n\nLibel: slander (spoken), defame, smear, malign\nVilify: denigrate, disparage, denounce, condemn\nDefame: slander, libel, malign, traduce\nRelated words: besmirch, tarnish, discredit, smear"
  },
  {
    "objectID": "notes/172/index.html#related-notes",
    "href": "notes/172/index.html#related-notes",
    "title": "Nuances Among To Libel, To Vilify, and To Defame",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#165"
  },
  {
    "objectID": "notes/129/index.html",
    "href": "notes/129/index.html",
    "title": "Optimizing Memory and Attribute Lookup in Python Classes with __slots__",
    "section": "",
    "text": "In Python, class attributes are usually stored in a dictionary called __dict__. This allows for dynamic addition of attributes but can be memory-inefficient. Python offers an alternative: the __slots__ attribute. By defining __slots__ in a class, you specify a fixed set of attributes, eliminating the need for a __dict__."
  },
  {
    "objectID": "notes/129/index.html#how-it-works",
    "href": "notes/129/index.html#how-it-works",
    "title": "Optimizing Memory and Attribute Lookup in Python Classes with __slots__",
    "section": "How it Works",
    "text": "How it Works\n\nDefault Storage: Normally, attributes are stored in a __dict__ dictionary for each instance.\nclass Point:\n    def __init__(self, x, y, z):\n        self.x, self.y, self.z = x, y, z\np = Point(1, 2, 3)\nprint(p.__dict__)  # Output: {'x': 1, 'y': 2, 'z': 3}\nUsing __slots__: To restrict attributes, define a __slots__ tuple in the class.\nclass Point:\n    __slots__ = ('x', 'y', 'z')\n    def __init__(self, x, y, z):\n        self.x, self.y, self.z = x, y, z\n\nThis prevents the addition of new attributes.\nEliminates the __dict__, thus saving memory."
  },
  {
    "objectID": "notes/129/index.html#why-use-__slots__",
    "href": "notes/129/index.html#why-use-__slots__",
    "title": "Optimizing Memory and Attribute Lookup in Python Classes with __slots__",
    "section": "Why Use __slots__",
    "text": "Why Use __slots__\n\nMemory Efficiency: Each instance uses a more efficient data structure instead of a dictionary.\nFaster Attribute Lookup: Avoids the computational cost of dictionary key lookups."
  },
  {
    "objectID": "notes/129/index.html#practical-example",
    "href": "notes/129/index.html#practical-example",
    "title": "Optimizing Memory and Attribute Lookup in Python Classes with __slots__",
    "section": "Practical Example",
    "text": "Practical Example\nIn a program that processes a large file to create a million instances of a Point class, using __slots__ reduced memory usage from 271,660 bytes to 176,328 bytes."
  },
  {
    "objectID": "notes/129/index.html#when-to-use",
    "href": "notes/129/index.html#when-to-use",
    "title": "Optimizing Memory and Attribute Lookup in Python Classes with __slots__",
    "section": "When to Use",
    "text": "When to Use\nUse __slots__ when you have thousands of instances or require frequent attribute lookups. However, it restricts dynamic attribute addition, so use it judiciously."
  },
  {
    "objectID": "notes/129/index.html#references",
    "href": "notes/129/index.html#references",
    "title": "Optimizing Memory and Attribute Lookup in Python Classes with __slots__",
    "section": "References",
    "text": "References\n\nRestricting Class Attributes with __slots__ – Python Morsels\nPython 3.12 Data Model: __slots__ – Python Official Documentation\nSlots in Python – GeeksforGeeks"
  },
  {
    "objectID": "notes/83/index.html",
    "href": "notes/83/index.html",
    "title": "Partial Functions vs Closures in Python",
    "section": "",
    "text": "A partial function is a new function derived from an existing one by pre-filling (or “fixing”) some of its arguments with specific values, effectively creating a version of the original function with a reduced arity. In Python, you create a partial function using functools.partial(func, *args, **keywords), where func is the original function, and *args and **keywords are the arguments you want to pre-set; calling partial returns a new callable (the partial function) that, when invoked, will call func with the pre-filled arguments along with any new arguments provided.\n\n\nimport functools\n\ndef add(x, y):\n    return x + y\n\nadd_five = functools.partial(add, 5)\n\nresult = add_five(3)\nprint(result)"
  },
  {
    "objectID": "notes/83/index.html#partial-functions",
    "href": "notes/83/index.html#partial-functions",
    "title": "Partial Functions vs Closures in Python",
    "section": "",
    "text": "A partial function is a new function derived from an existing one by pre-filling (or “fixing”) some of its arguments with specific values, effectively creating a version of the original function with a reduced arity. In Python, you create a partial function using functools.partial(func, *args, **keywords), where func is the original function, and *args and **keywords are the arguments you want to pre-set; calling partial returns a new callable (the partial function) that, when invoked, will call func with the pre-filled arguments along with any new arguments provided.\n\n\nimport functools\n\ndef add(x, y):\n    return x + y\n\nadd_five = functools.partial(add, 5)\n\nresult = add_five(3)\nprint(result)"
  },
  {
    "objectID": "notes/83/index.html#closures",
    "href": "notes/83/index.html#closures",
    "title": "Partial Functions vs Closures in Python",
    "section": "Closures",
    "text": "Closures\nA closure is a function that “remembers” and has access to variables from its enclosing lexical scope, even after the outer function has finished executing and those variables are no longer in scope. In Python, closures are created implicitly when a nested function references variables from its containing function, and this nested function is then returned or otherwise made accessible outside the outer function; the returned inner function, along with its captured environment, forms the closure.\n\nExample\ndef make_adder(x):\n    def add(y):\n        return x + y\n    return add\n\nadd_five = make_adder(5)\n\nresult = add_five(3)\nprint(result)"
  },
  {
    "objectID": "notes/83/index.html#related-notes",
    "href": "notes/83/index.html#related-notes",
    "title": "Partial Functions vs Closures in Python",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#82"
  },
  {
    "objectID": "notes/176/index.html",
    "href": "notes/176/index.html",
    "title": "Some Python Type Challenges",
    "section": "",
    "text": "A series of Python type challenges made by laike9m:\nhttps://python-type-challenges.zeabur.app/\nEven in the basic challenges, I’ve discovered typing.Final (added in version 3.8) and the deprecated typing.TypeAlias (added in version 3.10 but deprecated since version 3.12) that should be replaced with the type statement."
  },
  {
    "objectID": "notes/176/index.html#typing.final",
    "href": "notes/176/index.html#typing.final",
    "title": "Some Python Type Challenges",
    "section": "typing.Final",
    "text": "typing.Final\n\nFinal names cannot be reassigned in any scope. Final names declared in class scopes cannot be overridden in subclasses. For example:\n\nfrom typing import Final\n\n\nMAX_SIZE: Final = 9000\nMAX_SIZE += 1  # Error reported by type checker\n\nclass Connection:\n    TIMEOUT: Final[int] = 10\n\nclass FastConnector(Connection):\n    TIMEOUT = 1 # Error reported by type checker"
  },
  {
    "objectID": "notes/176/index.html#type-statement",
    "href": "notes/176/index.html#type-statement",
    "title": "Some Python Type Challenges",
    "section": "type statement",
    "text": "type statement\n\nThe type statement declares a type alias, which is an instance of typing.TypeAliasType.\nFor example, the following statement creates a type alias:\n\ntype Point = tuple[float, float]"
  },
  {
    "objectID": "notes/176/index.html#references",
    "href": "notes/176/index.html#references",
    "title": "Some Python Type Challenges",
    "section": "References",
    "text": "References\n\ntyping.Final\ntyping.TypeAlias\ntype statement"
  },
  {
    "objectID": "notes/159/index.html",
    "href": "notes/159/index.html",
    "title": "Use git reset --keep, not git reset --hard",
    "section": "",
    "text": "It’s too easy to lose work with git reset --hard. Fortunately, there is a safer alternative: git reset --keep.\ngit reset --keep gives the same result as git reset --hard but without deleting your uncommitted changes. Instead of losing your work, it gives you an error message."
  },
  {
    "objectID": "notes/159/index.html#example",
    "href": "notes/159/index.html#example",
    "title": "Use git reset --keep, not git reset --hard",
    "section": "Example",
    "text": "Example\n\nCreate, Commit, and Modify a File\n% touch file\n% git add file\n% git commit -m \"Create a file\"\n\n% echo \"content\" &gt;&gt; file\n% git add -u\n% git commit -m \"Add content to the file\"\n\n% echo \"more content\" &gt;&gt; file\n% git status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   file\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\nReset the changes\nNow, let’s try to reset one commit back.\n% git reset --keep @~\nerror: Entry 'file' not uptodate. Cannot merge.\nfatal: Could not reset index file to revision '@~'.\nAs you can see, git reset --keep prevents us from losing our changes.\nIf you use git reset --hard, you will lose your changes.\n% git reset --hard @~\nHEAD is now at &lt;commit-hash&gt; Create a file"
  },
  {
    "objectID": "notes/159/index.html#related-notes",
    "href": "notes/159/index.html#related-notes",
    "title": "Use git reset --keep, not git reset --hard",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#91"
  },
  {
    "objectID": "notes/118/index.html",
    "href": "notes/118/index.html",
    "title": "Cheat Sheet for Python f-string",
    "section": "",
    "text": "Python Morsels – Python f-string tips & cheat sheets\nPython f-string cheat sheets"
  },
  {
    "objectID": "notes/127/index.html",
    "href": "notes/127/index.html",
    "title": "Equality vs Identity in Python",
    "section": "",
    "text": "Equality (==): Checks if two objects represent the same data.\nx = [2, 1, 3, 4]\ny = [2, 1, 3, 4]\nx == y  # True\nIdentity (is): Checks if two objects are the same object in memory.\nx is y # False\nz = x\nx is z  # True"
  },
  {
    "objectID": "notes/127/index.html#equality-and-identity-is",
    "href": "notes/127/index.html#equality-and-identity-is",
    "title": "Equality vs Identity in Python",
    "section": "",
    "text": "Equality (==): Checks if two objects represent the same data.\nx = [2, 1, 3, 4]\ny = [2, 1, 3, 4]\nx == y  # True\nIdentity (is): Checks if two objects are the same object in memory.\nx is y # False\nz = x\nx is z  # True"
  },
  {
    "objectID": "notes/127/index.html#default-behavior-in-custom-classes",
    "href": "notes/127/index.html#default-behavior-in-custom-classes",
    "title": "Equality vs Identity in Python",
    "section": "Default Behavior in Custom Classes",
    "text": "Default Behavior in Custom Classes\n\nBy default, equality checks in custom classes behave like identity checks.\nThis can be customized using the __eq__ method.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\np = Point(1, 2)\nq = Point(1, 2)\np == q  # False"
  },
  {
    "objectID": "notes/127/index.html#integer-identity-quirks",
    "href": "notes/127/index.html#integer-identity-quirks",
    "title": "Equality vs Identity in Python",
    "section": "Integer Identity Quirks",
    "text": "Integer Identity Quirks\n\nPython optimizes integer objects for values between -5 and 256.\nThis optimization can sometimes extend to other integers within the same scope.\nx, y = 300, 300\nx is y  # True\nQuirkiness Explained\nAssigning the same integer value to different variables doesn’t guarantee identity.\n\na = 300\nb = 300\na is b  # False\na == b  # True\nThis behavior is quirky because it defies the intuition that two variables with the same value should be identical. However, Python’s memory optimization rules make this untrue for integers outside the -5 to 256 range."
  },
  {
    "objectID": "notes/127/index.html#string-optimization",
    "href": "notes/127/index.html#string-optimization",
    "title": "Equality vs Identity in Python",
    "section": "String Optimization",
    "text": "String Optimization\n\nPython also optimizes short strings.\nword1 = \"Hello\"\nword2 = \"Hello\"\nword1 is word2  # True"
  },
  {
    "objectID": "notes/127/index.html#when-to-use-is",
    "href": "notes/127/index.html#when-to-use-is",
    "title": "Equality vs Identity in Python",
    "section": "When to Use is",
    "text": "When to Use is\n\nRarely used except for checking sentinel values like None.\nx = None\nx is None  # True"
  },
  {
    "objectID": "notes/127/index.html#summary",
    "href": "notes/127/index.html#summary",
    "title": "Equality vs Identity in Python",
    "section": "Summary",
    "text": "Summary\n\nUse == for equality checks.\nUse is mainly for None checks, as recommended by PEP 8."
  },
  {
    "objectID": "notes/127/index.html#references",
    "href": "notes/127/index.html#references",
    "title": "Equality vs Identity in Python",
    "section": "References",
    "text": "References\n\nPEP 8 Programming Recommendations for None Checks\nPython Morsels – When is equality the same as identity?"
  },
  {
    "objectID": "notes/171/index.html",
    "href": "notes/171/index.html",
    "title": "Nuances Between To Spur and To Foster",
    "section": "",
    "text": "While both “spur” and “foster” involve encouragement or promotion of growth or development, they differ in their approach and connotations."
  },
  {
    "objectID": "notes/171/index.html#to-spur",
    "href": "notes/171/index.html#to-spur",
    "title": "Nuances Between To Spur and To Foster",
    "section": "To Spur",
    "text": "To Spur\n\nDefinition\nTo urge on or encourage to action; to stimulate or incite.\n\n\nConnotation and Usage\n\nImplies a more immediate or forceful encouragement\nOften used for short-term or quick actions\nCan suggest a sense of urgency or sudden motivation\nFrequently used in contexts of competition or achievement\n\n\n\nUsage Examples\n\nLiterature: “The general’s rousing speech spurred the troops to victory.”\nFormal writing: “The economic crisis spurred the government to implement radical reforms.”\nCasual conversation: “The looming deadline spurred me to finish the project overnight.”\n\n\n\nCommon Collocations\n\nspur into action\nspur growth\nspur innovation"
  },
  {
    "objectID": "notes/171/index.html#to-foster",
    "href": "notes/171/index.html#to-foster",
    "title": "Nuances Between To Spur and To Foster",
    "section": "To Foster",
    "text": "To Foster\n\nDefinition\nTo promote the growth or development of something; to nurture or cultivate over time.\n\n\nConnotation and Usage\n\nImplies a more nurturing, long-term approach to encouragement\nOften used for gradual development or ongoing support\nSuggests a supportive and caring attitude\nFrequently used in contexts of education, relationships, or social development\n\n\n\nUsage Examples\n\nLiterature: “The mentor fostered a love of literature in her young protégé.”\nFormal writing: “The new policy aims to foster innovation in small businesses.”\nCasual conversation: “Parents should strive to foster independence in their children.”\n\n\n\nCommon Collocations\n\nfoster a relationship\nfoster understanding\nfoster creativity"
  },
  {
    "objectID": "notes/171/index.html#comparison",
    "href": "notes/171/index.html#comparison",
    "title": "Nuances Between To Spur and To Foster",
    "section": "Comparison",
    "text": "Comparison\n\nTimeframe: “Spur” often implies immediate or short-term action, while “foster” suggests a longer-term, gradual process.\nIntensity: “Spur” tends to be more forceful or urgent, whereas “foster” is gentler and more nurturing.\nApproach: “Spur” is about stimulating or inciting action, while “foster” is about nurturing and supporting growth.\nContext: “Spur” is often used in contexts of achievement or competition, while “foster” is more common in educational, social, or developmental contexts.\nEmotional tone: “Spur” can sometimes have an aggressive or pressuring tone, while “foster” generally has a more positive, supportive connotation."
  },
  {
    "objectID": "notes/171/index.html#synonyms-and-related-words",
    "href": "notes/171/index.html#synonyms-and-related-words",
    "title": "Nuances Between To Spur and To Foster",
    "section": "Synonyms and Related Words",
    "text": "Synonyms and Related Words\n\nSpur: urge, incite, prompt, galvanize\nFoster: nurture, cultivate, encourage, promote\nRelated words: stimulate, develop, support, facilitate"
  },
  {
    "objectID": "notes/171/index.html#related-notes",
    "href": "notes/171/index.html#related-notes",
    "title": "Nuances Between To Spur and To Foster",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#165"
  },
  {
    "objectID": "notes/124/index.html",
    "href": "notes/124/index.html",
    "title": "The “Safe Triangle” Design Pattern for Better UI Context Menus",
    "section": "",
    "text": "Navigating hierarchical or nested context menus in UIs can be a challenging task. Users often encounter issues where the submenu disappears if the cursor slightly deviates from the intended path, leading to a frustrating user experience."
  },
  {
    "objectID": "notes/124/index.html#problem",
    "href": "notes/124/index.html#problem",
    "title": "The “Safe Triangle” Design Pattern for Better UI Context Menus",
    "section": "",
    "text": "Navigating hierarchical or nested context menus in UIs can be a challenging task. Users often encounter issues where the submenu disappears if the cursor slightly deviates from the intended path, leading to a frustrating user experience."
  },
  {
    "objectID": "notes/124/index.html#solution-the-safe-triangle",
    "href": "notes/124/index.html#solution-the-safe-triangle",
    "title": "The “Safe Triangle” Design Pattern for Better UI Context Menus",
    "section": "Solution: The “Safe Triangle”",
    "text": "Solution: The “Safe Triangle”\nThe “Safe Triangle” is a UI design pattern that effectively addresses this issue. It enhances the usability of hierarchical or nested context menus by creating an SVG triangle that serves as a “safe zone” around the submenu. Cursor tracking is implemented to ensure that the submenu remains open as long as the cursor is within this triangular area."
  },
  {
    "objectID": "notes/124/index.html#references",
    "href": "notes/124/index.html#references",
    "title": "The “Safe Triangle” Design Pattern for Better UI Context Menus",
    "section": "References",
    "text": "References\n\nSmashing Magazine – Better Context Menus With Safe Triangles"
  },
  {
    "objectID": "notes/26/index.html",
    "href": "notes/26/index.html",
    "title": "How to securely wipe and erase a disk in Linux",
    "section": "",
    "text": "shred overwrites a target by generating random sequences of 0 and 1.\n\nThis command will follow 5 passes in the background\nshred -fz -n 5 --random-source=/dev/urandom /dev/sda &\nThis will take a long, long time. However, I read that one pass is sufficient (Wright, Kleiman, & Sundhar, 2008), so maybe don’t do multiple passes after all.\n\nhttps://wiki.archlinux.org/title/Securely_wipe_disk (I swear I don’t run Arch, by the way 🥲.)\nOverwriting Hard Drive Data: The Great Wiping Controversy (Wright, Kleiman, & Sundhar, 2008)"
  },
  {
    "objectID": "notes/64/index.html",
    "href": "notes/64/index.html",
    "title": "How to Determine the Operating System Programmatically",
    "section": "",
    "text": "You can gather a lot of information about the platform where Python is running by using the standard library platform.\nimport platform\n\nplatform.system()\n\n&gt;&gt;&gt; 'Linux'\n\nplatform.system() Returns the system/OS name, such as ‘Linux’, ‘Darwin’, ‘Java’, ‘Windows’. An empty string is returned if the value cannot be determined.\nPython Documentation\n\nDarwin refers to macOS.\n\n\nclick integrates a useful function to find application folders.\n\nVery often, you want to open a configuration file that belongs to your application. However, different operating systems store these configuration files in different locations depending on their standards. Click provides a get_app_dir() function which returns the most appropriate location for per-user config files for your application depending on the OS.\nExample usage:\nimport os\nimport click\nimport ConfigParser\n\nAPP_NAME = 'My Application'\n\ndef read_config():\n    cfg = os.path.join(click.get_app_dir(APP_NAME), 'config.ini')\n    parser = ConfigParser.RawConfigParser()\n    parser.read([cfg])\n    rv = {}\n    for section in parser.sections():\n        for key, value in parser.items(section):\n            rv[f\"{section}.{key}\"] = value\n    return rv\n\nsource: https://click.palletsprojects.com/en/8.1.x/utils/#finding-application-folders"
  },
  {
    "objectID": "notes/64/index.html#using-python",
    "href": "notes/64/index.html#using-python",
    "title": "How to Determine the Operating System Programmatically",
    "section": "",
    "text": "You can gather a lot of information about the platform where Python is running by using the standard library platform.\nimport platform\n\nplatform.system()\n\n&gt;&gt;&gt; 'Linux'\n\nplatform.system() Returns the system/OS name, such as ‘Linux’, ‘Darwin’, ‘Java’, ‘Windows’. An empty string is returned if the value cannot be determined.\nPython Documentation\n\nDarwin refers to macOS.\n\n\nclick integrates a useful function to find application folders.\n\nVery often, you want to open a configuration file that belongs to your application. However, different operating systems store these configuration files in different locations depending on their standards. Click provides a get_app_dir() function which returns the most appropriate location for per-user config files for your application depending on the OS.\nExample usage:\nimport os\nimport click\nimport ConfigParser\n\nAPP_NAME = 'My Application'\n\ndef read_config():\n    cfg = os.path.join(click.get_app_dir(APP_NAME), 'config.ini')\n    parser = ConfigParser.RawConfigParser()\n    parser.read([cfg])\n    rv = {}\n    for section in parser.sections():\n        for key, value in parser.items(section):\n            rv[f\"{section}.{key}\"] = value\n    return rv\n\nsource: https://click.palletsprojects.com/en/8.1.x/utils/#finding-application-folders"
  },
  {
    "objectID": "notes/64/index.html#using-shell-commands",
    "href": "notes/64/index.html#using-shell-commands",
    "title": "How to Determine the Operating System Programmatically",
    "section": "Using shell commands",
    "text": "Using shell commands\nTo determine the operating system you’re on, try the following commands:\n\nUnix-based Systems (Linux, macOS, etc.)\nuname -a\nThis command provides information about the system, including the operating system name and version.\n\n\nLinux Systems\ncat /etc/os-release\nThis command displays detailed information about the distribution and version.\n\n\nWindows Systems\nver\nThis command displays the Windows version you’re running.\n\n\nDistinguishing Linux and macOS\nlsb_release -a 2&gt;/dev/null || sw_vers 2&gt;/dev/null\nThis command attempts to run lsb_release (common on Linux) and SW_vers (used on macOS) to display information about the OS."
  },
  {
    "objectID": "notes/142/index.html",
    "href": "notes/142/index.html",
    "title": "GPG Key Configuration for Signing Commits with Git and GitHub",
    "section": "",
    "text": "A step-by-step guide to generating a GPG key, configuring Git to use it for signing commits, adding the key to GitHub, verifying commit signatures, and setting up GPG agent for passphrase caching."
  },
  {
    "objectID": "notes/142/index.html#generate-a-gpg-key",
    "href": "notes/142/index.html#generate-a-gpg-key",
    "title": "GPG Key Configuration for Signing Commits with Git and GitHub",
    "section": "Generate a GPG Key",
    "text": "Generate a GPG Key\n\nOpen a terminal and run:\ngpg --full-generate-key\nFollow the prompts to select the key type, key size (recommend 4096 bits for RSA), and expiration. Enter your name and email address."
  },
  {
    "objectID": "notes/142/index.html#configure-git-to-sign-commits-with-gpg-key",
    "href": "notes/142/index.html#configure-git-to-sign-commits-with-gpg-key",
    "title": "GPG Key Configuration for Signing Commits with Git and GitHub",
    "section": "Configure Git to Sign Commits with GPG Key",
    "text": "Configure Git to Sign Commits with GPG Key\n\nList GPG keys to find your key ID:\ngpg --list-secret-keys --keyid-format LONG\nLook for the sec line followed by the key type and size, and then the key ID in this format: rsa4096/ABCDEFGH12345678 2021-01-01 [SC]. The key ID in this example is ABCDEFGH12345678.\nConfigure Git to use your GPG key:\ngit config --global user.signingkey YOUR_GPG_KEY_ID\nYou can now sign your commits using git commit -S.\nTo sign all commits by default in all repositories, use:\ngit config --global commit.gpgSign true"
  },
  {
    "objectID": "notes/142/index.html#add-your-gpg-key-to-github",
    "href": "notes/142/index.html#add-your-gpg-key-to-github",
    "title": "GPG Key Configuration for Signing Commits with Git and GitHub",
    "section": "Add Your GPG Key to GitHub",
    "text": "Add Your GPG Key to GitHub\n\nVia GitHub Web Interface\n\nExport your public GPG key:\ngpg --armor --export YOUR_GPG_KEY_ID\nCopy the exported key (including the -----BEGIN PGP PUBLIC KEY BLOCK----- and -----END PGP PUBLIC KEY BLOCK-----).\nGo to GitHub &gt; Settings &gt; SSH and GPG keys &gt; New GPG key, paste your key, and save.\n\n\n\nVia gh CLI\nRun to add your GPG key to GitHub:\ngh api user/gpg_keys -F armored_public_key=\"$(gpg --armor --export YOUR_GPG_KEY_ID)\""
  },
  {
    "objectID": "notes/142/index.html#verify-commit-signature",
    "href": "notes/142/index.html#verify-commit-signature",
    "title": "GPG Key Configuration for Signing Commits with Git and GitHub",
    "section": "Verify Commit Signature",
    "text": "Verify Commit Signature\nTo verify the signature of the latest commit, run:\ngit log --show-signature -1"
  },
  {
    "objectID": "notes/142/index.html#configure-gpg-agent-for-passphrase-caching",
    "href": "notes/142/index.html#configure-gpg-agent-for-passphrase-caching",
    "title": "GPG Key Configuration for Signing Commits with Git and GitHub",
    "section": "Configure GPG Agent for Passphrase Caching",
    "text": "Configure GPG Agent for Passphrase Caching\n\nEdit ~/.gnupg/gpg-agent.conf (create if it doesn’t exist):\nvim ~/.gnupg/gpg-agent.conf\nAdd or modify the following lines:\ndefault-cache-ttl 3600\nmax-cache-ttl 86400\nAdjust the values according to your security and convenience needs.\nRestart the GPG agent:\ngpgconf --kill gpg-agent\ngpg-agent --daemon\n\n\nStay in Your Terminal when Prompted for Passphrase\nTo avoid the passphrase prompt from opening a new window, add the following line to your shell configuration file (e.g., ~/.bashrc, ~/.zshrc):\nexport GPG_TTY=$(tty)"
  },
  {
    "objectID": "notes/108/index.html",
    "href": "notes/108/index.html",
    "title": "w3m Cheatsheet",
    "section": "",
    "text": "j - Cursor down\nk - Cursor up\nh - Cursor left\nl - Cursor right\nK - Scroll the screen down one line\nJ - Scroll the screen up one line\ng - Go to the first line\nG - Go to the last line\n[ - Move to the first hyperlink\n] - Move to the last hyperlink\nTAB - Move to the next hyperlink"
  },
  {
    "objectID": "notes/108/index.html#navigation",
    "href": "notes/108/index.html#navigation",
    "title": "w3m Cheatsheet",
    "section": "",
    "text": "j - Cursor down\nk - Cursor up\nh - Cursor left\nl - Cursor right\nK - Scroll the screen down one line\nJ - Scroll the screen up one line\ng - Go to the first line\nG - Go to the last line\n[ - Move to the first hyperlink\n] - Move to the last hyperlink\nTAB - Move to the next hyperlink"
  },
  {
    "objectID": "notes/108/index.html#hyperlink-operations",
    "href": "notes/108/index.html#hyperlink-operations",
    "title": "w3m Cheatsheet",
    "section": "Hyperlink Operations",
    "text": "Hyperlink Operations\n\nEnter - Follow current hyperlink in a new buffer\nc - Show current address\nu - Show target address\ni - Show image address\n= - Display information about the current document"
  },
  {
    "objectID": "notes/108/index.html#filestream-operations",
    "href": "notes/108/index.html#filestream-operations",
    "title": "w3m Cheatsheet",
    "section": "File/Stream Operations",
    "text": "File/Stream Operations\n\nU - Open specified document in a new buffer\nV - Open local file in a new buffer\n| - Pipe current buffer through a shell command and display output"
  },
  {
    "objectID": "notes/108/index.html#buffer-operations",
    "href": "notes/108/index.html#buffer-operations",
    "title": "w3m Cheatsheet",
    "section": "Buffer Operations",
    "text": "Buffer Operations\n\nB - Close current buffer and return to the one below in stack\ns - Pop up buffer-stack menu\nv - Toggle between HTML shown or processed\nS - Save rendered document\nE - Edit local source\nR - Load current document anew"
  },
  {
    "objectID": "notes/108/index.html#tab-operations",
    "href": "notes/108/index.html#tab-operations",
    "title": "w3m Cheatsheet",
    "section": "Tab Operations",
    "text": "Tab Operations\n\nT - Open a new tab (with current document)\nC-t - Open the link in a new tab\n} - Switch to the next tab\n{ - Switch to the previous tab\nEsc-t - Pop up tab selection menu"
  },
  {
    "objectID": "notes/108/index.html#bookmark-management",
    "href": "notes/108/index.html#bookmark-management",
    "title": "w3m Cheatsheet",
    "section": "Bookmark Management",
    "text": "Bookmark Management\n\nESC-b - View bookmarks\nESC-a - Add current page to bookmarks\nTo delete or rename a bookmark, view bookmarks, navigate to the bookmark you want to modify, press E and perform your desired action."
  },
  {
    "objectID": "notes/108/index.html#searches",
    "href": "notes/108/index.html#searches",
    "title": "w3m Cheatsheet",
    "section": "Searches",
    "text": "Searches\n\n/ - Search forward\n? - Search backward\nn - Continue search forward\nN - Continue search backward"
  },
  {
    "objectID": "notes/108/index.html#miscellaneous",
    "href": "notes/108/index.html#miscellaneous",
    "title": "w3m Cheatsheet",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nM - Open the current page in the external (GUI) web browser\nH - Show help panel\no - Display options setting panel\nr - Display the version of w3m\nq - Quit with confirmation request\nQ - Quit without confirmation\nC-k - View cookie list\nC-h - Show browsing history"
  },
  {
    "objectID": "notes/108/index.html#references",
    "href": "notes/108/index.html#references",
    "title": "w3m Cheatsheet",
    "section": "References",
    "text": "References\n\nhttps://w3m.sourceforge.net/MANUAL#Key:orig"
  },
  {
    "objectID": "notes/154/index.html",
    "href": "notes/154/index.html",
    "title": "Reading Note – People Cannot Distinguish GPT-4 from a Human in a Turing Test (2024)",
    "section": "",
    "text": "Published: 2024-05-09\nKeywords: Computer Science - Artificial Intelligence,Computer Science - Human-Computer Interaction\nURL: http://arxiv.org/abs/2405.08007\nBibTeX: @jonesPeopleCannotDistinguish2024"
  },
  {
    "objectID": "notes/154/index.html#reading-status",
    "href": "notes/154/index.html#reading-status",
    "title": "Reading Note – People Cannot Distinguish GPT-4 from a Human in a Turing Test (2024)",
    "section": "Reading Status",
    "text": "Reading Status\n\nOnly read the abstract\nSkimmed\nEngaged"
  },
  {
    "objectID": "notes/154/index.html#abstract",
    "href": "notes/154/index.html#abstract",
    "title": "Reading Note – People Cannot Distinguish GPT-4 from a Human in a Turing Test (2024)",
    "section": "Abstract",
    "text": "Abstract\nWe evaluated 3 systems (ELIZA, GPT-3.5 and GPT-4) in a randomized, controlled, and preregistered Turing test. Human participants had a 5 minute conversation with either a human or an AI, and judged whether or not they thought their interlocutor was human. GPT-4 was judged to be a human 54% of the time, outperforming ELIZA (22%) but lagging behind actual humans (67%). The results provide the first robust empirical demonstration that any artificial system passes an interactive 2-player Turing test. The results have implications for debates around machine intelligence and, more urgently, suggest that deception by current AI systems may go undetected. Analysis of participants’ strategies and reasoning suggests that stylistic and socio-emotional factors play a larger role in passing the Turing test than traditional notions of intelligence."
  },
  {
    "objectID": "notes/154/index.html#twitter-thread",
    "href": "notes/154/index.html#twitter-thread",
    "title": "Reading Note – People Cannot Distinguish GPT-4 from a Human in a Turing Test (2024)",
    "section": "Twitter Thread",
    "text": "Twitter Thread\nBy one of the authors: https://twitter.com/camrobjones/status/1790766472458903926?t=JC3LXH3WnFXNX79DrVisGQ"
  },
  {
    "objectID": "notes/154/index.html#notes",
    "href": "notes/154/index.html#notes",
    "title": "Reading Note – People Cannot Distinguish GPT-4 from a Human in a Turing Test (2024)",
    "section": "Notes",
    "text": "Notes\n\nStudy Overview\nThe research assesses ELIZA, GPT-3.5, and GPT-4 in a randomized, controlled Turing test. Participants engaged in 5-minute conversations and identified their interlocutors as either human or AI.\n\n\nResults\n\nGPT-4 was identified as human 54% of the time.\nELIZA was identified as human 22% of the time.\nActual humans were correctly identified 67% of the time.\n\n\n\nImplications\nThese findings highlight GPT-4’s advanced conversational abilities, though it still lags behind actual humans. The study suggests that stylistic and socio-emotional factors are crucial in passing the Turing test.\nThe figure below shows all the strategies used by participants to identify the AI:\n\n\n\nPersonal Notes\n\nI find the method used in the study somewhat unusual and have doubts about the results. It’s relatively easy to distinguish an AI from a human by applying jailbreak techniques or focusing on knowledge areas.\nA language model typically possesses extensive knowledge across various fields, allowing it to respond in multiple languages or provide code, bypassing prompt restrictions easily.\nQuerying the model on diverse subjects can reveal its vast knowledge base, which an average human wouldn’t have.\nI have trouble believing these results. The percentages could still be explained by random guessing.\nIf these findings are more robust than I think, it indicates a lack of education and practical use of these language models in the general population.\nIt always has been easy to bamboozle with “intelligence” stuff: the mechanical turk, Clever Hans, etc."
  },
  {
    "objectID": "notes/72/index.html",
    "href": "notes/72/index.html",
    "title": "Combining Multiple GitHub Repositories into a Single Repository",
    "section": "",
    "text": "Create a new empty repository on GitHub using gh. This will be the destination for all your projects.\ngh repo create combined-repo"
  },
  {
    "objectID": "notes/72/index.html#create-a-new-repository",
    "href": "notes/72/index.html#create-a-new-repository",
    "title": "Combining Multiple GitHub Repositories into a Single Repository",
    "section": "",
    "text": "Create a new empty repository on GitHub using gh. This will be the destination for all your projects.\ngh repo create combined-repo"
  },
  {
    "objectID": "notes/72/index.html#add-the-old-repositories-as-remotes",
    "href": "notes/72/index.html#add-the-old-repositories-as-remotes",
    "title": "Combining Multiple GitHub Repositories into a Single Repository",
    "section": "Add the Old Repositories as Remotes",
    "text": "Add the Old Repositories as Remotes\nAdd each of the old repositories as a remote to the new repository. You will need the URL of each repository to do this. Replace old-repo-1 with a descriptive name for each remote repository.\ngit remote add old-repo-1 https://github.com/yourusername/old-repo-1.git\ngit remote add old-repo-2 https://github.com/yourusername/old-repo-2.git"
  },
  {
    "objectID": "notes/72/index.html#merge-the-old-repositories-into-the-new-one",
    "href": "notes/72/index.html#merge-the-old-repositories-into-the-new-one",
    "title": "Combining Multiple GitHub Repositories into a Single Repository",
    "section": "Merge the Old Repositories into the New One",
    "text": "Merge the Old Repositories into the New One\nFor each old repository, create a new branch, fetch the content, and merge it into the new repository. Replace old-repo-1 with the descriptive name you used in the previous step, and new-folder-1 with the desired folder name for the projects in the new repository.\ngit switch -c old-repo-1-branch\ngit pull old-repo-1 main\ngit mv * ../new-folder-1\ngit commit -m \"Merging old-repo-1 into combined-repo\"\ngit checkout main\ngit merge old-repo-1-branch --allow-unrelated-histories\ngit commit -m \"Merged old-repo-1 into combined-repo\"\nRepeat this step for each old repository you want to merge into the new one, replacing the names accordingly."
  },
  {
    "objectID": "notes/72/index.html#clean-up-and-push-changes",
    "href": "notes/72/index.html#clean-up-and-push-changes",
    "title": "Combining Multiple GitHub Repositories into a Single Repository",
    "section": "Clean Up and Push Changes",
    "text": "Clean Up and Push Changes\nAfter merging all the old repositories, you can remove the temporary branches and push the changes to the new repository.\ngit branch -D old-repo-1-branch\ngit branch -D old-repo-2-branch\ngit remote remove old-repo-1\ngit remote remove old-repo-2\ngit push origin main"
  },
  {
    "objectID": "notes/72/index.html#update-references-and-delete-old-repositories",
    "href": "notes/72/index.html#update-references-and-delete-old-repositories",
    "title": "Combining Multiple GitHub Repositories into a Single Repository",
    "section": "Update References and Delete Old Repositories",
    "text": "Update References and Delete Old Repositories\nIf you have any references to the old repositories in other projects or scripts, update them to point to the new repository. Once you are sure you have successfully merged all the content and updated any references, you can delete the old repositories on GitHub using gh.\ngh repo delete yourusername/old-repo-1 --confirm\ngh repo delete yourusername/old-repo-2 --confirm"
  },
  {
    "objectID": "notes/72/index.html#related-notes",
    "href": "notes/72/index.html#related-notes",
    "title": "Combining Multiple GitHub Repositories into a Single Repository",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#91\nNote#125"
  },
  {
    "objectID": "notes/120/index.html",
    "href": "notes/120/index.html",
    "title": "A Quick Guide to mktemp in Bash",
    "section": "",
    "text": "The mktemp command creates a temporary file or directory safely, ensuring that the file name is unique to avoid any conflicts."
  },
  {
    "objectID": "notes/120/index.html#overview",
    "href": "notes/120/index.html#overview",
    "title": "A Quick Guide to mktemp in Bash",
    "section": "",
    "text": "The mktemp command creates a temporary file or directory safely, ensuring that the file name is unique to avoid any conflicts."
  },
  {
    "objectID": "notes/120/index.html#syntax",
    "href": "notes/120/index.html#syntax",
    "title": "A Quick Guide to mktemp in Bash",
    "section": "Syntax",
    "text": "Syntax\n\nBasic usage for creating a temporary file: mktemp\nFor creating a temporary directory: mktemp -d"
  },
  {
    "objectID": "notes/120/index.html#options",
    "href": "notes/120/index.html#options",
    "title": "A Quick Guide to mktemp in Bash",
    "section": "Options",
    "text": "Options\n\n-d: Create a directory instead of a file\n-t [template]: Use a custom template for the filename"
  },
  {
    "objectID": "notes/120/index.html#use-case-temporary-file-for-script-logging",
    "href": "notes/120/index.html#use-case-temporary-file-for-script-logging",
    "title": "A Quick Guide to mktemp in Bash",
    "section": "Use Case: Temporary File for Script Logging",
    "text": "Use Case: Temporary File for Script Logging\nHere’s a simple Bash script example that uses mktemp to create a temporary log file. The script writes some output to this log file and then prints the contents.\n#!/bin/bash\n\n# Create a temporary file with a custom template\ntemp_log=$(mktemp -t mytemp_XXX)\n\n# Perform some operations and redirect output to the temporary log file\necho \"This is a test log entry\" &gt; \"$temp_log\"\n\n# Display the log\necho \"Temporary log created: $temp_log\"\ncat \"$temp_log\"\n\n# Clean up\nrm \"$temp_log\""
  },
  {
    "objectID": "notes/27/index.html",
    "href": "notes/27/index.html",
    "title": "How to increase the max upload file size for a PHP web server",
    "section": "",
    "text": "Modify /etc/php/X.X/fpm/php.ini according to your needs:\nupload_max_filesize = 15MB\npost_max_size = 25MB\npost_max_size has to be \\geq than upload_max_filesize, for the former is the maximum size for all POST body data."
  },
  {
    "objectID": "notes/89/index.html",
    "href": "notes/89/index.html",
    "title": "The XOR Operator and Its Applications to Programming",
    "section": "",
    "text": "In computer science, the XOR (exclusive or) operator is a fundamental binary operation that operates on two boolean inputs. It returns true (or 1) if the number of true inputs is odd and false (or 0) if the number of true inputs is even. Put simply, it gives you a true result if, and only if, just one of your inputs is true.\nIf we have two binary inputs A and B, the XOR operation is represented as A XOR B, and its truth table is as follows:\n\n\n\nA\nB\nA XOR B\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n0"
  },
  {
    "objectID": "notes/89/index.html#introduction-to-xor-operator",
    "href": "notes/89/index.html#introduction-to-xor-operator",
    "title": "The XOR Operator and Its Applications to Programming",
    "section": "",
    "text": "In computer science, the XOR (exclusive or) operator is a fundamental binary operation that operates on two boolean inputs. It returns true (or 1) if the number of true inputs is odd and false (or 0) if the number of true inputs is even. Put simply, it gives you a true result if, and only if, just one of your inputs is true.\nIf we have two binary inputs A and B, the XOR operation is represented as A XOR B, and its truth table is as follows:\n\n\n\nA\nB\nA XOR B\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n0"
  },
  {
    "objectID": "notes/89/index.html#xor-properties",
    "href": "notes/89/index.html#xor-properties",
    "title": "The XOR Operator and Its Applications to Programming",
    "section": "XOR Properties",
    "text": "XOR Properties\nThe XOR operator possesses certain properties which can be harnessed for problem-solving in programming:\n\n1) Commutative\nA XOR B = B XOR A\nThe order of the operands does not affect the result. For instance, if A=1 and B=0, then A XOR B = 1 and B XOR A = 1.\n\n\n2) Associative\n(A XOR B) XOR C = A XOR (B XOR C)\nGrouping of the operands does not affect the result. If A = 1, B = 0, and C = 1, then both (A XOR B) XOR C and A XOR (B XOR C) give 0.\n\n\n3) Identity\nA XOR 0 = A\nXORing any number with 0 results in the original number. For instance, 1 XOR 0 = 1.\n\n\n4) Self-Inverse\nA XOR A = 0\nXORing any number with itself gives 0. For instance, 1 XOR 1 = 0.\n\n\n5) Inverse\nA XOR B XOR B = A\nIf a number A is XORed with B twice, the original number A is returned.\nFor instance, if A = 5 (in binary 101) and B = 3 (in binary 011), then A XOR B XOR B results in (5 XOR 3) XOR 3 = 6 XOR 3 = 5, which gives us back A."
  },
  {
    "objectID": "notes/89/index.html#xor-in-programming-languages",
    "href": "notes/89/index.html#xor-in-programming-languages",
    "title": "The XOR Operator and Its Applications to Programming",
    "section": "XOR in Programming Languages",
    "text": "XOR in Programming Languages\nIn many popular programming languages, the XOR operation is represented using the ^ symbol.\n\nPython: A ^ B\nC++/Java: A ^ B\nJavaScript: A ^ B"
  },
  {
    "objectID": "notes/89/index.html#xor-applications-in-programming-problem-solving",
    "href": "notes/89/index.html#xor-applications-in-programming-problem-solving",
    "title": "The XOR Operator and Its Applications to Programming",
    "section": "XOR Applications in Programming: Problem Solving",
    "text": "XOR Applications in Programming: Problem Solving\n\nProblem 1: Find the Missing Number\nWe are given an array of n - 1 integers which are in the range between 1 and n. All numbers appear exactly once, except one number, which is missing. Our task is to find this missing number.\nThe problem can be solved by exploiting the XOR properties.\n\nAlgorithm\n\nInitialize two variables X1 and X2 to 0.\nLoop through all the numbers from 1 to n. For each number i, XOR it with X1. By the end of the loop, X1 will hold the XOR of all numbers from 1 to n.\nLoop through the array. For each element num, XOR it with X2. By the end of the loop, X2 will hold the XOR of all elements in the array.\nXOR X1 with X2. The result is the missing number.\n\ndef find_missing_number(arr, n):\n    X1, X2 = 0, 0\n\n    # XOR all the numbers from 1 to n\n    for i in range(1, n+1):\n        X1 = X1 ^ i\n\n    # XOR all the elements in the array\n    for num in arr:\n        X2 = X2 ^ num\n\n    # The missing number is X1 XOR X2\n    return X1 ^ X2\n\n\n\nProblem 2: Find the Unique Number\nA more generalized problem where all elements in an array appear twice except one, and our task is to find that unique element.\nThis problem can be solved by using the property A XOR A = 0 and A XOR 0 = A.\n\nAlgorithm\n\nInitialize a variable unique as 0.\nLoop through the array and XOR each element with unique.\nBy the end of the loop, unique will hold the unique number.\n\ndef find_unique_number(arr):\n    unique = 0\n\n    # XOR all the elements in the array\n    for num in arr:\n        unique = unique ^ num\n\n    # The result will be the unique number\n    return unique"
  },
  {
    "objectID": "notes/89/index.html#interesting-but-useless-trick-swapping-variables",
    "href": "notes/89/index.html#interesting-but-useless-trick-swapping-variables",
    "title": "The XOR Operator and Its Applications to Programming",
    "section": "Interesting (but Useless) Trick: Swapping Variables",
    "text": "Interesting (but Useless) Trick: Swapping Variables\nThe XOR swap trick is more of a neat parlor trick than anything else. In modern high-level languages and with today’s compiler optimizations, there’s generally no reason to use XOR swap instead of traditional swapping with a temporary variable (or with the pythonic a, b = b, a). However, it’s a good demonstration of how XOR works and how you can take advantage of its unique properties.\nConventionally, if we wanted to swap the values of two variables, we would need a temporary variable to hold the value of one variable during the operation. For example:\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n    return a, b\nHowever, the XOR operator allows us to swap values without the need for a temporary variable.\n\nAlgorithm\n\nLet a and b be the two numbers to be swapped.\nExecute a = a XOR b.\nExecute b = a XOR b (since a is now a XOR b, this is equivalent to b = (a XOR b) XOR b, which simplifies to b = a according to the inverse property).\nFinally, execute a = a XOR b (at this stage b is already a, so this is equivalent to a = (a XOR b) XOR a, which simplifies to a = b).\n\ndef swap_without_temp(a, b):\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b"
  },
  {
    "objectID": "notes/53/index.html",
    "href": "notes/53/index.html",
    "title": "Difference between su and su -",
    "section": "",
    "text": "su and su - are Unix commands used to switch the user account in a terminal session. The key differences are:\n\nsu\n\nSwitches to the specified user account without changing the environment variables or the current working directory.\nMaintains the environment variables of the user who executed the command.\nDefaults to the root user if no username is provided.\nSyntax: su [username]\n\n\n\nsu -\n\nSwitches to the specified user account and simulates a full login by loading the target user’s environment variables.\nDefaults to the root user if no username is provided.\nSyntax: su - [username]\n\nBoth commands require the password of the target user (root, if no username is provided) to complete the switch."
  },
  {
    "objectID": "notes/114/index.html",
    "href": "notes/114/index.html",
    "title": "Strong vs. Weak Typing",
    "section": "",
    "text": "The concepts of strong and weak typing lack universally accepted definitions, leading to diverse interpretations. A common misunderstanding is to associate the type declarations with strong typing. This is despite the fact that compilers in languages like Go or Rust can infer types, thus not requiring explicity declarations by the programmer, which contradicts the initial association. And optional type annotations are often mistakenly linked with weak typing. Moreover, type declarations are sometimes incorrectly associated with static typing, and type annotations with dynamic typing.\nIt goes beyond that, but static typing involves type checking at compile-time, whereas dynamic typing involves type checking at runtime.\nRegarding the spectrum of strong and weak typing, I tend to define it based on how rigidly a language adheres to type constraints during operations."
  },
  {
    "objectID": "notes/114/index.html#strongly-typed-languages",
    "href": "notes/114/index.html#strongly-typed-languages",
    "title": "Strong vs. Weak Typing",
    "section": "Strongly Typed Languages",
    "text": "Strongly Typed Languages\nIn strongly typed languages, a variable, once declared with a specific data type, cannot be assumed to be another type without an explicit conversion.\nOperations between incompatible types are usually disallowed without an explicit conversion.\n\nExample in Python\nnumber = 17\nletter = \"A\"\ncombined = number + letter  # Raises TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\nExample in Go\nvar number int = 17\nvar letter string = \"A\"\n// combined := number + letter  // This would result in a compile-time error."
  },
  {
    "objectID": "notes/114/index.html#weakly-typed-languages",
    "href": "notes/114/index.html#weakly-typed-languages",
    "title": "Strong vs. Weak Typing",
    "section": "Weakly Typed Languages",
    "text": "Weakly Typed Languages\nWeakly typed languages allow variables to be used as though they were of different types with no explicit conversion.\nThe language tries to deduce the operation contextually, which can lead to unpredictable results.\n\nExample in C\nint number = 17;\nchar letter = 'A';  // ASCII value of 'A' is 65.\nint combined = number + letter;  // combined will be 82.\n\n\nExample in JavaScript\nlet number = 17\nlet letter = \"A\"\nlet combined = number + letter  // combined will be the string \"17A\"."
  },
  {
    "objectID": "notes/114/index.html#references",
    "href": "notes/114/index.html#references",
    "title": "Strong vs. Weak Typing",
    "section": "References",
    "text": "References\n\nWhat to know before debating type systems"
  },
  {
    "objectID": "notes/114/index.html#related-notes",
    "href": "notes/114/index.html#related-notes",
    "title": "Strong vs. Weak Typing",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#13"
  },
  {
    "objectID": "notes/158/index.html",
    "href": "notes/158/index.html",
    "title": "Create a “Featured” Column in Quarto Listings",
    "section": "",
    "text": "I use Quarto to generate my website, which includes my notes.\nFor the listing of my notes, I wanted a way to feature certain notes. To do that, I created a custom key-value pair in the YAML header of the note that I named spotlight, and I set the value to a star emoji ⭐:\n---\ntitle: \"The `hosts` File as a Self-Care Hack to Block Distractions\"\nsubtitle: \"Note#156\"\nid: \"156\"\ndate: 2024-06-01\ndate-modified: \"\"\ndate-format: iso\ncategories: [notes]\nspotlight: \"⭐\"\n---\nThen, in the YAML header of the listing page, I set the fields key to include the custom key-value pair, and I hide it with a non-breaking space character:\ntitle: \"Notes\"\nlisting:\n    ...\n    fields: [id, title, spotlight, date]\n    field-display-names:\n        spotlight: \"&nbsp;\"\nSee how it renders:"
  },
  {
    "objectID": "notes/5/index.html",
    "href": "notes/5/index.html",
    "title": "C++ is not a superset of C",
    "section": "",
    "text": "If you’re not familiar with both languages, you might have heard people say that C++ is a superset of C. If you’re experienced in both languages, you’ll know that this is not true at all.\nOf course, C++ has many features that C does not; but there are also a few features that only C has. And, perhaps most importantly, there is code that compiles in both languages but does different things.\nHannah McLaughlin (source below)\n\nhttps://mcla.ug/blog/cpp-is-not-a-superset-of-c.html"
  },
  {
    "objectID": "notes/125/index.html",
    "href": "notes/125/index.html",
    "title": "Using Git Interactive Rebase to Edit Commit Contents",
    "section": "",
    "text": "Edit the contents of a past Git commit while preserving subsequent commits."
  },
  {
    "objectID": "notes/125/index.html#steps",
    "href": "notes/125/index.html#steps",
    "title": "Using Git Interactive Rebase to Edit Commit Contents",
    "section": "Steps",
    "text": "Steps\n\nStart the rebase from the parent of the commit you want to edit:\n\ngit log  # Find the commit hash\ngit rebase -i &lt;commit_hash&gt;^\n\nIn the editor, change pick to edit for your commit:\n\npick abc1234 Earlier commit\nedit def5678 The commit to modify\npick ghi9012 Later commit\n\nMake your changes:\n\n# Edit your files\ngit add -u # Or whatever you need to do\ngit commit --amend\n\nFinish the rebase:\n\ngit rebase --continue\ngit push --force-with-lease  # If needed"
  },
  {
    "objectID": "notes/125/index.html#recovery",
    "href": "notes/125/index.html#recovery",
    "title": "Using Git Interactive Rebase to Edit Commit Contents",
    "section": "Recovery",
    "text": "Recovery\nIf anything goes wrong:\ngit reflog  # Find the state before rebase\ngit reset --hard HEAD@{n}  # n is the number from reflog\nBut be aware that this will lose any changes you made during the rebase."
  },
  {
    "objectID": "notes/125/index.html#related-notes",
    "href": "notes/125/index.html#related-notes",
    "title": "Using Git Interactive Rebase to Edit Commit Contents",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#72\nNote#91"
  },
  {
    "objectID": "notes/32/index.html",
    "href": "notes/32/index.html",
    "title": "Use the casefold() method in Python when doing case-insensitive stuff",
    "section": "",
    "text": "print(\"ß\".casefold())\n&gt;&gt;&gt; ss\n\nFrom the Python documentation\n\nReturn a casefolded copy of the string. Casefolded strings may be used for caseless matching.\nCasefolding is similar to lowercasing but more aggressive because it is intended to remove all case distinctions in a string. For example, the German lowercase letter ‘ß’ is equivalent to “ss”. Since it is already lowercase, lower() would do nothing to ‘ß’; casefold() converts it to “ss”.\n\nIt is useful for search and sorting case-insensitive strings."
  },
  {
    "objectID": "notes/84/index.html",
    "href": "notes/84/index.html",
    "title": "Difference between set and setx in a Windows shell",
    "section": "",
    "text": "Environment variables in Windows can be managed using two commands, set and setx. However, they differ in behavior and scope of effect."
  },
  {
    "objectID": "notes/84/index.html#set",
    "href": "notes/84/index.html#set",
    "title": "Difference between set and setx in a Windows shell",
    "section": "set",
    "text": "set\nThis command sets the environment variable for the current command prompt session only. The changes are temporary and get lost when you close the command prompt. This command is useful when you need to temporarily set an environment variable for the duration of your command prompt session.\n\nUsage\nset VariableName=Value"
  },
  {
    "objectID": "notes/84/index.html#setx",
    "href": "notes/84/index.html#setx",
    "title": "Difference between set and setx in a Windows shell",
    "section": "setx",
    "text": "setx\nThis command sets the environment variable permanently. The changes are saved and affect future command prompt sessions. However, it does not affect the current session. This command is useful when you need to permanently set an environment variable.\n\nUsage\nsetx VariableName \"Value\"\nAn important distinction is that setx does not affect the current command prompt session, but it affects all future sessions. In contrast, set affects the current session but does not affect future sessions.\nFurthermore, setx stores values in the Windows Registry, making the change permanent and global, meaning the variable will be accessible to all users and all processes. In contrast, set only changes the environment of the current command process.\nAlso note that setx has a limitation of 1024 characters for the maximum variable length. set has no such limitation."
  },
  {
    "objectID": "notes/181/index.html",
    "href": "notes/181/index.html",
    "title": "Use getpass to Get Passwords in Small Python Scripts",
    "section": "",
    "text": "For a small Python script, that is when you don’t use click for instance, you should use the getpass module to get passwords as it hides the password while typing."
  },
  {
    "objectID": "notes/181/index.html#references",
    "href": "notes/181/index.html#references",
    "title": "Use getpass to Get Passwords in Small Python Scripts",
    "section": "References",
    "text": "References\n\ngetpass — Portable password input"
  },
  {
    "objectID": "notes/97/index.html",
    "href": "notes/97/index.html",
    "title": "Seam Carving Algorithm",
    "section": "",
    "text": "The Seam Carving algorithm, also known as content-aware resizing or retargeting, is an innovative image resizing technique that strives to maintain the perceptually important parts of an image, focusing on preserving the core visual content when resizing."
  },
  {
    "objectID": "notes/97/index.html#historical-context",
    "href": "notes/97/index.html#historical-context",
    "title": "Seam Carving Algorithm",
    "section": "Historical Context",
    "text": "Historical Context\nThe concept of seam carving was introduced in 2007 by researchers Shai Avidan and Ariel Shamir. The technique offered a novel approach to image resizing, focusing on the preservation of content, which was a noticeable improvement over traditional methods like scaling and cropping. Over the years, the algorithm has been refined and is commonly used in applications requiring sophisticated image resizing."
  },
  {
    "objectID": "notes/97/index.html#the-algorithm",
    "href": "notes/97/index.html#the-algorithm",
    "title": "Seam Carving Algorithm",
    "section": "The Algorithm",
    "text": "The Algorithm\n\nGreyscale Conversion\nThe algorithm starts by converting the original color image into greyscale. The greyscale value v of a pixel is calculated using the formula v = round(.299*r + .587*g + .114*b), where r, g, and b represent the red, green, and blue values of the pixel respectively.\n\n\nEnergy Map Calculation\nAn ‘energy map’ of the greyscale image is computed. This map uses an edge detection function to represent the “energy” or significance of each pixel.\n\n\nCumulative Energy Map Computation\nThe algorithm computes a cumulative energy map after creating the energy map. The cumulative energy map is a matrix of the same dimensions as the image where the value at each pixel is not just the energy of that pixel, but the total energy of the lowest-energy path from the top of the image to that pixel.\nTo calculate this, the algorithm starts with the top row of the image, where the cumulative energy is the same as the original energy from the energy map. For each subsequent row, the algorithm finds the cumulative energy for each pixel by adding its own energy value (from the energy map) to the minimum cumulative energy of the pixels directly above it in the previous row. The pixels considered are directly above, or one pixel to the right or to the left of the current pixel in the row above. This process is repeated for each pixel and for each row, down to the bottom of the image.\n\n\nMinimum-Energy Seam Identification\nThe process of identifying the minimum-energy seam begins once the cumulative energy map is complete. This seam is a connected path of pixels from the top to the bottom of the image that has the lowest total energy.\nTo identify this seam, the algorithm starts at the bottom row of the cumulative energy map and locates the pixel with the smallest cumulative energy. This pixel is the start of the minimum-energy seam. The algorithm then traces the seam back up to the top of the image. At each step, the algorithm moves to the pixel in the row above that has the smallest cumulative energy and is adjacent to the current pixel. The adjacent pixels considered are directly above, or one pixel to the right or to the left of the current pixel.\nThis process creates a path from the bottom of the image to the top, representing the seam of least cumulative energy. This seam is then used in the final step of the algorithm: seam removal.\n\n\nSeam Removal\nThe identified seam is then removed from the original color image, effectively reducing the image’s width by one pixel. This process is repeated until the image is resized to the desired size."
  },
  {
    "objectID": "notes/97/index.html#advantages-and-disadvantages",
    "href": "notes/97/index.html#advantages-and-disadvantages",
    "title": "Seam Carving Algorithm",
    "section": "Advantages and Disadvantages",
    "text": "Advantages and Disadvantages\n\nAdvantage\nThe Seam Carving algorithm excels in preserving the visual content of an image during resizing. It selectively removes less important portions of the image, ensuring that the core visual content remains intact, a significant improvement over traditional resizing methods.\n\n\nDisadvantage\nThe algorithm might struggle with images that have a lot of high-energy content, or when important details are evenly distributed across the image. In such cases, important content might be removed, leading to a loss in image quality."
  },
  {
    "objectID": "notes/97/index.html#references",
    "href": "notes/97/index.html#references",
    "title": "Seam Carving Algorithm",
    "section": "References",
    "text": "References\n\nImage Processing, Part 2 | 6.101 Spring 2023 (py.mit.edu)\nSeam carving. (n.d.). In Wikipedia. https://en.wikipedia.org/wiki/Seam_carving\nAvidan, S., & Shamir, A. (2007). Seam Carving for Content-Aware Image Resizing. ACM Transactions on Graphics, 26(3), Article 10. https://doi.org/10.1145/1275808.1276390"
  },
  {
    "objectID": "notes/189/index.html",
    "href": "notes/189/index.html",
    "title": "Remap Win + e to File Pilot",
    "section": "",
    "text": "I’ve been using File Pilot for a few months now, and I recommend every Windows user to try it out.\nBelow is my AutoHotkey Win + e remap to get rid of the default File Explorer:\nDon’t forget to replace &lt;path_to_your_File_Pilot_exe&gt; with your actual path.\nIf you don’t already have an AutoHotkey script running from startup, just create a .ahk file with the code above and place it in your startup folder – accessed by pressing Win + r and typing shell:startup."
  },
  {
    "objectID": "notes/189/index.html#related-notes",
    "href": "notes/189/index.html#related-notes",
    "title": "Remap Win + e to File Pilot",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#47\nNote#87"
  },
  {
    "objectID": "notes/189/index.html#references",
    "href": "notes/189/index.html#references",
    "title": "Remap Win + e to File Pilot",
    "section": "References",
    "text": "References\n\nGet File Pilot"
  },
  {
    "objectID": "notes/119/index.html",
    "href": "notes/119/index.html",
    "title": "Extracting Largest and Smallest Items from a Collection in Python",
    "section": "",
    "text": "This Python snippet presents methods to retrieve the largest and smallest items from an iterable using built-in functions and the heapq module."
  },
  {
    "objectID": "notes/119/index.html#example",
    "href": "notes/119/index.html#example",
    "title": "Extracting Largest and Smallest Items from a Collection in Python",
    "section": "Example",
    "text": "Example\n\"\"\"Getting the largest and smallest items in an iterable.\"\"\"\nfrom heapq import nsmallest, nlargest\n\nnumbers = [50, 34, 48, 26, 37, 20, 72, 31, 71, 88]\n\nprint(\"Largest item:\", f\"{max(numbers) = }\", \"\", sep=\"\\n\")\nprint(\"Largest N items:\", f\"{nlargest(3, numbers) = }\", \"\", sep=\"\\n\")\nprint(\"All items, largest to smallest:\", f\"{sorted(numbers, reverse=True) = }\", \"\", sep=\"\\n\")\n\nprint(\"Smallest item:\", f\"{min(numbers) = }\", \"\", sep=\"\\n\")\nprint(\"Smallest N items:\", f\"{nsmallest(3, numbers) = }\", \"\", sep=\"\\n\")\nprint(\"All items, smallest to largest:\", f\"{sorted(numbers) = }\", \"\", sep=\"\\n\")\n\nOutput\nLargest item:\nmax(numbers) = 88\n\nLargest N items:\nnlargest(3, numbers) = [88, 72, 71]\n\nAll items, largest to smallest:\nsorted(numbers, reverse=True) = [88, 72, 71, 50, 48, 37, 34, 31, 26, 20]\n\nSmallest item:\nmin(numbers) = 20\n\nSmallest N items:\nnsmallest(3, numbers) = [20, 26, 31]\n\nAll items, smallest to largest:\nsorted(numbers) = [20, 26, 31, 34, 37, 48, 50, 71, 72, 88]"
  },
  {
    "objectID": "notes/119/index.html#references",
    "href": "notes/119/index.html#references",
    "title": "Extracting Largest and Smallest Items from a Collection in Python",
    "section": "References",
    "text": "References\n\nPython Morsels"
  },
  {
    "objectID": "notes/133/index.html",
    "href": "notes/133/index.html",
    "title": "A Better Library for Logging in Python: Eliot",
    "section": "",
    "text": "Python’s built-in logging and other similar systems output a stream of factoids: they’re interesting, but you can’t really tell what’s going on.\nWhy is your application slow? What caused this code path to be chosen? Why did this error happen? Standard logging can’t answer these questions.\nBut with a better model you could understand what and why things happened in your application. You could pinpoint performance bottlenecks, you could understand what happened when, who called what.\nThat is what Eliot does. eliot is a Python logging system that outputs causal chains of actions: actions can spawn other actions, and eventually they either succeed or fail. The resulting logs tell you the story of what your software did: what happened, and what caused it."
  },
  {
    "objectID": "notes/133/index.html#references",
    "href": "notes/133/index.html#references",
    "title": "A Better Library for Logging in Python: Eliot",
    "section": "References",
    "text": "References\n\nLogging for scientific computing: debugging, performance, trust\nEliot Documentation"
  },
  {
    "objectID": "notes/133/index.html#related-notes",
    "href": "notes/133/index.html#related-notes",
    "title": "A Better Library for Logging in Python: Eliot",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#107"
  },
  {
    "objectID": "notes/75/index.html",
    "href": "notes/75/index.html",
    "title": "Don’t use time.time()",
    "section": "",
    "text": "When measuring time intervals in a Python program, it is recommended to avoid using time.time() and choose time.monotonic() or time.monotonic_ns() instead."
  },
  {
    "objectID": "notes/75/index.html#problems-with-time.time",
    "href": "notes/75/index.html#problems-with-time.time",
    "title": "Don’t use time.time()",
    "section": "Problems with time.time()",
    "text": "Problems with time.time()\n\nReturns the current time in seconds since the epoch (usually January 1, 1970, 00:00:00 UTC).\nCommonly used to measure the time elapsed between two points in a program.\nNot immune to system clock adjustments, like Daylight Saving Time changes or manual clock updates."
  },
  {
    "objectID": "notes/75/index.html#benefits-of-time.monotonic-and-time.monotonic_ns",
    "href": "notes/75/index.html#benefits-of-time.monotonic-and-time.monotonic_ns",
    "title": "Don’t use time.time()",
    "section": "Benefits of time.monotonic() and time.monotonic_ns()",
    "text": "Benefits of time.monotonic() and time.monotonic_ns()\n\ntime.monotonic()\n\nReturns a monotonic clock value, which is a clock that always increases.\nNot affected by system clock adjustments.\nUseful for measuring the time elapsed between two points in a program when you need a clock that won’t be influenced by external factors.\nThe returned value is not an absolute timestamp, and its meaning is specific to the program it’s used in.\n\n\n\ntime.monotonic_ns()\n\nSimilar to time.monotonic(), but it returns the value in nanoseconds.\nProvides higher resolution for time measurements.\nUseful for measuring small time intervals with high accuracy.\n\nWhen working with very small time intervals or requiring high-precision measurements, consider using time.monotonic_ns() instead of time.monotonic() to avoid the precision loss caused by the float type"
  },
  {
    "objectID": "notes/75/index.html#example-reformatting-time.monotonic_ns-output-for-human-readability",
    "href": "notes/75/index.html#example-reformatting-time.monotonic_ns-output-for-human-readability",
    "title": "Don’t use time.time()",
    "section": "Example: Reformatting time.monotonic_ns() output for human readability",
    "text": "Example: Reformatting time.monotonic_ns() output for human readability\nYou can easily convert the output of time.monotonic_ns() to seconds for better readability:\nimport time\n\nstart_ns = time.monotonic_ns()\n# Your code here\nend_ns = time.monotonic_ns()\n\nelapsed_seconds = (end_ns - start_ns) / 1e9\nprint(f\"Elapsed time: {elapsed_seconds:.5f} seconds\")\nBy using time.monotonic() or time.monotonic_ns() instead of time.time(), you can avoid potential inaccuracies due to system clock adjustments and achieve more reliable time measurements."
  },
  {
    "objectID": "notes/31/index.html",
    "href": "notes/31/index.html",
    "title": "How to disable cursor blinking in a Linux shell",
    "section": "",
    "text": "echo \"\\e[2 q\""
  },
  {
    "objectID": "notes/51/index.html",
    "href": "notes/51/index.html",
    "title": "Open a file from a path in Vim",
    "section": "",
    "text": "Put your cursor on the path and press gf.\nTo quickly open the last file that was edited in Vim, you can use the :e# command. This is useful when you want to switch back to the file you were previously editing without having to retype its full path.\nNote that the :e# command only re-opens the last buffer that was edited in the current window.\nTo navigate through buffers, you cal also use :bn or :bnext, and :bp or :bprev."
  },
  {
    "objectID": "notes/51/index.html#related-notes",
    "href": "notes/51/index.html#related-notes",
    "title": "Open a file from a path in Vim",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#65"
  },
  {
    "objectID": "notes/99/index.html",
    "href": "notes/99/index.html",
    "title": "Using xclip for Clipboard Operations in WSL and VMs Running on Windows",
    "section": "",
    "text": "xclip -selection clipboard\nThis works in Windows…!\nIt feels a bit surprising, almost embarrassing, that I only found this solution now despite its apparent simplicity. I always thought this wasn’t possible with the Windows Terminal, whether I run WSL or a VM."
  },
  {
    "objectID": "notes/99/index.html#findings",
    "href": "notes/99/index.html#findings",
    "title": "Using xclip for Clipboard Operations in WSL and VMs Running on Windows",
    "section": "Findings",
    "text": "Findings\n\nIn a WSL environment, the native Windows command clip.exe can be used to copy to the Windows clipboard. For example: cat file.txt | clip.exe.\nInterestingly, I discovered that xclip can function within WSL without the need for an external X server. This is likely due to improvements in WSLg, which provides better support for graphical applications and features such as the clipboard.\nIt also worked for a VM running with Hyper-V, to which I connected through SSH with X11 forwardig (ssh -X)."
  },
  {
    "objectID": "notes/99/index.html#using-xclip",
    "href": "notes/99/index.html#using-xclip",
    "title": "Using xclip for Clipboard Operations in WSL and VMs Running on Windows",
    "section": "Using xclip",
    "text": "Using xclip\nThe -selection option in xclip specifies which X selection to use: primary, secondary, or clipboard. The clipboard selection is used for explicit copy and paste operations, behaving similarly to the clipboard in non-X environments.\nExample of copying the content of a file to the clipboard using xclip:\ncat file.txt | xclip -selection clipboard\nExecuting the above command copies the content of file.txt to the Windows clipboard when run in WSL, allowing the text to be pasted in other Windows applications.\n\nAn Alias for Less Typing\nThis seems like a reasonable idea.\nalias xclip='xclip -selection clipboard'"
  },
  {
    "objectID": "notes/99/index.html#related-notes",
    "href": "notes/99/index.html#related-notes",
    "title": "Using xclip for Clipboard Operations in WSL and VMs Running on Windows",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#101\nNote#47"
  },
  {
    "objectID": "notes/144/index.html",
    "href": "notes/144/index.html",
    "title": "Use ddof=1 for Sample Dispersion Measures with NumPy",
    "section": "",
    "text": "By default, np.var() and np.std() calculate the population (biased) variance and standard deviation, whereas statistics.variance() and statistics.stdev() calculate the sample (unbiased) variance and standard deviation by default.\nHowever, you can calculate the unbiased variance and standard deviation with NumPy by setting the ddof parameter to 1.\nimport numpy as np\nimport statistics\n\n# Using NumPy\npopulation_variance = np.var(data)\nsample_variance = np.var(data, ddof=1)\n\n# Using statistics\nsample_variance = statistics.variance(data)\nsample_standard_deviation = statistics.stdev(data)"
  },
  {
    "objectID": "notes/62/index.html",
    "href": "notes/62/index.html",
    "title": "Enhancing Variable Renaming in Vim",
    "section": "",
    "text": "Move your cursor over the variable you want to rename.\nPress gd to go to the local declaration of the variable.\nPress cgn to change the text covered by the last search (the variable name, in this case).\nType the new name and press &lt;Esc&gt; to return to normal mode.\nPress . to repeat the rename operation for the next occurrence of the variable. If you want to rename all occurrences in the buffer at once, you can use :%normal .."
  },
  {
    "objectID": "notes/62/index.html#jedi-vims-renaming",
    "href": "notes/62/index.html#jedi-vims-renaming",
    "title": "Enhancing Variable Renaming in Vim",
    "section": "Jedi-Vim’s Renaming",
    "text": "Jedi-Vim’s Renaming\nWhile your cursor is on a name: &lt;leader&gt;r (In case of using Jedi-Vim plugin for Python). Also, it does it across multiple files—project wide."
  },
  {
    "objectID": "notes/62/index.html#related-notes",
    "href": "notes/62/index.html#related-notes",
    "title": "Enhancing Variable Renaming in Vim",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#69\nNote#102"
  },
  {
    "objectID": "notes/185/index.html",
    "href": "notes/185/index.html",
    "title": "Comics are Comics",
    "section": "",
    "text": "Stop saying “graphic novels.” Embrace comics for what they are: art. And if that’s what you’re after, what do you think actually makes you more elitist? Recognizing comics as a legitimate art form, or adopting a marketing term used by people trying to sound refined and/or too self-conscious to admit they enjoy Naruto?"
  },
  {
    "objectID": "notes/9/index.html",
    "href": "notes/9/index.html",
    "title": "Moby Dick, extrait de la première page",
    "section": "",
    "text": "Dans la traduction d’Armel Guerne."
  },
  {
    "objectID": "notes/9/index.html#related-notes",
    "href": "notes/9/index.html#related-notes",
    "title": "Moby Dick, extrait de la première page",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#36\nNote#94"
  },
  {
    "objectID": "notes/117/index.html",
    "href": "notes/117/index.html",
    "title": "random.choices(list, k=n) vs random.sample(list, k=n) in Python",
    "section": "",
    "text": "Both return a list.\nDo not confuse .choices() with random.choice(list), which returns a single element from the list.\n\nrandom.choices(list, k=n) -&gt; returns a list with replacement\nrandom.sample(list, k=n) -&gt; returns a list without replacement"
  },
  {
    "objectID": "notes/52/index.html",
    "href": "notes/52/index.html",
    "title": "Enabling autocompletion for a custom script in zsh or bash",
    "section": "",
    "text": "Autocompletion is a convenient feature in both Zsh and Bash shells that can save time and reduce typing errors. If you have a custom script that you frequently use, you may want to enable autocompletion for it. Here’s how to do it in both shells."
  },
  {
    "objectID": "notes/52/index.html#zsh",
    "href": "notes/52/index.html#zsh",
    "title": "Enabling autocompletion for a custom script in zsh or bash",
    "section": "Zsh",
    "text": "Zsh\n\nCreate a completion function for your script\nCreate a function that defines the possible options and arguments for your script. Save this function in a file with a name starting with an underscore, such as _myscript.\n# _myscript completion function for Zsh\n_myscript_completion() {\n    local curcontext=\"$curcontext\" state line\n    typeset -A opt_args\n\n    _arguments '1: :-&gt;command'\n\n    case $state in\n        (command)\n            local -a commands=(\"option1\" \"option2\" \"option3\")\n            _describe -t commands 'myscript command' commands && ret=0\n            ;;\n    esac\n}\n\ncompdef _myscript_completion myscript\n\n\nSave the completion function file in a directory in the FPATH variable\nSave the _myscript file in a directory where Zsh will look for autoloaded functions. One such directory is /usr/share/zsh/site-functions. Alternatively, you can create a new directory and add it to the FPATH variable in your .zshrc file.\n# Add the custom directory to FPATH in .zshrc\nfpath+=/path/to/custom/dir\n\n\nSource the completion function file\nIf it doesn’t work for obscure reasons, you can just source your completion _myscript.\n# Source the completion function file\nsource /path/to/_myscript\nNow you should be able to use autocompletion for your custom script in Zsh. Type myscript followed by a space, and then press the Tab key to see the available options and arguments.\n\nThis is a hack\nBecause I encountered a persistent problem with autocompletion and didn’t want to keep editing my .zshrc file for every new script, I added the following lines to it:\nfor script in ~/.completion_scripts/_*; do\n  script_name=${script:t}\n  source ~/.completion_scripts/$script_name\ndone"
  },
  {
    "objectID": "notes/52/index.html#bash",
    "href": "notes/52/index.html#bash",
    "title": "Enabling autocompletion for a custom script in zsh or bash",
    "section": "Bash",
    "text": "Bash\n\nCreate a completion script for your script\nCreate a script that defines the possible options and arguments for your script. Save this script in a file with a name starting with an underscore, such as _myscript.\n# _myscript completion script for Bash\n_myscript_completion() {\n    local cur prev opts\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n\n    case \"${prev}\" in\n        myscript)\n            opts=\"option1 option2 option3\"\n            COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) )\n            return 0\n            ;;\n        *)\n            ;;\n    esac\n}\n\ncomplete -F _myscript_completion myscript\n\n\nSave the completion script file in a directory in the PATH variable\nSave the _myscript file in a directory where Bash will look for executables. One such directory is /usr/local/bin. Alternatively, you can create a new directory and add it to the PATH variable in your .bashrc file.\n# Add the custom directory to PATH in .bashrc\nexport PATH=$PATH:/path/to/custom/dir\n\n\nSource the Bash completion scripts\nSource the Bash completion scripts to load the autocompletion functionality in your current session.\n# Source the Bash completion scripts\nsource /usr/share/bash-completion/bash_completion\nNow you should be able to use autocompletion for your custom script in Bash. Type myscript followed by a space, and then press the Tab key to see the available options and arguments."
  },
  {
    "objectID": "notes/7/index.html",
    "href": "notes/7/index.html",
    "title": "How will machine learning impact the IT industry?",
    "section": "",
    "text": "I predict machine learning (ML) will take over the IT industry in the next five years.\nProgramming will be one of the first things in IT that will be affected by ML. We already see it happening with GitHub Copilot. I believe ML is the future of web and application development. It is only a matter of time before these domains get almost entirely automated. Everything that seems mundane in the programming world today will stop requiring code written by hand. Instead, programmers will accomplish those trivial tasks by using and training AI.\nGenerally speaking, the whole industry will shift towards either supporting ML (cybersecurity, cloud & network engineering, data science) or doing ML.\nSkills that won’t disappear (reductive take, I know):\n\noperating systems;\nnetwork engineering;\ncybersecurity;\ncomputer science;\ndatabases administration;\nsoftware engineering;\nmath;\nproblem-solving.\n\n#machine-learning #ML #artificial-intelligence #AI #web #programming #future"
  },
  {
    "objectID": "notes/130/index.html",
    "href": "notes/130/index.html",
    "title": "Vim Command for Retrieving Syntax Highlighting Information",
    "section": "",
    "text": ":echo synIDattr(synID(line(\".\"), col(\".\"), 1), \"name\")"
  },
  {
    "objectID": "notes/130/index.html#command",
    "href": "notes/130/index.html#command",
    "title": "Vim Command for Retrieving Syntax Highlighting Information",
    "section": "",
    "text": ":echo synIDattr(synID(line(\".\"), col(\".\"), 1), \"name\")"
  },
  {
    "objectID": "notes/130/index.html#description",
    "href": "notes/130/index.html#description",
    "title": "Vim Command for Retrieving Syntax Highlighting Information",
    "section": "Description",
    "text": "Description\nThis Vim command outputs the syntax highlighting group name for the character under the cursor."
  },
  {
    "objectID": "notes/130/index.html#components",
    "href": "notes/130/index.html#components",
    "title": "Vim Command for Retrieving Syntax Highlighting Information",
    "section": "Components",
    "text": "Components\n\nsynID: Gets the syntax ID for a given line and column.\nsynIDattr: Retrieves an attribute of a syntax ID, in this case, the “name”."
  },
  {
    "objectID": "notes/130/index.html#usage",
    "href": "notes/130/index.html#usage",
    "title": "Vim Command for Retrieving Syntax Highlighting Information",
    "section": "Usage",
    "text": "Usage\nRun the command in Vim’s command-line mode to identify the syntax group of the character where the cursor is currently positioned."
  },
  {
    "objectID": "notes/65/index.html",
    "href": "notes/65/index.html",
    "title": "Vim Buffers: Renaming, Switching and Opening Files",
    "section": "",
    "text": "Save the current buffer with a new name and keep it open in the current window. You can use :saveas or :w.\n\n\n\n:saveas new_filename.txt\nIt can be shortened to :sav.\n\n\n\n:w new_filename.txt\nThe main difference between :saveas and :w is that :saveas renames the current buffer and saves it with the new name, while :w saves a copy of the buffer to a new file without renaming the buffer itself.\n\nDelete the old file from within Vim using the :! command.\n:!rm old_filename.txt\nIf you have the old file still open in another buffer, switch to that buffer using the :b or :buffer command.\n:b old_filename.txt\nClose the old buffer using the :bd or :bdelete command.\n:bd"
  },
  {
    "objectID": "notes/65/index.html#renaming-the-current-buffer-in-vim",
    "href": "notes/65/index.html#renaming-the-current-buffer-in-vim",
    "title": "Vim Buffers: Renaming, Switching and Opening Files",
    "section": "",
    "text": "Save the current buffer with a new name and keep it open in the current window. You can use :saveas or :w.\n\n\n\n:saveas new_filename.txt\nIt can be shortened to :sav.\n\n\n\n:w new_filename.txt\nThe main difference between :saveas and :w is that :saveas renames the current buffer and saves it with the new name, while :w saves a copy of the buffer to a new file without renaming the buffer itself.\n\nDelete the old file from within Vim using the :! command.\n:!rm old_filename.txt\nIf you have the old file still open in another buffer, switch to that buffer using the :b or :buffer command.\n:b old_filename.txt\nClose the old buffer using the :bd or :bdelete command.\n:bd"
  },
  {
    "objectID": "notes/65/index.html#switch-between-files-in-vim-with-the-e-command",
    "href": "notes/65/index.html#switch-between-files-in-vim-with-the-e-command",
    "title": "Vim Buffers: Renaming, Switching and Opening Files",
    "section": "Switch Between Files in Vim with the :e# Command",
    "text": "Switch Between Files in Vim with the :e# Command\n\nOpen a file in Vim.\nvim file1.txt\nOpen another file using the :edit (or :e) command.\n:edit file2.txt\nSwitch back to the previous file using the :e# command.\n:e#\nSave the current file and switch to the alternate file using :w and :e# commands combined.\n:w | e#"
  },
  {
    "objectID": "notes/65/index.html#differences-between-b-and-e-commands-in-vim",
    "href": "notes/65/index.html#differences-between-b-and-e-commands-in-vim",
    "title": "Vim Buffers: Renaming, Switching and Opening Files",
    "section": "Differences Between :b and :e Commands in Vim",
    "text": "Differences Between :b and :e Commands in Vim\n\n:b (or :buffer) is used to switch between already opened buffers in Vim by providing the buffer number or a unique part of the filename.\n:e (or :edit) is used to open a file in a new buffer or reload the contents of the current file from the disk."
  },
  {
    "objectID": "notes/65/index.html#additional-tips-and-commands",
    "href": "notes/65/index.html#additional-tips-and-commands",
    "title": "Vim Buffers: Renaming, Switching and Opening Files",
    "section": "Additional Tips and Commands",
    "text": "Additional Tips and Commands\n\nSwitch Between Buffers with :bn and :bp Commands\n\nSwitch to the next buffer using the :bn or :bnext command.\n:bn\nSwitch to the previous buffer using the :bp or :bprev command.\n:bp\n\n\n\nList Open Buffers with :ls Command\nList all open buffers and their buffer numbers using the :ls or :buffers command.\n:ls\n\n\nJump to a Specific Buffer with :b Command\nJump to a specific buffer using the :b or :buffer command followed by the buffer number.\n:b &lt;buffer_number&gt;"
  },
  {
    "objectID": "notes/65/index.html#related-notes",
    "href": "notes/65/index.html#related-notes",
    "title": "Vim Buffers: Renaming, Switching and Opening Files",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#51"
  },
  {
    "objectID": "notes/43/index.html",
    "href": "notes/43/index.html",
    "title": "No more delay when pasting before the cursor in Vim",
    "section": "",
    "text": "After hours of searching, I’m relieved that I finally found the solution. I couldn’t understand why there was a delay when I pasted something before the cursor with &lt;Shift + P&gt; in Vim. What frustrated me was that even an empty .vimrc file would create a ~1 second delay, while there was no delay if I had no .vimrc file at all."
  },
  {
    "objectID": "notes/43/index.html#the-solution",
    "href": "notes/43/index.html#the-solution",
    "title": "No more delay when pasting before the cursor in Vim",
    "section": "The solution",
    "text": "The solution\nThe issue is related to the set ttimeoutlen option, which is set to -1 by default. This causes a delay of one second whenever a special key, such as &lt;Shift&gt;, is pressed. Vim uses this waiting period to see if any additional keys will be pressed to complete a mapping sequence.\nWhen there is no .vimrc file in the user’s /home folder, Vim loads the default configuration located in /usr/share/vim/vim*/default.vim (where * is the version number of Vim installed on your system). In this file, the ttimeoutlen option is set to 100 ms, which is why I didn’t encounter any delay when testing without a .vimrc file.\n\nAdd this to your .vimrc file\nset ttimeoutlen=100"
  },
  {
    "objectID": "notes/54/index.html",
    "href": "notes/54/index.html",
    "title": "How to add a user to the sudo group",
    "section": "",
    "text": "The user must exist before adding them to the sudoers.\nsudo adduser new_user\nsudo adduser new_user sudo\nFor a script, prefer the lower level tools that are useradd, groupadd, and usermod. For instance, to modify an already existing user and add them to the sudo group:\nsudo usermod -aG sudo new_user\nObviously, don’t type sudo if you run these commands as root."
  },
  {
    "objectID": "notes/54/index.html#create-a-user-and-add-them-to-the-sudo-group",
    "href": "notes/54/index.html#create-a-user-and-add-them-to-the-sudo-group",
    "title": "How to add a user to the sudo group",
    "section": "",
    "text": "The user must exist before adding them to the sudoers.\nsudo adduser new_user\nsudo adduser new_user sudo\nFor a script, prefer the lower level tools that are useradd, groupadd, and usermod. For instance, to modify an already existing user and add them to the sudo group:\nsudo usermod -aG sudo new_user\nObviously, don’t type sudo if you run these commands as root."
  },
  {
    "objectID": "notes/54/index.html#verify-group-membership",
    "href": "notes/54/index.html#verify-group-membership",
    "title": "How to add a user to the sudo group",
    "section": "Verify group membership",
    "text": "Verify group membership\ngroups"
  },
  {
    "objectID": "notes/54/index.html#remove-a-user-from-a-group",
    "href": "notes/54/index.html#remove-a-user-from-a-group",
    "title": "How to add a user to the sudo group",
    "section": "Remove a user from a group",
    "text": "Remove a user from a group\nsudo deluser username group\n\nDebian Wiki - sudo\nUbuntu Wiki - sudo"
  },
  {
    "objectID": "notes/25/index.html",
    "href": "notes/25/index.html",
    "title": "How to import/export a database in MySQL/MariaDB",
    "section": "",
    "text": "Databases are an essential part of modern applications, and there are times when you might need to move or backup your database. MySQL and MariaDB provide several ways to export and import databases."
  },
  {
    "objectID": "notes/25/index.html#cli",
    "href": "notes/25/index.html#cli",
    "title": "How to import/export a database in MySQL/MariaDB",
    "section": "CLI",
    "text": "CLI\n\nExporting a database\nTo export a database, you can use the mysql client.\nmysql -u username -p db_name &gt; file.sql\nCaveat: You can only use mysql from the CLI, so you need to use a terminal or a command prompt to run this command.\n\n\nExporting specific tables\nmysql -u username -p db_name table1 table2 &gt; file.sql\n\n\nImporting a database\nNote that the DB has to exist before you import the sql file.\nmysql -u username -p db_name &lt; backup.sql\nIf the backup file is compressed with gzip, you can use the following command to import the data:\ngunzip &lt; backup.sql.gz | mysql -u username -p db_name"
  },
  {
    "objectID": "notes/25/index.html#scripting",
    "href": "notes/25/index.html#scripting",
    "title": "How to import/export a database in MySQL/MariaDB",
    "section": "Scripting",
    "text": "Scripting\nIf you want to script the backup process, you can use mysqlpump. It was introduced in MySQL 5.7.8, so you don’t have to install anything else, but note that mysqlpump is not included in MariaDB. Instead, you can use mysqldump, which is included in both MySQL and MariaDB; however, mysqldump is not multithreaded like mysqlpump.\nmysqlpump -u username -p db_name &gt; file.sql\nmysqlpump offers several features, such as parallel compression, incremental backups, and the ability to exclude specific databases or tables.\n\nFor example, to exclude a database from the backup:\nmysqlpump -u username -p --exclude-databases=db_name1,db_name2 &gt; file.sql\n\n\nTo exclude specific tables:\nmysqlpump -u username -p --exclude-tables=db_name.table_name &gt; file.sql\n\n\nSome features of mysqlpump\n\nmysqlpump supports parallel compression, which allows it to compress backup data more efficiently.\nmysqlpump can be used to create incremental backups by using the --incremental option. This feature enables you to backup only the changes that have been made to the database since the last backup.\nmysqlpump provides better control over the backup process than mysqldump. For example, you can use the --exclude-databases and --exclude-tables options to exclude specific databases or tables from the backup.\nmysqlpump generates backup files that are compatible with mysqldump, which means that you can use mysqldump to restore a backup created with mysqlpump.\n\n\n\nManage large databases\nFor large databases (greater than 1TB), consider using the mydumper and myloader tools, which offer parallelism and other benefits for more efficient database management."
  },
  {
    "objectID": "notes/25/index.html#documentation",
    "href": "notes/25/index.html#documentation",
    "title": "How to import/export a database in MySQL/MariaDB",
    "section": "Documentation",
    "text": "Documentation\n\nmydumper & myloader documentation: https://centminmod.com/mydumper.html\nMySQL documentation on backup and recovery: https://dev.mysql.com/doc/refman/8.0/en/backup-and-recovery.html\nMariaDB knowledge base on backup and restore: https://mariadb.com/kb/en/backup-and-restore-overview/"
  },
  {
    "objectID": "notes/47/index.html",
    "href": "notes/47/index.html",
    "title": "A Very Simple Windows Management Workflow for Windows",
    "section": "",
    "text": "Having efficient keybinds can be a significant factor in performing actions quickly. Compared to having to click on an icon, being able to display a specific application / window with a keybind makes for a smooth workflow. You don’t have to search for the icon on your screen, move your mouse, and finally click on it. Here, you just press a keybind, and you’re done.\nWell you can have this in Windows without installing anything."
  },
  {
    "objectID": "notes/47/index.html#create-keybinds-for-apps-pinned-in-the-taskbar",
    "href": "notes/47/index.html#create-keybinds-for-apps-pinned-in-the-taskbar",
    "title": "A Very Simple Windows Management Workflow for Windows",
    "section": "Create keybinds for apps pinned in the taskbar",
    "text": "Create keybinds for apps pinned in the taskbar\n\nright-click on an app and pin it to the taskbar;\norganize it so that, if it’s in the first position, its assigned keybind will be 1;\ncall the app with win + n where n matches its position in your taskbar;\npress win + shift + n to create a new instance of the app (viz. in a new window, if it’s possible).\n\nDon’t put things that already have a keybind, like the File Explorer which you can access with win + e.\n\nSome of my own keybinds\n\nwin + 2 is assigned to my web browser dedicated to work;\nwin + 3 is assigned to Windows Terminal;\nwin + 4 is assigned to Discord;\nwin + 5 is assigned to the Calculator;\nwin + 9 is assigned to my other web browser;\nwin + 0 is assigned to Spotify.\n\n\n\nWeb browsers: separating work and personal use\nMy web browser dedicated to work doesn’t restore the previous session. Instead, it opens with two tabs: ChatGPT and Google. As someone who struggles to manage a healthy number of tabs (and even windows), having this setup alleviates my cognitive load. I close the browser almost after every search so that I can have a clean slate for the next one."
  },
  {
    "objectID": "notes/47/index.html#moving-your-windows",
    "href": "notes/47/index.html#moving-your-windows",
    "title": "A Very Simple Windows Management Workflow for Windows",
    "section": "Moving your windows",
    "text": "Moving your windows\n\nWindows Snap\nYou can easily move your windows by pressing win + arrow keys and win + alt + arrow keys . All of this is native to Windows, and there are also preconfigured layouts you can toggle with win + z.\nMore on this here: https://support.microsoft.com/en-us/windows/snap-your-windows-885a9b1e-a983-a3b1-16cd-c531795e6241#WindowsVersion=Windows_11"
  },
  {
    "objectID": "notes/47/index.html#going-further",
    "href": "notes/47/index.html#going-further",
    "title": "A Very Simple Windows Management Workflow for Windows",
    "section": "Going further",
    "text": "Going further\nYou can have a lot more by installing PowerToys (developed by Microsoft). Some of my favorite features from PowerToys:\n\nKeyboard Manager, to remap keys and create new keybinds;\nColor Picker, win + shift + c;\nQuick Accent, so I don’t have to use alt + 128 to print a ‘Ç’, alt + 144 for a ‘É’, and so on;\nRun, which is a fast app launcher you access with alt + space;\nText Extractor, which is an Optical Character Recognition tool.\n\nI personally don’t use FancyZones much, but if a more advanced tiling window manager than FancyZones appeal to you, you might be interested by komorebi.\n\nPowerToys: https://learn.microsoft.com/en-us/windows/powertoys/install\nkomorebi: https://github.com/LGUG2Z/komorebi"
  },
  {
    "objectID": "notes/47/index.html#related-notes",
    "href": "notes/47/index.html#related-notes",
    "title": "A Very Simple Windows Management Workflow for Windows",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#87\nNote#81\nNote#78\nNote#16"
  },
  {
    "objectID": "notes/88/index.html",
    "href": "notes/88/index.html",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "",
    "text": "Google Authenticator provides 2-factor authentication (2FA), which can enhance the security of SSH logins."
  },
  {
    "objectID": "notes/88/index.html#install-google-authenticator-on-the-server",
    "href": "notes/88/index.html#install-google-authenticator-on-the-server",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "Install Google Authenticator on the server",
    "text": "Install Google Authenticator on the server\nsudo apt install libpam-google-authenticator"
  },
  {
    "objectID": "notes/88/index.html#generate-the-secret-key-and-qr-code",
    "href": "notes/88/index.html#generate-the-secret-key-and-qr-code",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "Generate the secret key and QR code",
    "text": "Generate the secret key and QR code\nIn this section, we will generate a secret key and a QR code for Google Authenticator.\n\nRun the Google Authenticator PAM module\ngoogle-authenticator\nDuring the google-authenticator command, you will be asked a series of questions:\n\nGenerate a new secret key? - Y\nDo you want me to update your /home/user/.google_authenticator file? - Y\nDo you want to disallow multiple uses of the same authentication token? - Y\nBy default, a new token is generated every 30 seconds. Do you want to change the time step size? - N\nDo you want to enable rate-limiting? - Y\n\n\n\nFor scripting purposes, use the following command with the specified options\ngoogle-authenticator -t -f -d -w 3 -e 10 -r 3 -R 30\nThis command executes the following functions:\n\n-t to generate a new secret key for time-based authentication\n-f to overwrite any existing secret key\n-d to provide the secret key and a URL that generates a QR code\n-w 3 to set a limit of 3 time skew windows\n-e 10 to set 10 emergency scratch codes\n-r 3 -R 30 to limit the rate of new tokens to 3 every 30s\n\nThe QR code can be scanned with a standard authenticator app on your smartphone, such as Bitwarden, Google Authenticator, or Proton Pass. Alternatively, you can manually enter the provided secret key."
  },
  {
    "objectID": "notes/88/index.html#edit-the-pam-configuration-for-ssh-on-the-server",
    "href": "notes/88/index.html#edit-the-pam-configuration-for-ssh-on-the-server",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "Edit the PAM configuration for SSH on the server",
    "text": "Edit the PAM configuration for SSH on the server\nNow, let’s modify the PAM configuration for SSH on the server.\n\nOpen the PAM configuration for SSH\nsudo vim /etc/pam.d/sshd\n\n\nAt the bottom of the file, add the following lines\n# Google Authenticator 2FA configuration\nauth required pam_google_authenticator.so nullok\nauth required pam_permit.so\nThe nullok option in the line auth required pam_google_authenticator.so nullok allows users, who have not yet configured Google Authenticator, to log in using their SSH keys. This feature can assist in the transition to 2FA. If this option is not required, feel free to remove it.\nIf you wish to necessitate password authentication in addition to the 2FA, insert the following line before the previously mentioned lines:\nauth requisite pam_unix.so\nThe order will determine how the user is prompted for authentication. To be extra clear, the following line will prompt the user in this order: 1) password; 2) 2FA code.\n# Google Authenticator 2FA configuration\nauth requisite pam_unix.so\nauth required pam_google_authenticator.so nullok\nauth required pam_permit.so\n\n\nControl Flags in PAM\nIn the PAM (Pluggable Authentication Modules) configuration, control flags like required and requisite are used to determine how the system reacts to the success or failure of a module:\n\nrequired: If a module flagged as required fails, the system will continue processing the rest of the modules before failing the authentication. This avoids revealing exactly which part of the process failed to potential attackers.\nrequisite: If a requisite flagged module fails, the authentication process fails immediately. The system won’t continue to process the other modules. This gives instant failure feedback, but may also reveal more information to potential attackers about what part of the authentication process failed.\n\nThe choice between required and requisite depends on your specific security needs and strategy.\n\n\nAt the beginning of the file, you should comment out the following line\n# Standard Un*x authentication.\n#@include common-auth"
  },
  {
    "objectID": "notes/88/index.html#update-sshd-configuration",
    "href": "notes/88/index.html#update-sshd-configuration",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "Update SSHD configuration",
    "text": "Update SSHD configuration\n\nEdit the SSHD configuration file\nsudo vim /etc/ssh/sshd_config\n\n\nEnsure that the following lines are present and not commented out\n# Enabled for 2FA with Google Authenticator\nChallengeResponseAuthentication yes\nKbdInteractiveAuthentication yes\nUsePAM yes\n\n\nAt the bottom of the file, add one of the following lines based on the desired behavior\n\nTo require both an SSH key and either a password or the 2FA code:\n\nAuthenticationMethods publickey,password publickey,keyboard-interactive\n\nTo require both an SSH key and the 2FA code:\n\nAuthenticationMethods publickey,keyboard-interactive\nIf you want it, don’t forget to enable public key authentication:\nPubkeyAuthentication yes"
  },
  {
    "objectID": "notes/88/index.html#restart-the-sshd-service",
    "href": "notes/88/index.html#restart-the-sshd-service",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "Restart the SSHD service",
    "text": "Restart the SSHD service\nsudo systemctl restart sshd"
  },
  {
    "objectID": "notes/88/index.html#disabling-2fa",
    "href": "notes/88/index.html#disabling-2fa",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "Disabling 2FA",
    "text": "Disabling 2FA\nIf you wish to disable 2FA, you can either remove or comment out the associated lines in /etc/pam.d/sshd and /etc/ssh/sshd_config. Following this, remember to restart the SSHD service."
  },
  {
    "objectID": "notes/88/index.html#references",
    "href": "notes/88/index.html#references",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "References",
    "text": "References\n\nGoogle Authenticator PAM Module GitHub Repository"
  },
  {
    "objectID": "notes/88/index.html#related-notes",
    "href": "notes/88/index.html#related-notes",
    "title": "Setting Up Two-Factor Authentication (2FA) on a Server with Google Authenticator for SSH Logins",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#20\nNote#24"
  },
  {
    "objectID": "notes/145/index.html",
    "href": "notes/145/index.html",
    "title": "Unnecessary else Statement Can Be Better for Readability",
    "section": "",
    "text": "Just watched a short video by Trey Hunner and thought it was a good rule."
  },
  {
    "objectID": "notes/145/index.html#balanced-statements",
    "href": "notes/145/index.html#balanced-statements",
    "title": "Unnecessary else Statement Can Be Better for Readability",
    "section": "Balanced Statements",
    "text": "Balanced Statements\nIf the else statement is not more important than the if check, then keeping it can improve readability. The if and the else statements are like a balance scale.\n\nExample\nfrom dateutil.parser import parse\n\ndef earliest_data(date1, date2):\n    \"\"\"Return the string representing the earliest date.\"\"\"\n    if parse(date1, fuzzy=True) &lt; parse(date2, fuzzy=True):\n        return date1\n    else:\n        return date2"
  },
  {
    "objectID": "notes/145/index.html#unnecessary-and-confusing-else-statement",
    "href": "notes/145/index.html#unnecessary-and-confusing-else-statement",
    "title": "Unnecessary else Statement Can Be Better for Readability",
    "section": "Unnecessary and Confusing else Statement",
    "text": "Unnecessary and Confusing else Statement\nHowever, if the else statement is more important than the if check, it is better to remove the else statement.\n\nExample\nfrom pathlib import Path\n\ndef calculate_directory_size(path):\n    path = Path(path)\n\n    if path.is_file():\n        return path.stat().st_size\n\n    return sum(\n        calculate_directory_size(item)\n        for item in path.iterdir()\n    )"
  },
  {
    "objectID": "notes/1/index.html",
    "href": "notes/1/index.html",
    "title": "What is the difference between 127.0.0.1 and 0.0.0.0?",
    "section": "",
    "text": "127.0.0.1 is the loopback address (also known as localhost) ;\n0.0.0.0 is a non-routable meta-address used to designate an invalid, unknown, or non-applicable target (a ‘no particular address’ place holder).\n\n#networking #IP #localhost\nhttps://www.howtogeek.com/225487/what-is-the-difference-between-127.0.0.1-and-0.0.0.0/"
  },
  {
    "objectID": "notes/187/index.html",
    "href": "notes/187/index.html",
    "title": "A Needlessly Complex Word for a Simple Idea",
    "section": "",
    "text": "Remonstration."
  },
  {
    "objectID": "notes/101/index.html",
    "href": "notes/101/index.html",
    "title": "Understanding xclip File Commands and Their Use Cases",
    "section": "",
    "text": "In addition to working with plain text, the xclip command line tool has some less-known commands: xclip-copyfile, xclip-cutfile, and xclip-pastefile. These commands provide a bridge between terminal-based operations and clipboard functionality involving files."
  },
  {
    "objectID": "notes/101/index.html#what-do-these-commands-do",
    "href": "notes/101/index.html#what-do-these-commands-do",
    "title": "Understanding xclip File Commands and Their Use Cases",
    "section": "What Do These Commands Do?",
    "text": "What Do These Commands Do?\n\nxclip-copyfile copies one or more files, along with their metadata, to the clipboard, which mimics the “Copy” operation in a graphical file manager.\nxclip-cutfile operates like xclip-copyfile, but also removes the original files after copying them to the clipboard, simulating the “Cut” operation.\nxclip-pastefile retrieves the contents of the clipboard and writes them into one or more new files, equivalent to the “Paste” command in a file manager."
  },
  {
    "objectID": "notes/101/index.html#potential-use-cases",
    "href": "notes/101/index.html#potential-use-cases",
    "title": "Understanding xclip File Commands and Their Use Cases",
    "section": "Potential Use Cases",
    "text": "Potential Use Cases\nA unique advantage of these commands might be when you want to copy files to paste them into another application, like a web browser or a specific GUI application that accepts file paste operations. This could be a use case where these xclip file commands might come handy."
  },
  {
    "objectID": "notes/101/index.html#personal-observations",
    "href": "notes/101/index.html#personal-observations",
    "title": "Understanding xclip File Commands and Their Use Cases",
    "section": "Personal Observations",
    "text": "Personal Observations\nDespite the possible use mentioned above, I find that the usefulness of these commands might be limited. Traditional commands like cp, mv, and rm are what any terminal-centric person will really use.\nIn the end, whether or not these commands are useful to you will largely depend on your specific needs, workflow, and the systems you’re working with."
  },
  {
    "objectID": "notes/101/index.html#related-notes",
    "href": "notes/101/index.html#related-notes",
    "title": "Understanding xclip File Commands and Their Use Cases",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#99\nNote#47"
  },
  {
    "objectID": "notes/96/index.html",
    "href": "notes/96/index.html",
    "title": "Removing Vocals from Music: A Simple Hack",
    "section": "",
    "text": "The process of removing vocals from a song can sometimes be accomplished by leveraging the way stereo tracks are typically recorded. This method, which involves subtracting one stereo channel from the other, is more of a hack than a professional technique, as the general sound quality will be severely deteriorated."
  },
  {
    "objectID": "notes/96/index.html#the-general-process",
    "href": "notes/96/index.html#the-general-process",
    "title": "Removing Vocals from Music: A Simple Hack",
    "section": "The General Process",
    "text": "The General Process\n\nMany instruments in a song are often recorded so that they favor one side of the stereo track over the other.\nBy contrast, vocals are usually recorded in mono and played equally in both channels.\nSubtracting the right channel from the left (or vice versa) removes everything that is the same in both channels, which often includes the main vocal track.\n\nThe general steps are as follows:\n\nFor each sample in the stereo input sound, compute the difference between the left and right channels at that point in time.\nUse this result as the corresponding sample in the mono output sound."
  },
  {
    "objectID": "notes/96/index.html#caveat-this-is-a-hack-not-a-professional-technique",
    "href": "notes/96/index.html#caveat-this-is-a-hack-not-a-professional-technique",
    "title": "Removing Vocals from Music: A Simple Hack",
    "section": "Caveat: This is a Hack, Not a Professional Technique",
    "text": "Caveat: This is a Hack, Not a Professional Technique\n\nThis technique isn’t always effective and can sometimes remove parts of the music other than the vocals.\nIt’s more of a simple hack than a technique used by professional audio engineers.\nProfessionals use more complex and reliable techniques for this purpose, often involving spectral editing, phase cancellation, and other methods."
  },
  {
    "objectID": "notes/96/index.html#pseudocode",
    "href": "notes/96/index.html#pseudocode",
    "title": "Removing Vocals from Music: A Simple Hack",
    "section": "Pseudocode",
    "text": "Pseudocode\nA pseudocode representation of this process could look like this:\nfunction remove_vocals(input_sound):\n    output_sound = create_empty_mono_sound(input_sound.length)\n\n    for each sample in input_sound:\n        output_sound[sample.index] = input_sound.left_channel[sample.index] - input_sound.right_channel[sample.index]\n    \n    return output_sound\nThis pseudocode assumes that input_sound is a stereo sound object that has separate left and right channel arrays, and that create_empty_mono_sound is a function that creates a new mono sound object of a given length."
  },
  {
    "objectID": "notes/96/index.html#references",
    "href": "notes/96/index.html#references",
    "title": "Removing Vocals from Music: A Simple Hack",
    "section": "References",
    "text": "References\n\nAudio Processing | 6.101 Spring 2023 (py.mit.edu)"
  },
  {
    "objectID": "notes/122/index.html",
    "href": "notes/122/index.html",
    "title": "ChatGPT Integration for Code Analysis in Vim",
    "section": "",
    "text": "Integrate OpenAI’s ChatGPT models into your Vim environment for real-time code analysis.\nThis guide will walk you through setting up a workflow that combines Vim, Tmux, and my CLI tool called lmt—that allows for interaction with ChatGPT from the terminal. You’ll be able to select lines of code in Vim, send them to lmt via a Bash script, and view the analysis in a new Tmux pane."
  },
  {
    "objectID": "notes/122/index.html#requirements",
    "href": "notes/122/index.html#requirements",
    "title": "ChatGPT Integration for Code Analysis in Vim",
    "section": "Requirements",
    "text": "Requirements\n\nVim\nTmux\nlmt"
  },
  {
    "objectID": "notes/122/index.html#installation",
    "href": "notes/122/index.html#installation",
    "title": "ChatGPT Integration for Code Analysis in Vim",
    "section": "Installation",
    "text": "Installation\nFirst, ensure that Vim and Tmux are installed on your system. You can install lmt from its GitHub repository, or you can use pip or pipx:\npipx install lmterminal\n\nCreate a Bash Script\nCreate a Bash script that accomplishes the following:\n\nReads selected lines from Vim’s standard input.\nWrites these lines to a temporary file.\nEchoes the original lines back to Vim to preserve them.\nOpens a new Tmux pane and runs lmt with the contents of the temporary file.\nRemoves the temporary file.\n\nHere’s the script:\n#!/bin/bash\n\ncleanup() {\n    rm -f \"$temp_file\"\n}\n\n# Create a temporary file.\ntemp_file=$(mktemp) || {\n    echo \"Failed to create temporary file.\" &gt;&2\n    exit 1\n}\ntrap cleanup EXIT INT TERM\n\nif [ -t 0 ]; then\n    echo \"No input to read. Skipping stdin reading.\" &gt;&2\nelse\n    # Read selected lines piped from Vim and write them to the temporary file.\n    cat &gt; \"$temp_file\"\n    # Output the selected lines back to Vim to preserve the original file.\n    cat \"$temp_file\"\nfi\n\n# Reconstruct the arguments string, adding quotes back where necessary\nargs=\"\"\nfor arg in \"$@\"; do\n    if [[ $arg == *\" \"* ]]; then\n        args+=\"\\\"$arg\\\" \"\n    else\n        args+=\"$arg \"\n    fi\ndone\nargs=${args%?}\n\n# Get the user's preferred shell with a fallback on `sh`\nuser_shell=\"${SHELL:-/bin/sh}\"\n\n# Open a new Tmux pane and run the `lmt` command with the temporary file as input.\n# Opening a new shell session to keep the pane open for reading the output.\ntmux_cmd=\"cat $temp_file | lmt $args --rich; $user_shell\"\ntmux split-window -v \"$tmux_cmd\"\nDon’t forget to change zsh in the last line by bash if that’s the shell you use.\n\n\nVim Configuration\nIn Vim, after selecting lines in visual mode, press ! to filter the selected lines through the Bash script.\n:'&lt;,'&gt;!path/to/your_script\nPlace your script in your system’s PATH for easier access.\n\n\n3. Tmux Configuration\nMake sure Tmux is running so that the script can open a new pane."
  },
  {
    "objectID": "notes/122/index.html#usage",
    "href": "notes/122/index.html#usage",
    "title": "ChatGPT Integration for Code Analysis in Vim",
    "section": "Usage",
    "text": "Usage\n\nSelect lines in Vim.\nPress ! and enter path/to/your_script.\nA new Tmux pane will open, running lmt to analyze the selected lines.\nThe Tmux pane will remain open, allowing you to read the output at your leisure."
  },
  {
    "objectID": "notes/122/index.html#advanced-customization-with-lmt",
    "href": "notes/122/index.html#advanced-customization-with-lmt",
    "title": "ChatGPT Integration for Code Analysis in Vim",
    "section": "Advanced Customization with LMT",
    "text": "Advanced Customization with LMT\nThe lmt tool allows for advanced customization through the -t/--template option. This enables you to design and use your own templates for the system prompt, broadening the potential applications of this workflow."
  },
  {
    "objectID": "notes/122/index.html#thats-it",
    "href": "notes/122/index.html#thats-it",
    "title": "ChatGPT Integration for Code Analysis in Vim",
    "section": "That’s it!",
    "text": "That’s it!\n\nThis workflow is particularly useful for quickly analyzing code without leaving your Vim/Tmux environment.\nThe lmt tool can be configured with different system behaviors or templates for various types of code analysis."
  },
  {
    "objectID": "notes/122/index.html#related-notes",
    "href": "notes/122/index.html#related-notes",
    "title": "ChatGPT Integration for Code Analysis in Vim",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#134"
  },
  {
    "objectID": "notes/148/index.html",
    "href": "notes/148/index.html",
    "title": "Vim ga Command Shows ASCII Information",
    "section": "",
    "text": "Press ga to show the ASCII value of the character under the cursor."
  },
  {
    "objectID": "notes/121/index.html",
    "href": "notes/121/index.html",
    "title": "!! Substitution in Bash and Zsh",
    "section": "",
    "text": "I typically rely on vi mode for editing commands, but !! could be useful for those who don’t, as it recalls the last command. Useful for adding a forgotten sudo or making quick adjustments.\n$ apt update  # Oops, forgot sudo\n$ sudo !!\nNote that can use !b to recall the most recent command starting with b. It works with any letter."
  },
  {
    "objectID": "notes/66/index.html",
    "href": "notes/66/index.html",
    "title": "Titles in English Should Be Capitalized",
    "section": "",
    "text": "This is the rule.\nFor more information, you can read this article from Grammarly."
  },
  {
    "objectID": "notes/66/index.html#summary",
    "href": "notes/66/index.html#summary",
    "title": "Titles in English Should Be Capitalized",
    "section": "Summary",
    "text": "Summary\nIn English, titles follow specific capitalization rules known as “title case.” In title case, the first and last words, as well as all major words, are capitalized. Major words typically include nouns, pronouns, verbs, adjectives, and adverbs, while articles, conjunctions, and prepositions are generally not capitalized unless they appear at the beginning or end of the title. Keep in mind that different style guides may have slightly different rules for title capitalization."
  },
  {
    "objectID": "notes/66/index.html#a-very-useful-tool",
    "href": "notes/66/index.html#a-very-useful-tool",
    "title": "Titles in English Should Be Capitalized",
    "section": "A Very Useful Tool",
    "text": "A Very Useful Tool\nhttps://titlecaseconverter.com/"
  },
  {
    "objectID": "notes/66/index.html#some-examples",
    "href": "notes/66/index.html#some-examples",
    "title": "Titles in English Should Be Capitalized",
    "section": "Some examples",
    "text": "Some examples\n\nArticles\nIncorrect: Ernest Hemingway wrote For Whom The Bell Tolls.\nCorrect: Ernest Hemingway wrote For Whom the Bell Tolls.\nIncorrect: Girl on A Train is a thriller by A. J. Waines.\nCorrect: Girl on a Train is a thriller by A. J. Waines.\nIncorrect: Jennifer Egan wrote A Visit from The Goon Squad.\nCorrect: Jennifer Egan wrote A Visit from the Goon Squad.\nConjunctions\nIncorrect: She titled her thesis “Urban Legends: Fact Or Fiction?”\nCorrect: She titled her thesis “Urban Legends: Fact or Fiction?”\nIncorrect: Shakespeare wrote Romeo And Juliet.\nCorrect: Shakespeare wrote Romeo and Juliet.\nNouns\nStyle guides agree that nouns should always be capitalized.\nIncorrect: The lion, the witch and the wardrobe is by C. S. Lewis.\nCorrect: The Lion, the Witch and the Wardrobe is by C. S. Lewis.\nVerbs\nIncorrect: Things fall Apart is by Chinua Achebe.\nCorrect: Things Fall Apart is by Chinua Achebe.\nAdjectives\nAdjectives are always capitalized.\nIncorrect: Roald Dahl wrote Charlie and the chocolate Factory.\nCorrect: Roald Dahl wrote Charlie and the Chocolate Factory.\nAdverbs\nAdverbs are also always capitalized.\nIncorrect: Brené Brown wrote Daring greatly: How the Courage to Be Vulnerable Transforms the Way We Live, Love, Parent, and Lead.\nCorrect: Brené Brown wrote Daring Greatly: How the Courage to Be Vulnerable Transforms the Way We Live, Love, Parent, and Lead.\nPrepositions\nNorman Maclean wrote A River Runs through It.\nBut if you were following AP style, you would write it this way:\nNorman Maclean wrote A River Runs Through It."
  },
  {
    "objectID": "notes/128/index.html",
    "href": "notes/128/index.html",
    "title": "Vim :g Command: A Practical Guide",
    "section": "",
    "text": "The :g command in Vim is a powerful tool for performing actions on lines that match a particular pattern. Below are some practical examples to demonstrate its utility."
  },
  {
    "objectID": "notes/128/index.html#inserting-a-new-line-below-markdown-headings",
    "href": "notes/128/index.html#inserting-a-new-line-below-markdown-headings",
    "title": "Vim :g Command: A Practical Guide",
    "section": "Inserting a New Line Below Markdown Headings",
    "text": "Inserting a New Line Below Markdown Headings\n:g/^#/normal o\nDescription: Useful in Markdown files to insert a new line below each heading, ensuring that headings and paragraphs are separated."
  },
  {
    "objectID": "notes/128/index.html#deleting-double-empty-lines",
    "href": "notes/128/index.html#deleting-double-empty-lines",
    "title": "Vim :g Command: A Practical Guide",
    "section": "Deleting Double Empty Lines",
    "text": "Deleting Double Empty Lines\n:g/^\\n\\n/normal dd\nDescription: Deletes one of each set of double empty lines, reducing them to single empty lines."
  },
  {
    "objectID": "notes/128/index.html#changing-bullet-point-style-in-unordered-lists",
    "href": "notes/128/index.html#changing-bullet-point-style-in-unordered-lists",
    "title": "Vim :g Command: A Practical Guide",
    "section": "Changing Bullet Point Style in Unordered Lists",
    "text": "Changing Bullet Point Style in Unordered Lists\ng/^\\s*-/s/-/*/\nDescription: Changes the bullet point style from - to * in unordered lists, which is particularly useful when you want to standardize the list format."
  },
  {
    "objectID": "notes/128/index.html#displaying-lines-containing-a-specific-word",
    "href": "notes/128/index.html#displaying-lines-containing-a-specific-word",
    "title": "Vim :g Command: A Practical Guide",
    "section": "Displaying Lines Containing a Specific Word",
    "text": "Displaying Lines Containing a Specific Word\n:g/word/#\nDescription: Displays line numbers and content for lines containing the word “word.”"
  },
  {
    "objectID": "notes/128/index.html#related-notes",
    "href": "notes/128/index.html#related-notes",
    "title": "Vim :g Command: A Practical Guide",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#30\nNote#35\nNote#40\nNote#42\nNote#44\nNote#45\nNote#51\nNote#60\nNote#79\nNote#122"
  },
  {
    "objectID": "notes/56/index.html",
    "href": "notes/56/index.html",
    "title": "ANSI Escape Sequences",
    "section": "",
    "text": "ANSI escape sequences are used for formatting text in terminals. They provide various styles and colors to enhance the readability and presentation of text. There are three common representations for the Escape character used in ANSI escape sequences:\nThe choice between those for the Escape character in escape sequences depends on personal preference and the conventions of the programming language you use. However, the hexadecimal representation \\x1b is generally preferred due to its broader portability across programming languages. If supported by the language, the shorthand representation \\e can be chosen for its simplicity and clarity."
  },
  {
    "objectID": "notes/56/index.html#frequently-used-ansi-escape-sequences",
    "href": "notes/56/index.html#frequently-used-ansi-escape-sequences",
    "title": "ANSI Escape Sequences",
    "section": "Frequently Used ANSI Escape Sequences",
    "text": "Frequently Used ANSI Escape Sequences\n\nReset all attributes: \\x1b[0m\nBold: \\x1b[1m\nItalic: \\x1b[3m\nUnderline: \\x1b[4m\nReverse (swap foreground and background colors): \\x1b[7m\nForeground Color (3/4-bit): \\x1b[30-37m or \\x1b[90-97m\nBackground Color (3/4-bit): \\x1b[40-47m or \\x1b[100-107m\nForeground Color (8-bit): \\x1b[38;5;&lt;color_index&gt;m\nBackground Color (8-bit): \\x1b[48;5;&lt;color_index&gt;m\nForeground Color (24-bit): \\x1b[38;2;&lt;red&gt;;&lt;green&gt;;&lt;blue&gt;m\nBackground Color (24-bit): \\x1b[48;2;&lt;red&gt;;&lt;green&gt;;&lt;blue&gt;m\n\nNote that the support for these escape sequences may vary across terminal emulators, and some sequences might not work as expected on certain terminals.\nThe m in the ANSI escape sequence denotes the end of the sequence. For example, in the escape sequence \\x1b[38;5;255m, the m denotes the end of the sequence, which sets the foreground color to color index 255 (white) in this case."
  },
  {
    "objectID": "notes/179/index.html",
    "href": "notes/179/index.html",
    "title": "When to use NotImplemented and NotImplementedError in Python",
    "section": "",
    "text": "First of all, NotImplemented is not an exception; it’s a built-in constant in Python. It’s a special value that must be returned by the binary special methods – that is, the methods that implement the binary operators of comparison, arithmetic, and bitwise operations (__eq__, __lt__, __add__, etc.) – when the operation is not implemented for the combination of types involved.\n\n\nFrom the Python documentation:\n\nWhen a binary (or in-place) method returns NotImplemented the interpreter will try the reflected operation on the other type (or some other fallback, depending on the operator). If all attempts return NotImplemented, the interpreter will raise an appropriate exception. Incorrectly returning NotImplemented will result in a misleading error message or the NotImplemented value being returned to Python code.\nSee Implementing the arithmetic operations for examples.\n\nThe “reflected operation on the other type” is just the reverse operation: if a &lt; b returns NotImplemented, the interpreter will try b &lt; a."
  },
  {
    "objectID": "notes/179/index.html#notimplemented",
    "href": "notes/179/index.html#notimplemented",
    "title": "When to use NotImplemented and NotImplementedError in Python",
    "section": "",
    "text": "First of all, NotImplemented is not an exception; it’s a built-in constant in Python. It’s a special value that must be returned by the binary special methods – that is, the methods that implement the binary operators of comparison, arithmetic, and bitwise operations (__eq__, __lt__, __add__, etc.) – when the operation is not implemented for the combination of types involved.\n\n\nFrom the Python documentation:\n\nWhen a binary (or in-place) method returns NotImplemented the interpreter will try the reflected operation on the other type (or some other fallback, depending on the operator). If all attempts return NotImplemented, the interpreter will raise an appropriate exception. Incorrectly returning NotImplemented will result in a misleading error message or the NotImplemented value being returned to Python code.\nSee Implementing the arithmetic operations for examples.\n\nThe “reflected operation on the other type” is just the reverse operation: if a &lt; b returns NotImplemented, the interpreter will try b &lt; a."
  },
  {
    "objectID": "notes/179/index.html#notimplementederror",
    "href": "notes/179/index.html#notimplementederror",
    "title": "When to use NotImplemented and NotImplementedError in Python",
    "section": "NotImplementedError",
    "text": "NotImplementedError\nNow, the NotImplementedError is indeed an exception. Its use is more straightforward: it should be raised when a method is not implemented yet.\nFrom the Python documentation:\n\nThis exception is derived from RuntimeError. In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method, or while the class is being developed to indicate that the real implementation still needs to be added."
  },
  {
    "objectID": "notes/179/index.html#references",
    "href": "notes/179/index.html#references",
    "title": "When to use NotImplemented and NotImplementedError in Python",
    "section": "References",
    "text": "References\n\nNotImplemented in the Python documentation\nNotImplementedError in the Python documentation\nA video by anthonywritescode"
  },
  {
    "objectID": "notes/98/index.html",
    "href": "notes/98/index.html",
    "title": "LICEcap: A Simple Tool for Recording GIFs",
    "section": "",
    "text": "It’s a plain and simple software: LICEcap"
  },
  {
    "objectID": "notes/98/index.html#related-notes",
    "href": "notes/98/index.html#related-notes",
    "title": "LICEcap: A Simple Tool for Recording GIFs",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#78"
  },
  {
    "objectID": "notes/186/index.html",
    "href": "notes/186/index.html",
    "title": "Zero-Setup Python Script Dependencies with uv",
    "section": "",
    "text": "With this header, uv automatically creates and manages a dedicated virtual environment for your script."
  },
  {
    "objectID": "notes/186/index.html#add-dependencies-from-the-cli",
    "href": "notes/186/index.html#add-dependencies-from-the-cli",
    "title": "Zero-Setup Python Script Dependencies with uv",
    "section": "Add Dependencies from the CLI",
    "text": "Add Dependencies from the CLI\nuv add --script script.py dependency_1 dependency_2 dependency_3"
  },
  {
    "objectID": "notes/186/index.html#references",
    "href": "notes/186/index.html#references",
    "title": "Zero-Setup Python Script Dependencies with uv",
    "section": "References",
    "text": "References\n\nPython Packaging - Inline Script Metadata\nuv Documentation - Running Scripts with Dependencies"
  },
  {
    "objectID": "notes/184/index.html",
    "href": "notes/184/index.html",
    "title": "Quarto has Native Support for Mermaid and Graphviz Diagrams",
    "section": "",
    "text": "https://quarto.org/docs/authoring/diagrams.html"
  },
  {
    "objectID": "notes/68/index.html",
    "href": "notes/68/index.html",
    "title": "Performance of Set-Based Word Existence Check",
    "section": "",
    "text": "When checking for the existence of a word in a file, using a set-based approach is more efficient than a classic word-by-word check, especially when querying for multiple words. However, this approach may not be optimal for very large files or when memory is a concern."
  },
  {
    "objectID": "notes/68/index.html#set-based-approach",
    "href": "notes/68/index.html#set-based-approach",
    "title": "Performance of Set-Based Word Existence Check",
    "section": "Set-Based Approach",
    "text": "Set-Based Approach\nSets use hashing, allowing for fast membership testing. Storing words in a set and then checking for a word’s existence has an average time complexity of O(1). This means the search time remains constant, regardless of the size of the set.\n\nCode Example\n_word_sets_cache = {}\n\ndef word_exists(word, file_path):\n    if file_path not in _word_sets_cache:\n        with open(file_path, encoding=\"UTF-8\") as file:\n            words_set = set(file.read().split())\n        _word_sets_cache[file_path] = words_set\n    else:\n        words_set = _word_sets_cache[file_path]\n    return word in words_set"
  },
  {
    "objectID": "notes/68/index.html#word-by-word-check",
    "href": "notes/68/index.html#word-by-word-check",
    "title": "Performance of Set-Based Word Existence Check",
    "section": "Word by Word Check",
    "text": "Word by Word Check\nA classic word by word check involves iterating through the file and comparing each word individually. This results in a linear time complexity of O(n), where ‘n’ is the number of words in the file. In this case, the search time increases linearly with the size of the file.\n\nCode Example\ndef word_exists(word, file_path):\n    with open(file_path, encoding=\"UTF-8\") as file:\n        for line in file:\n            for curr_word in line.split():\n                if curr_word == word:\n                    return True\n    return False"
  },
  {
    "objectID": "notes/68/index.html#performance-comparison",
    "href": "notes/68/index.html#performance-comparison",
    "title": "Performance of Set-Based Word Existence Check",
    "section": "Performance Comparison",
    "text": "Performance Comparison\nAlthough creating the set has an initial time complexity of O(n) while reading the file, subsequent word existence checks have an average time complexity of O(1). This makes the set-based approach more efficient than the word by word check when querying multiple words against the file.\n\nReminder\nNote that while caching the set of words in memory can improve performance for small to medium-sized files, it may not be optimal for very large files, since reading the entire file into memory can consume a lot of resources. Therefore, it’s important to consider the size of the files that will be processed by the word_exists() function, and adjust the caching strategy accordingly.\n\n\nThe Bloom Filter\nA Bloom filter may be a good alternative to the set-based approach for checking the existence of elements in very large files or sets. By using hashing and a bit array, a Bloom filter can achieve fast query times and a small memory footprint, while also controlling the probability of false positives. However, it may not be suitable for applications that require high precision.\n\nBloom filter - Wikipedia"
  },
  {
    "objectID": "notes/60/index.html",
    "href": "notes/60/index.html",
    "title": "How to use macros in Vim",
    "section": "",
    "text": "Press q followed by a letter to start recording.\nPerform the desired operations.\nPress q again to stop recording."
  },
  {
    "objectID": "notes/60/index.html#record-a-macro",
    "href": "notes/60/index.html#record-a-macro",
    "title": "How to use macros in Vim",
    "section": "",
    "text": "Press q followed by a letter to start recording.\nPerform the desired operations.\nPress q again to stop recording."
  },
  {
    "objectID": "notes/60/index.html#running-a-macro",
    "href": "notes/60/index.html#running-a-macro",
    "title": "How to use macros in Vim",
    "section": "Running a macro",
    "text": "Running a macro\n\nPress @ followed by the letter of the macro.\nPress @@ to run the last executed macro again."
  },
  {
    "objectID": "notes/60/index.html#apply-a-macro-to-a-set-of-lines",
    "href": "notes/60/index.html#apply-a-macro-to-a-set-of-lines",
    "title": "How to use macros in Vim",
    "section": "Apply a macro to a set of lines",
    "text": "Apply a macro to a set of lines\n\nIn visual mode, select the lines.\nPress : followed by normal @ and the letter of the macro."
  },
  {
    "objectID": "notes/60/index.html#viewing-a-macro",
    "href": "notes/60/index.html#viewing-a-macro",
    "title": "How to use macros in Vim",
    "section": "Viewing a macro",
    "text": "Viewing a macro\n\nType :registers or :reg to see the contents of all registers.\nType :reg &lt;letter&gt; to see the contents of a specific register."
  },
  {
    "objectID": "notes/60/index.html#saving-a-macro",
    "href": "notes/60/index.html#saving-a-macro",
    "title": "How to use macros in Vim",
    "section": "Saving a macro",
    "text": "Saving a macro\n\nType :let @&lt;letter&gt;='macro_contents', replacing &lt;letter&gt; with the register and macro_contents with the actual content of the macro.\nTo insert the contents of an existing macro, type :let @&lt;letter&gt;=' and then press Ctrl-R Ctrl-R &lt;letter&gt; to insert the contents literally.\nAdd the above line to your .vimrc file to load the macro automatically when Vim starts."
  },
  {
    "objectID": "notes/60/index.html#appending-to-a-macro",
    "href": "notes/60/index.html#appending-to-a-macro",
    "title": "How to use macros in Vim",
    "section": "Appending to a macro",
    "text": "Appending to a macro\n\nPress q followed by the capital letter of the macro to start appending.\nPerform the additional operations.\nPress q again to stop appending."
  },
  {
    "objectID": "notes/60/index.html#editing-a-macro",
    "href": "notes/60/index.html#editing-a-macro",
    "title": "How to use macros in Vim",
    "section": "Editing a macro",
    "text": "Editing a macro\n\nPaste the macro contents into a new buffer or just a blank line using \"ap (replace ‘a’ with the appropriate letter).\nEdit the macro as needed.\nYank the modified macro back into the register using \"ay$ (replace ‘a’ with the appropriate letter). Compared to \"ayy, this will avoid yanking a trailing newline character."
  },
  {
    "objectID": "notes/115/index.html",
    "href": "notes/115/index.html",
    "title": "How To Detect a Hashable Object in Python",
    "section": "",
    "text": "The hash() function returns the hash value for the given object. With that function, there are two ways to test if an object is hashable:"
  },
  {
    "objectID": "notes/115/index.html#tryexcept-block",
    "href": "notes/115/index.html#tryexcept-block",
    "title": "How To Detect a Hashable Object in Python",
    "section": "try/except Block",
    "text": "try/except Block\ntry:\n    hash(my_object) # Attempt to hash the object\n    print(\"My object is hashable.\")\nexcept TypeError:\n    print(\"My object is not hashable.\")\nYou could also try to add the object to a set instead of using the hash() function."
  },
  {
    "objectID": "notes/115/index.html#isinstance-with-typing.hashable",
    "href": "notes/115/index.html#isinstance-with-typing.hashable",
    "title": "How To Detect a Hashable Object in Python",
    "section": "isinstance() With typing.Hashable",
    "text": "isinstance() With typing.Hashable\nimport typing\n\n\nif isinstance(my_object, typing.Hashable):\n    print(\"My object is hashable.\")\nelse:\n    print(\"My object is not hashable.\")"
  },
  {
    "objectID": "notes/105/index.html",
    "href": "notes/105/index.html",
    "title": "Google Dorking Cheat Sheet",
    "section": "",
    "text": "site:: Restricts search results to a specific website or domain.\n\nExample: site:example.com\n\nlink:: Shows pages that link to a certain page.\n\nExample: link:example.com\n\ncache:: Shows the version of the web page as it appeared when Google last indexed it.\n\nExample: cache:example.com\n\ninfo:: Shows information Google has about a webpage.\n\nExample: info:example.com\n\nrelated:: Shows sites related to a specified site.\n\nExample: related:example.com"
  },
  {
    "objectID": "notes/105/index.html#basic-operators",
    "href": "notes/105/index.html#basic-operators",
    "title": "Google Dorking Cheat Sheet",
    "section": "",
    "text": "site:: Restricts search results to a specific website or domain.\n\nExample: site:example.com\n\nlink:: Shows pages that link to a certain page.\n\nExample: link:example.com\n\ncache:: Shows the version of the web page as it appeared when Google last indexed it.\n\nExample: cache:example.com\n\ninfo:: Shows information Google has about a webpage.\n\nExample: info:example.com\n\nrelated:: Shows sites related to a specified site.\n\nExample: related:example.com"
  },
  {
    "objectID": "notes/105/index.html#searching-within-parts-of-a-page",
    "href": "notes/105/index.html#searching-within-parts-of-a-page",
    "title": "Google Dorking Cheat Sheet",
    "section": "Searching Within Parts of a Page",
    "text": "Searching Within Parts of a Page\n\nintitle:: Searches within the title tags.\n\nExample: intitle:\"login page\"\n\nallintitle:: Searches for documents containing all the specified words in the title.\n\nExample: allintitle:apple banana\n\nintext:: Searches within the body text.\n\nExample: intext:\"important announcement\"\n\nallintext:: Searches for documents containing all the specified words in the body text.\n\nExample: allintext:apple banana\n\ninurl:: Searches within the URL.\n\nExample: inurl:login\n\nallinurl:: Searches for a URL containing all the specified words.\n\nExample: allinurl:apple banana"
  },
  {
    "objectID": "notes/105/index.html#filetype-search",
    "href": "notes/105/index.html#filetype-search",
    "title": "Google Dorking Cheat Sheet",
    "section": "Filetype Search",
    "text": "Filetype Search\n\nfiletype:: Searches for specific file types.\n\nExample: filetype:pdf\n\next:: Alternative to filetype.\n\nExample: ext:pdf"
  },
  {
    "objectID": "notes/105/index.html#time-based-search",
    "href": "notes/105/index.html#time-based-search",
    "title": "Google Dorking Cheat Sheet",
    "section": "Time-Based Search",
    "text": "Time-Based Search\n\nafter:: Shows results that are newer than the specified date. You can use year, month, and day formats (YYYY, YYYY-MM, YYYY-MM-DD).\n\nExample: nasa news after:2023-01-01\n\nbefore:: Shows results that are older than the specified date. Same date formats apply as in after:.\n\nExample: nasa news before:2023-01-01"
  },
  {
    "objectID": "notes/105/index.html#proximity-search",
    "href": "notes/105/index.html#proximity-search",
    "title": "Google Dorking Cheat Sheet",
    "section": "Proximity Search",
    "text": "Proximity Search\n\nAROUND(X): Can be used between two words, with X representing the maximum amount of words that you want to allow between the two.\n\nExample: Apple AROUND(3) iPhone"
  },
  {
    "objectID": "notes/105/index.html#specialized-search",
    "href": "notes/105/index.html#specialized-search",
    "title": "Google Dorking Cheat Sheet",
    "section": "Specialized Search",
    "text": "Specialized Search\n\ndefine:: Looks up the definition of a word.\n\nExample: define:computer\n\nstocks:: Gives information about stocks when followed by a ticker symbol.\n\nExample: stocks:AAPL\n\nbook:: Can be followed by a book title to get information about the book.\n\nExample: book:\"The World as Will and Representation\"\n\nmovie:: Can be followed by a movie title to get reviews and showtimes.\n\nExample: movie:Matrix\n\nmusic:: Searches for music-related information.\n\nExample: music:public memory\n\nweather:: Gives the current weather for a specified location.\n\nExample: weather:Paris\n\nphonebook:: Finds phone numbers and addresses listed in US phone books.\n\nExample: phonebook:John Doe\n\narea code:: Shows the location for a particular area code.\n\nExample: area code:415"
  },
  {
    "objectID": "notes/105/index.html#numerical-range-search",
    "href": "notes/105/index.html#numerical-range-search",
    "title": "Google Dorking Cheat Sheet",
    "section": "Numerical Range Search",
    "text": "Numerical Range Search\n\nnumrange:: Used to locate specific numbers in your search. Use two periods without spaces (..) to represent an inclusive range of numbers.\n\nExample: camera $50..$100"
  },
  {
    "objectID": "notes/105/index.html#logical-operators",
    "href": "notes/105/index.html#logical-operators",
    "title": "Google Dorking Cheat Sheet",
    "section": "Logical Operators",
    "text": "Logical Operators\n\nAND: Shows results where both terms on either side of the AND operator are present. AND must be in upper case. Google search defaults to using AND between terms if no other operator is specified.\n\nExample: apple AND banana\n\nOR: Shows results where either term (or both terms) is present. OR must be in upper case.\n\nExample: apple OR banana\n\n- (minus sign): Excludes results containing the term that follows the - operator.\n\nExample: apple -banana\n\n\" \" (quotes): Searches for an exact phrase match.\n\nExample: \"apple banana\""
  },
  {
    "objectID": "notes/112/index.html",
    "href": "notes/112/index.html",
    "title": "Managing Upgrades of Bundled CLI Tools in a metapackage Installed via pipx",
    "section": "",
    "text": "Upon upgrading the metapackage through pipx, the versions of bundled tools might remain static unless they’re explicitly updated."
  },
  {
    "objectID": "notes/112/index.html#the-challenge",
    "href": "notes/112/index.html#the-challenge",
    "title": "Managing Upgrades of Bundled CLI Tools in a metapackage Installed via pipx",
    "section": "",
    "text": "Upon upgrading the metapackage through pipx, the versions of bundled tools might remain static unless they’re explicitly updated."
  },
  {
    "objectID": "notes/112/index.html#solutions-their-implications",
    "href": "notes/112/index.html#solutions-their-implications",
    "title": "Managing Upgrades of Bundled CLI Tools in a metapackage Installed via pipx",
    "section": "Solutions & Their Implications",
    "text": "Solutions & Their Implications\n\nExplicitly Upgrade a Specific CLI Tool\nA direct method is using pipx runpip &lt;metapackage-name&gt; install --upgrade &lt;cli_tool_name&gt;, which allows for the upgrade of individual tools within the metapackage.\nDrawback: This method counteracts the desired smooth user experience of a metapackage.\n\n\nAutomated Dependency Versioning with a Script\nAn effective solution is to implement an automated version management system. Below is a Python script that fetches the latest versions of specified packages from PyPI and updates them in the requirements.txt:\nimport requests\n\n\ndef get_latest_version(package_name):\n   \"\"\"\n   Fetches the latest version of the package from PyPI.\n   \"\"\"\n   url = f\"https://pypi.org/pypi/{package_name}/json\"\n   try:\n       response = requests.get(url, timeout=5)\n       response.raise_for_status()\n       return response.json()[\"info\"][\"version\"]\n   except requests.RequestException as error:\n       print(f\"Error fetching version for {package_name}: {error}\")\n       return None\n\n\ndef update_requirements(packages_to_update, requirements_path=\"requirements.txt\"):\n   \"\"\"\n   Updates the requirements.txt with the latest versions of the specified packages.\n   \"\"\"\n   with open(requirements_path, \"r\", encoding=\"UTF-8\") as file:\n       lines = file.readlines()\n\n   updated_lines = []\n   for line in lines:\n       pkg_name = line.split(\"==\")[0].strip()\n       if pkg_name in packages_to_update and (version := get_latest_version(pkg_name)):\n           updated_lines.append(f\"{pkg_name}=={version}\\n\")\n           continue\n       updated_lines.append(line)\n\n   with open(requirements_path, \"w\", encoding=\"UTF-8\") as file:\n       file.writelines(updated_lines)\n\n\nif __name__ == \"__main__\":\n   packages_to_update = [\"lmt-cli\", \"shellgenius\", \"vocabmaster\"]\n   update_requirements(packages_to_update)\nBefore releasing a new version of the metapackage, make sure to execute this script. It will ensure that the latest versions of bundled tools are always included in the next release."
  },
  {
    "objectID": "notes/112/index.html#related-notes",
    "href": "notes/112/index.html#related-notes",
    "title": "Managing Upgrades of Bundled CLI Tools in a metapackage Installed via pipx",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#70\nNote#126\nNote#131"
  },
  {
    "objectID": "notes/100/index.html",
    "href": "notes/100/index.html",
    "title": "There’s been the “good Bing 😊”. But is there a good Edge?",
    "section": "",
    "text": "In a spontaneous moment of curiosity today, I found myself looking into Microsoft Edge, with its neat new tricks and features."
  },
  {
    "objectID": "notes/100/index.html#microsoft-edge-split-screen-and-vertical-tab-bar",
    "href": "notes/100/index.html#microsoft-edge-split-screen-and-vertical-tab-bar",
    "title": "There’s been the “good Bing 😊”. But is there a good Edge?",
    "section": "Microsoft Edge Split Screen and Vertical Tab Bar",
    "text": "Microsoft Edge Split Screen and Vertical Tab Bar\nOne cool thing I discovered is Edge’s split screen feature. By activating it via edge://flags#edge-split-screen, you can manage tabs as panels within the same window by pressing ctrl + shift + 2. The shortcut feels a bit clunky and strains the wrist, but it’s a neat feature. Pair this with the vertical tab bar, and you’ve got a pretty clean browsing session.\nHowever, this split screen isn’t as handy when you’re bouncing between tasks on other applications, since the panes—thus the text—will be squeezed.\nFor instance, when multitasking between applications like Brave and my terminal, which I lock to the left and right of my screen respectively, the split screen feature loses its charm. I regularly switch between these two using win + 2 for Brave and win + 3 for my terminal and then revert to full screen with Windows Snap (win + arrow). But once in full screen mode, it might be a good addition."
  },
  {
    "objectID": "notes/100/index.html#integrated-ai-tools-in-edge",
    "href": "notes/100/index.html#integrated-ai-tools-in-edge",
    "title": "There’s been the “good Bing 😊”. But is there a good Edge?",
    "section": "Integrated AI Tools in Edge",
    "text": "Integrated AI Tools in Edge\nOne of the features that may appeal to a lot of people is the integration of several AI tools.\nThere is the “new Bing”, the integration of ChatGPT, of course, which you can easily access via ctrl + shift + .. But that’s not all. Edge also has text-to-speech, a handy math problem solver, and you can even access DALL-E 2 via the Image Creator."
  },
  {
    "objectID": "notes/100/index.html#related-notes",
    "href": "notes/100/index.html#related-notes",
    "title": "There’s been the “good Bing 😊”. But is there a good Edge?",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#47"
  },
  {
    "objectID": "notes/174/index.html",
    "href": "notes/174/index.html",
    "title": "Hiding Commands and Options in Click CLI Help Messages",
    "section": "",
    "text": "With Click, you can hide a specific option or command from appearing in the help message by setting the hidden parameter to True."
  },
  {
    "objectID": "notes/174/index.html#hiding-an-option",
    "href": "notes/174/index.html#hiding-an-option",
    "title": "Hiding Commands and Options in Click CLI Help Messages",
    "section": "Hiding an Option",
    "text": "Hiding an Option\n@click.option(\n    ...\n    hidden=True,\n)"
  },
  {
    "objectID": "notes/174/index.html#hiding-a-command",
    "href": "notes/174/index.html#hiding-a-command",
    "title": "Hiding Commands and Options in Click CLI Help Messages",
    "section": "Hiding a Command",
    "text": "Hiding a Command\n@click.command(\n    ...\n    hidden=True,\n)"
  },
  {
    "objectID": "notes/174/index.html#indicate-a-deprecated-command",
    "href": "notes/174/index.html#indicate-a-deprecated-command",
    "title": "Hiding Commands and Options in Click CLI Help Messages",
    "section": "Indicate a Deprecated Command",
    "text": "Indicate a Deprecated Command\nYou can use the parameter deprecated to indicate that a command is deprecated.\n@click.command(\n    ...\n    deprecated=True,\n)"
  },
  {
    "objectID": "notes/174/index.html#references",
    "href": "notes/174/index.html#references",
    "title": "Hiding Commands and Options in Click CLI Help Messages",
    "section": "References",
    "text": "References\n\nClick API Reference - Option"
  },
  {
    "objectID": "notes/174/index.html#related-notes",
    "href": "notes/174/index.html#related-notes",
    "title": "Hiding Commands and Options in Click CLI Help Messages",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#70"
  },
  {
    "objectID": "notes/2/index.html",
    "href": "notes/2/index.html",
    "title": "How to change the default editor in Linux (when it’s Nano instead of Vim)",
    "section": "",
    "text": "Add to .bashrc / .zshrc\nexport EDITOR=vim\n\n\nOr run the following command to set the default editor for your user account\nselect-editor\n\n\nTo set the system-wide default editor\nsudo update-alternatives --config editor"
  },
  {
    "objectID": "notes/141/index.html",
    "href": "notes/141/index.html",
    "title": "Managing Git Configurations Conditionally",
    "section": "",
    "text": "Git’s includeIf directive allows for conditional inclusion of configuration files based on the repository path, enabling different configurations for projects in distinct directories."
  },
  {
    "objectID": "notes/141/index.html#configuration-levels-in-context",
    "href": "notes/141/index.html#configuration-levels-in-context",
    "title": "Managing Git Configurations Conditionally",
    "section": "Configuration Levels in Context",
    "text": "Configuration Levels in Context\nIt’s important to understand Git’s configuration hierarchy:\n\nSystem: Applies to all users and their repositories on the computer.\nGlobal: User-wide settings that apply to all of the user’s repositories.\nLocal: Specific to a single repository, these settings take precedence over system and global settings.\n\nConditional includes are typically part of the global configuration but are activated based on the current repository’s path."
  },
  {
    "objectID": "notes/141/index.html#example-use-case",
    "href": "notes/141/index.html#example-use-case",
    "title": "Managing Git Configurations Conditionally",
    "section": "Example Use Case",
    "text": "Example Use Case\nUse the following syntax in the global .gitconfig to set up conditional includes:\n[includeIf \"gitdir:~/Repos/work/\"]\n    path = ~/Repos/work/.gitconfig\n\n[includeIf \"gitdir:~/Repos/personal/\"]\n    path = ~/Repos/personal/.gitconfig"
  },
  {
    "objectID": "notes/141/index.html#troubleshooting",
    "href": "notes/141/index.html#troubleshooting",
    "title": "Managing Git Configurations Conditionally",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nLocal .gitconfig files can override global settings when within the specified directory.\nDebug configurations with git config --list --show-origin."
  },
  {
    "objectID": "notes/131/index.html",
    "href": "notes/131/index.html",
    "title": "Python Packaging with pyproject.toml",
    "section": "",
    "text": "Though I may still be in the early stages of my programming journey, I had not learned the most modern way of packaging a Python project six months ago when I started doing it. Initially, I used setuptools and a setup.py file.\nHowever, the pyproject.toml file has emerged as a modern way to specify build dependencies and configurations for Python projects. Below is a practical workflow for creating, building, and distributing a Python package using solely pyproject.toml."
  },
  {
    "objectID": "notes/131/index.html#creating-a-package",
    "href": "notes/131/index.html#creating-a-package",
    "title": "Python Packaging with pyproject.toml",
    "section": "Creating a Package",
    "text": "Creating a Package\n\nSetup Your Project Directory\n/path/to/your/project/\n├── new_project/          # Python package directory.\n│   ├── __init__.py       # Makes the directory a package.\n│   └── cli.py            # An example module for CLI.\n├── tests/                # Directory for tests.\n│   └── cli_test.py       # Test module for CLI.\n├── pyproject.toml        # Definition of build process of the package.\n└── README.md             # README with info about the project.\nDefine Your Package Configuration\n[project]\nname = \"new_project\"\nversion = \"0.0.0\"\n\n[project.scripts]\nnew_project = \"new_project.cli:cli\""
  },
  {
    "objectID": "notes/131/index.html#building-and-distributing-your-package",
    "href": "notes/131/index.html#building-and-distributing-your-package",
    "title": "Python Packaging with pyproject.toml",
    "section": "Building and Distributing Your Package",
    "text": "Building and Distributing Your Package\n\nBuild Your Package\npython -m build\nThis command creates a dist/ folder in your project directory, containing the built package files.\nInstall Your Package Locally (For Testing)\npip install -e .\nUpload Your Package to PyPi\npip install twine  # If you haven't installed twine already\ntwine upload dist/*"
  },
  {
    "objectID": "notes/131/index.html#managing-dependencies",
    "href": "notes/131/index.html#managing-dependencies",
    "title": "Python Packaging with pyproject.toml",
    "section": "Managing Dependencies",
    "text": "Managing Dependencies\n[project]\ndependencies = [\n    \"rich\",\n    \"click\",\n]\n\n[project.optional-dependencies]\ntest = [\"pytest\"]"
  },
  {
    "objectID": "notes/131/index.html#configuring-entry-points",
    "href": "notes/131/index.html#configuring-entry-points",
    "title": "Python Packaging with pyproject.toml",
    "section": "Configuring Entry Points",
    "text": "Configuring Entry Points\nIf you’re creating a CLI tool, specify the entry point in the pyproject.toml like so:\n[project.scripts]\nnew_project = \"new_project.cli:cli\""
  },
  {
    "objectID": "notes/131/index.html#tool-configuration",
    "href": "notes/131/index.html#tool-configuration",
    "title": "Python Packaging with pyproject.toml",
    "section": "Tool Configuration",
    "text": "Tool Configuration\nConfigure tools such as black for code formatting and ruff for linting in the pyproject.toml:\n[tool.black]\nline-length = 100\n\n[tool.ruff]\nline-length = 100\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]"
  },
  {
    "objectID": "notes/131/index.html#starter-pyproject.toml-example",
    "href": "notes/131/index.html#starter-pyproject.toml-example",
    "title": "Python Packaging with pyproject.toml",
    "section": "Starter pyproject.toml Example",
    "text": "Starter pyproject.toml Example\nBelow is a starter pyproject.toml file for quick project setup:\n[project]\nname = \"new_project\"\nversion = \"0.0.0\"\nauthors = [{name = \"Sébastien De Revière\"},]\ndescription = \"\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.12\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Operating System :: OS Independent\",\n]\ndependencies = [\n    \"\",\n]\n\n[project.optional-dependencies]\ntest = [\"pytest\"]\nlint = [\n    \"black\",\n    \"ruff\",\n]\npypi = [\n    \"twine\",\n    \"wheel\",\n]\nci = [\n    \"pytest\",\n    \"black\",\n    \"ruff\",\n]\n\n[projects.urls]\nHomepage = \"https://github.com/sderev/new_project\"\nDocumentation = \"https://github.com/sderev/new_project\"\nRepository = \"https://github.com/sderev/new_project\"\nChangelog = \"https://github.com/sderev/new_project/releases\"\nIssues = \"https://github.com/sderev/new_project/issues\"\n\n[project.scripts]\nnew_project = \"new_project.cli:cli\"\n\n[tool.ruff]\nline-length = 100\n\n[tool.black]\nline-length = 100\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]"
  },
  {
    "objectID": "notes/131/index.html#references",
    "href": "notes/131/index.html#references",
    "title": "Python Packaging with pyproject.toml",
    "section": "References",
    "text": "References\n\nPython Enhancement Proposal (PEP) 518: Specifying Minimum Build System Requirements for Python Projects.\nPython Enhancement Proposal (PEP) 517: A build-system independent format for source trees.\nDeclaring Project Metadata in pyproject.toml (Python Packaging User Guide).\nClassifiers · PyPI.\nEntry Points Configuration for CLI (Click Documentation).\nPackaging Python Projects Tutorial."
  },
  {
    "objectID": "notes/131/index.html#related-notes",
    "href": "notes/131/index.html#related-notes",
    "title": "Python Packaging with pyproject.toml",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#70\nNote#112\nNote#126"
  },
  {
    "objectID": "notes/4/index.html",
    "href": "notes/4/index.html",
    "title": "Cybersecurity questions preparation exams",
    "section": "",
    "text": "Some references about how to prepare for technical interviews for a cybersecurity role.\n#cybersecurity #interviews #infosec\nhttps://danielmiessler.com/study/infosec_interview_questions/"
  },
  {
    "objectID": "notes/169/index.html",
    "href": "notes/169/index.html",
    "title": "Nuances Between To Wail and To Bewail",
    "section": "",
    "text": "While both “wail” and “bewail” involve expressing deep sorrow or grief, they differ in their manner of expression and connotations."
  },
  {
    "objectID": "notes/169/index.html#to-wail",
    "href": "notes/169/index.html#to-wail",
    "title": "Nuances Between To Wail and To Bewail",
    "section": "To Wail",
    "text": "To Wail\n\nDefinition\nTo express deep sorrow, grief, or pain through prolonged, high-pitched cries or sounds.\n\n\nConnotation and usage\n\nSuggests a raw, uncontrolled expression of intense emotion\nOften in response to a deeply distressing event or situation\nPrimarily refers to the physical act of crying or making a sound\nCan be used literally or figuratively for non-human sounds\n\n\n\nUsage examples\n\nLiterature: “The bereaved mother wailed inconsolably at her child’s funeral.”\nFormal writing: “The survivors wailed in anguish as they surveyed the devastation left by the hurricane.”\nCasual conversation: “I could hear the cat wailing outside my window all night.”\n\n\n\nCommon collocations\n\nwail in despair\nwail of sirens\nwind wailing"
  },
  {
    "objectID": "notes/169/index.html#to-bewail",
    "href": "notes/169/index.html#to-bewail",
    "title": "Nuances Between To Wail and To Bewail",
    "section": "To Bewail",
    "text": "To Bewail\n\nDefinition\nTo express deep sorrow, regret, or grief about something, often through words or lamentations.\n\n\nConnotation and usage\n\nSuggests a more verbal or articulate expression of sorrow or regret\nOften implies a more composed or controlled manner of expression\nCan express strong disapproval or disappointment about a state of affairs\nEmphasizes the content of the lamentation rather than the sound\n\n\n\nUsage examples\n\nLiterature: “The poet bewailed the loss of innocence in modern society through his verses.”\nFormal writing: “In his memoirs, the former leader bewailed the missed opportunities for peace during his tenure.”\nCasual conversation: “She spent the entire evening bewailing her misfortunes to anyone who would listen.”\n\n\n\nCommon collocations\n\nbewail one’s fate\nbewail the loss\nbewail the state of affairs"
  },
  {
    "objectID": "notes/169/index.html#comparison",
    "href": "notes/169/index.html#comparison",
    "title": "Nuances Between To Wail and To Bewail",
    "section": "Comparison",
    "text": "Comparison\n\nNature of expression: “Wail” primarily refers to the physical act of crying or making sounds, while “bewail” emphasizes verbal expression of sorrow or regret.\nLevel of control: “Wailing” is often more raw and uncontrolled, while “bewailing” suggests a more composed or controlled expression.\nArticulation: “Wailing” is often inarticulate, whereas “bewailing” implies a more articulate expression of grief or disappointment.\nImmediacy: “Wail” is often associated with an immediate, intense emotional response, while “bewail” can refer to a more prolonged or reflective expression.\nScope: “Wail” is often used for personal grief, while “bewail” can extend to broader societal or philosophical lamentations."
  },
  {
    "objectID": "notes/169/index.html#synonyms-and-related-words",
    "href": "notes/169/index.html#synonyms-and-related-words",
    "title": "Nuances Between To Wail and To Bewail",
    "section": "Synonyms and Related Words",
    "text": "Synonyms and Related Words\n\nWail: cry, howl, lament, keen\nBewail: lament, mourn, rue, deplore\nRelated words: grieve, weep, bemoan"
  },
  {
    "objectID": "notes/169/index.html#related-notes",
    "href": "notes/169/index.html#related-notes",
    "title": "Nuances Between To Wail and To Bewail",
    "section": "Related Notes",
    "text": "Related Notes\n\nNote#165"
  },
  {
    "objectID": "notes/85/index.html",
    "href": "notes/85/index.html",
    "title": "File and Directory Listing in Python",
    "section": "",
    "text": "Python provides multiple ways to interact with the file system. This includes listing files and directories, checking if a path is a file or directory, and performing more complex operations."
  },
  {
    "objectID": "notes/85/index.html#os.listdir",
    "href": "notes/85/index.html#os.listdir",
    "title": "File and Directory Listing in Python",
    "section": "os.listdir()",
    "text": "os.listdir()\n\nos.listdir() returns a list of filenames in a specified directory without including the special entries (. and ..).\nIt doesn’t provide additional information about the files and directories.\nIt’s suitable for basic directory listing tasks.\n\n\nExample Using os.listdir()\nimport os\n\ndirectory_path = 'path/to/directory'\nfilenames = os.listdir(directory_path)\n\nfor filename in filenames:\n    print(filename)"
  },
  {
    "objectID": "notes/85/index.html#os.scandir",
    "href": "notes/85/index.html#os.scandir",
    "title": "File and Directory Listing in Python",
    "section": "os.scandir()",
    "text": "os.scandir()\n\nos.scandir() yields an iterator of os.DirEntry objects for entries in a specified directory.\nEach os.DirEntry object allows access to the entry’s name, full path, and methods to fetch file attributes (e.g., is_file(), is_dir(), stat()), without additional system calls.\nIt’s more efficient and suitable for tasks requiring detailed information about directory contents.\n\n\nExample Using os.scandir()\nimport os\n\ndirectory_path = 'path/to/directory'\n\nwith os.scandir(directory_path) as entries:\n    for entry in entries:\n        print(f\"Name: {entry.name}\")\n        print(f\"Full Path: {entry.path}\")\n        print(f\"Is File: {entry.is_file()}\")\n        print(f\"Is Directory: {entry.is_dir()}\")\n        print(f\"Size: {entry.stat().st_size} bytes\")\n        print(\"---\")"
  },
  {
    "objectID": "notes/85/index.html#os.walk",
    "href": "notes/85/index.html#os.walk",
    "title": "File and Directory Listing in Python",
    "section": "os.walk()",
    "text": "os.walk()\n\nos.walk() generates a tuple for each directory in the tree rooted at a specified directory, including the directory path, a list of subdirectories, and a list of filenames within that directory.\nIt traverses the directory tree either in a top-down (default) or bottom-up fashion. The traversal order is controlled by the topdown parameter:\n\nTop-down: Directories are scanned from the root down to the leaves. This is the default behavior (topdown=True).\nBottom-up: Directories are scanned from the leaves up to the root, which is useful for operations needing to process subdirectories first. Activate this approach by setting topdown=False.\n\nThis function is suitable for tasks requiring recursion through subdirectories, such as searching for files with specific extensions, aggregating file sizes, or modifying directory structures.\n\n\nExample Using os.walk()\nimport os\n\nroot_directory = 'path/to/directory'\n\n# Bottom-up traversal\nfor dirpath, dirnames, filenames in os.walk(root_directory, topdown=False):\n    print(f\"Directory Path: {dirpath}\")\n    for dirname in dirnames:\n        print(f\"Subdirectory: {dirname}\")\n    for filename in filenames:\n        print(f\"File: {filename}\")\n    print(\"---\")"
  },
  {
    "objectID": "notes/85/index.html#pathlib",
    "href": "notes/85/index.html#pathlib",
    "title": "File and Directory Listing in Python",
    "section": "pathlib",
    "text": "pathlib\n\nThe pathlib library offers a more object-oriented approach for file system manipulation.\nIt has methods and properties to interact with file paths, directories, and files.\nIt’s more intuitive, easier to use, and more powerful than os.listdir()."
  },
  {
    "objectID": "notes/85/index.html#pathlibs-iterdir",
    "href": "notes/85/index.html#pathlibs-iterdir",
    "title": "File and Directory Listing in Python",
    "section": "pathlib’s iterdir()",
    "text": "pathlib’s iterdir()\n\nThe equivalent of os.listdir() in pathlib is Path.iterdir().\nIt returns an iterator yielding Path objects for all items in the specified directory.\nUnlike os.listdir(), it provides more functionality and information about each item.\n\n\nExample Using iterdir()\nfrom pathlib import Path\n\ndirectory = Path('path/to/your/directory')\n\nfor item in directory.iterdir():\n    print(item)"
  },
  {
    "objectID": "notes/85/index.html#recursively-listing-files-with-pathlibs-rglob",
    "href": "notes/85/index.html#recursively-listing-files-with-pathlibs-rglob",
    "title": "File and Directory Listing in Python",
    "section": "Recursively Listing Files with pathlib’s rglob()",
    "text": "Recursively Listing Files with pathlib’s rglob()\n\nThe Path.rglob() method can be used to list files and directories recursively.\nIt returns an iterator yielding Path objects for all items in the specified directory and its subdirectories.\n\n\nExample Using rglob()\nfrom pathlib import Path\n\ndirectory = Path('path/to/your/directory')\n\nfor item in directory.rglob('*'):  # Use '*' as the pattern to match all items\n    print(item)\n\n\nUnderstanding rglob()\n\nrglob() stands for “recursive glob”.\nIt combines the functionality of “globbing” (pattern matching) and recursion.\n\n\n\nThe glob Shell Command\n\nThe glob command is a shell operation in Unix-based systems used for filename pattern matching.\nIt allows users to search for files and directories based on wildcard patterns."
  },
  {
    "objectID": "notes/85/index.html#pathlibs-walk-method-in-python-3.12",
    "href": "notes/85/index.html#pathlibs-walk-method-in-python-3.12",
    "title": "File and Directory Listing in Python",
    "section": "pathlib’s walk() Method in Python 3.12",
    "text": "pathlib’s walk() Method in Python 3.12\n\nIntroduced in Python 3.12, the Path.walk() method offers a way to traverse a directory tree, providing a 3-tuple (dirpath, dirnames, filenames) for each directory it visits.\nIt’s a more flexible and powerful alternative to rglob() for certain use-cases, allowing in-place modifications and error handling.\n\n\nParameters\n\ntop_down: Controls the order of traversal. True by default, meaning it goes from the top directory down to subdirectories.\non_error: A callable function for error handling. By default, errors are ignored.\nfollow_symlinks: Determines whether to follow symbolic links. Default is False.\n\n\n\nExample: Finding .txt Files\nfrom pathlib import Path\n\nfor root, dirs, files in Path(\"some_directory\").walk():\n    txt_files = [f for f in files if f.endswith('.txt')]\n    print(f\"In {root}, found text files: {txt_files}\")\n\n\nExample: Calculating Disk Usage with walk()\nfrom pathlib import Path\n\n# Initialize a dictionary to store disk usage for each directory\ndisk_usage = {}\n\n# Walk through the directory tree\nfor root, dirs, files in Path(\"some_directory\").walk():\n    total_size = 0  # Initialize total size for the current directory\n\n    # Calculate the size of each file in the current directory\n    for file in files:\n        file_path = root / Path(file)\n        total_size += file_path.stat().st_size\n\n    # Store the total size in the dictionary\n    disk_usage[root] = total_size\n\n# Display the disk usage for each directory\nfor dir_path, size in disk_usage.items():\n    print(f\"The directory {dir_path} consumes {size} bytes.\")\n\n\nNotes\n\nBe cautious when setting follow_symlinks to True to avoid infinite loops.\nThe method assumes the directory structure is not modified during its execution."
  },
  {
    "objectID": "notes/85/index.html#references",
    "href": "notes/85/index.html#references",
    "title": "File and Directory Listing in Python",
    "section": "References",
    "text": "References\n\nReal Python: How to Get All Files in a Directory\nPython Official Documentation: pathlib.Path.walk()"
  },
  {
    "objectID": "notes/153/index.html",
    "href": "notes/153/index.html",
    "title": "A Short Course on OSS Licensing for Research and Education",
    "section": "",
    "text": "This is a a short course that introduces researchers (doctoral students, postdocs, staff researchers and PIs) to the essentials of open-source software (OSS) licensing for research and educational purposes. The course duration should be about 3 hours when taught live, and we will also produce an online version for self-study.\nThe three lessons in this course cover essential topics related to using, licensing, and collaborating with open-source software, data, and content in a research and education context. Each section includes relevant subtopics and practical concerns, focusing on key licensing concepts, choosing appropriate licenses, navigating institutional processes, and fostering open-source collaboration in research teams.\n\nhttps://gw-ospo.github.io/oss-licensing/intro.html"
  },
  {
    "objectID": "notes/67/index.html",
    "href": "notes/67/index.html",
    "title": "If Your Code Uses f-strings, Your Dictionaries Are Already Ordered",
    "section": "",
    "text": "Here’s a helpful reminder for those who might be concerned about using OrderedDict for compatibility reasons:\n\nYou probably don’t need OrderedDict.\nIf your code has f-strings in it, you can rely on dictionaries maintaining their order. 📑\nDictionaries are ordered as of Python 3.6. Using an f-string before Python 3.6 results in syntax errors. Traduire le Tweet\nFrom Trey Hunner\n\nThis behavior was implemented in CPython 3.6, and guaranteed in Python 3.7 (source: https://docs.python.org/3/whatsnew/3.6.html#new-dict-implementation).\nSo f-strings may not always be helpful to determine if dictionaries are ordered.\nBut I’m with him on this nonetheless. I don’t want to split hairs. It’s a good rule to follow."
  },
  {
    "objectID": "notes/21/index.html",
    "href": "notes/21/index.html",
    "title": "How to Determine Character Frequencies in a Python String",
    "section": "",
    "text": "text = \"Hello, this is a sentence to show how this works.\"\n\nchar_frequency = {char: text.count(char) for char in set(text)}"
  },
  {
    "objectID": "notes/21/index.html#dictionary-comprehension",
    "href": "notes/21/index.html#dictionary-comprehension",
    "title": "How to Determine Character Frequencies in a Python String",
    "section": "",
    "text": "text = \"Hello, this is a sentence to show how this works.\"\n\nchar_frequency = {char: text.count(char) for char in set(text)}"
  },
  {
    "objectID": "notes/21/index.html#collections.counter",
    "href": "notes/21/index.html#collections.counter",
    "title": "How to Determine Character Frequencies in a Python String",
    "section": "collections.Counter",
    "text": "collections.Counter\nfrom collections import Counter\n\ntext = \"Hello, this is a sentence to show how this works.\"\nchar_frequency = Counter(text)\nprint(char_frequency)\n\n&gt;&gt;&gt; Counter({'e': 6, ' ': 6, 'h': 3, 'c': 3, 'r': 3, 'd': 3, 'a': 2, 't': 2, 'l': 2, 'b': 2, 'T': 1, 'm': 1, 'y': 1, 'o': 1, 's': 1, 'v': 1, 'i': 1, 'p': 1, '.': 1})"
  },
  {
    "objectID": "notes/21/index.html#references",
    "href": "notes/21/index.html#references",
    "title": "How to Determine Character Frequencies in a Python String",
    "section": "References",
    "text": "References\n\nMore on the collections.Counter: Python Morsels article, 5 min read on the subject"
  },
  {
    "objectID": "notes/137/index.html",
    "href": "notes/137/index.html",
    "title": "Basic Time Frames of Emotion",
    "section": "",
    "text": "I found a very old note from my early years when I was studying psychology. I’m not sure whether I wrote this note myself or quoted it from an article or book. Regardless, I believe it’s worth archiving here."
  },
  {
    "objectID": "notes/137/index.html#emotional-state",
    "href": "notes/137/index.html#emotional-state",
    "title": "Basic Time Frames of Emotion",
    "section": "Emotional State",
    "text": "Emotional State\nTypically lasting only a few seconds, it tends to be triggered by an experience; it can also arise from purely mental activity, such as daydreaming, or introspection, or anticipating the future.\nBut whether they are triggered by real-world experiences or mental ones, emotional states tend to dissipate, each giving way to the next."
  },
  {
    "objectID": "notes/137/index.html#mood",
    "href": "notes/137/index.html#mood",
    "title": "Basic Time Frames of Emotion",
    "section": "Mood",
    "text": "Mood\nA feeling that does persist, and that remains consistent over minutes or hours or even days, is a mood, of the “he’s in a bad mood” variety."
  },
  {
    "objectID": "notes/137/index.html#emotional-trait",
    "href": "notes/137/index.html#emotional-trait",
    "title": "Basic Time Frames of Emotion",
    "section": "Emotional Trait",
    "text": "Emotional Trait\nAnd a feeling that characterizes you not for days but for years is an emotional trait =&gt; increases the likelihood that you will experience a particular emotional state (e.g. Fury) because it lowers the threshold needed to feel such an emotional state."
  },
  {
    "objectID": "notes/137/index.html#emotional-style",
    "href": "notes/137/index.html#emotional-style",
    "title": "Basic Time Frames of Emotion",
    "section": "Emotional Style",
    "text": "Emotional Style\nIt is a consistent way of responding to the experiences of our lives. It is governed by specific, identifiable brain circuits and can be measured using objective laboratory methods. An emotional style influences the likelihood of feeling particular emotional states, traits and moods. Because emotional styles are much closer to underlying brain systems than emotional states or traits, they can be considered the atoms of our emotional lives—fundamentals building blocks."
  },
  {
    "objectID": "notes/135/index.html",
    "href": "notes/135/index.html",
    "title": "How to Know if an Object is an Iterable in Python",
    "section": "",
    "text": "According to the Python documentation:\nTherefore, always prefer using the try-except method to identify an object as an iterable."
  },
  {
    "objectID": "notes/135/index.html#using-try-except",
    "href": "notes/135/index.html#using-try-except",
    "title": "How to Know if an Object is an Iterable in Python",
    "section": "Using try-except",
    "text": "Using try-except\ndef is_iterable(item):\n    try:\n        iter(item)\n        return True\n    except TypeError:\n        return False"
  },
  {
    "objectID": "notes/135/index.html#using-hasattr",
    "href": "notes/135/index.html#using-hasattr",
    "title": "How to Know if an Object is an Iterable in Python",
    "section": "Using hasattr",
    "text": "Using hasattr\nThis is a straightforward way but can be a bit hard to read.\nhasattr(item, \"__iter__\") # True / False"
  },
  {
    "objectID": "notes/135/index.html#using-isinstance",
    "href": "notes/135/index.html#using-isinstance",
    "title": "How to Know if an Object is an Iterable in Python",
    "section": "Using isinstance",
    "text": "Using isinstance\nThis method is more readable.\nfrom collections.abc import Iterable\n\nisinstance(item, Iterable) # True / False\nHowever, collections.abc.Iterable does not consider the legacy __getitem__ method – which is sufficient to create an iterable –, unlike an iter() call handling a TypeError exception."
  },
  {
    "objectID": "notes/135/index.html#references",
    "href": "notes/135/index.html#references",
    "title": "How to Know if an Object is an Iterable in Python",
    "section": "References",
    "text": "References\n\nPython official documentation on collections.abc.Iterable"
  },
  {
    "objectID": "notes/11/index.html",
    "href": "notes/11/index.html",
    "title": "Differences between Casting, Parsing and Converting",
    "section": "",
    "text": "Casting: Telling the compiler that an object is really something else without changing it (though some data loss may be incurred).\nobject obj_s= \"12345\";\nstring str_i = (string) obj; // \"12345\" as string, explicit\n\nint small = 12345;\nlong big = 0;\nbig = small; // 12345 as long, implicit\nParsing: Telling the program to interpret (on runtime) a string.\nstring int_s = \"12345\";\nint i = int.Parse(int_s); // 12345 as int\nConverting: Telling the program to use built in methods to try to change type for what may be not simply interchangeable.\ndouble dub = 123.45;\nint i = System.Convert.ToInt32(dub); // 123 as int\n\nhttps://stackoverflow.com/questions/12552625/difference-between-casting-parsing-and-converting#:~:text=Casting%3A%20Telling%20the%20compiler%20that,data%20loss%20may%20be%20incurred).&text=Parsing%3A%20Telling%20the%20program%20to,(on%20runtime)%20a%20string.&text=Converting%3A%20Telling%20the%20program%20to,may%20be%20not%20simply%20interchangeable.\n#programming #type-casting #parsing #conversion"
  },
  {
    "objectID": "notes/160/index.html",
    "href": "notes/160/index.html",
    "title": "How to Rename a WSL Distribution",
    "section": "",
    "text": "To rename a WSL distribution, you need to edit a registry key."
  },
  {
    "objectID": "notes/160/index.html#manually-edit-the-registry-key",
    "href": "notes/160/index.html#manually-edit-the-registry-key",
    "title": "How to Rename a WSL Distribution",
    "section": "Manually Edit the registry Key",
    "text": "Manually Edit the registry Key\n\nPress Win + r and run regedit.exe\nSearch HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\\\nLocate the folder for the distribution you want to rename.\nEdit the DistributionName key."
  },
  {
    "objectID": "notes/160/index.html#using-a-powershell-script",
    "href": "notes/160/index.html#using-a-powershell-script",
    "title": "How to Rename a WSL Distribution",
    "section": "Using a PowerShell Script",
    "text": "Using a PowerShell Script\nYou may not have the permissions to execute a script in PowerShell. To verify your permissions, run the command Get-ExecutionPolicy.\nIf necessary, allow local script execution:\nSet-ExecutionPolicy RemoteSigned\nThis allows the execution of local scripts without signatures while still requiring signatures for downloaded scripts.\n\nScript Description\nThe PowerShell script below automates the WSL distribution renaming. It first lists the current distributions with wsl --list. Then it prompts for the old and new names, and modifies the registry key. Finally, it displays the updated distribution list.\n\n\nThe Script\n# Ensure you run this script as an administrator\n\nfunction Show-WSLDistributions {\n    Write-Host \"`nCurrent WSL Distributions:\"\n    wsl --list\n}\n\nfunction Rename-WSLDistribution {\n    param (\n        [string]$oldName,\n        [string]$newName\n    )\n\n    $lxssKey = \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Lxss\"\n    $distroKey = Get-ChildItem $lxssKey | \n        Where-Object { $_.GetValue(\"DistributionName\") -eq $oldName } |\n        Select-Object -First 1\n\n    if ($distroKey) {\n        Set-ItemProperty -Path $distroKey.PSPath -Name \"DistributionName\" -Value $newName\n        Write-Host \"`nWSL distribution renamed from $oldName to $newName\"\n        \n        Write-Host \"`nChecking if the change is visible...\"\n        Show-WSLDistributions\n        \n        Write-Host \"`nIf you don't see the change reflected above, you may need to restart the WSL service or reboot your computer.\"\n    } else {\n        Write-Host \"`nWSL distribution '$oldName' not found.\"\n    }\n}\n\n# Main script\nWrite-Host \"WSL Distribution Renaming Tool\"\nWrite-Host \"==============================`n\"\n\nShow-WSLDistributions\n\n$oldName = Read-Host \"`nEnter the name of the WSL distribution you want to rename\"\n$newName = Read-Host \"Enter the new name for the distribution\"\n\nRename-WSLDistribution -oldName $oldName -newName $newName"
  },
  {
    "objectID": "notes/147/index.html",
    "href": "notes/147/index.html",
    "title": "Resolving Vim Sluggishness Caused by ALE Linters with LaTeX Files",
    "section": "",
    "text": "I experienced sluggishness in Vim when editing LaTeX files. Despite disabling plugins like vimtex and other settings, Vim remained very slow. Eventually, I found the issue was caused by ALE implicitly enabling several linters."
  },
  {
    "objectID": "notes/147/index.html#ale-enabled-linters-for-latex-files-by-default",
    "href": "notes/147/index.html#ale-enabled-linters-for-latex-files-by-default",
    "title": "Resolving Vim Sluggishness Caused by ALE Linters with LaTeX Files",
    "section": "ALE Enabled Linters for LaTeX Files by Default",
    "text": "ALE Enabled Linters for LaTeX Files by Default\nTo identify the enabled linters by default, I ran the :ALEInfo command in Vim and found the following:\n  Enabled Linters: ['alex', 'chktex', 'cspell', 'lacheck', 'proselint', 'redpen', 'texlab', 'textlint', 'vale', 'writegood']"
  },
  {
    "objectID": "notes/147/index.html#solving-the-problem",
    "href": "notes/147/index.html#solving-the-problem",
    "title": "Resolving Vim Sluggishness Caused by ALE Linters with LaTeX Files",
    "section": "Solving the Problem",
    "text": "Solving the Problem\nI addressed this problem with a simple solution: by removing everything except chktex – so that I only keep a genuine LaTeX linter – and explicitly defining it:\nlet g:ale_linters = {\n\\   'tex': ['chktex'],\n\\}"
  },
  {
    "objectID": "notes/147/index.html#preventing-automatic-linter-activation-in-the-future",
    "href": "notes/147/index.html#preventing-automatic-linter-activation-in-the-future",
    "title": "Resolving Vim Sluggishness Caused by ALE Linters with LaTeX Files",
    "section": "Preventing Automatic Linter Activation in the Future",
    "text": "Preventing Automatic Linter Activation in the Future\nTo prevent similar issues in the future, I added the following line to my .vimrc:\nlet g:ale_linters_explicit = 1\nThis ensures that ALE will only use the linters explicitly defined in the g:ale_linters dictionary."
  },
  {
    "objectID": "notes/147/index.html#conclusion",
    "href": "notes/147/index.html#conclusion",
    "title": "Resolving Vim Sluggishness Caused by ALE Linters with LaTeX Files",
    "section": "Conclusion",
    "text": "Conclusion\nALE enables several linters by default if none is explicitly defined. This can lead to sluggishness in Vim when editing LaTeX files. By explicitly defining the linters and activating the g:ale_linters_explicit option, you can prevent this issue."
  },
  {
    "objectID": "notes/22/index.html",
    "href": "notes/22/index.html",
    "title": "Bash history Toolkit",
    "section": "",
    "text": "Exit bash without writing anything\nkill -9 $$\nThis is hacky and aggressive. But it’s a fun way to end an espionage session.\nClears the history of the current session, even this command itself\nhistory -c\nDisables history saving\nunset HISTFILE\nReloads history from disk\nhistory -r\nExecutes a commande without including it in history\necho foo bar; history -d $(history 1)\nDeletes your password (a command, etc.) from your history\nIf all you are concerned about is getting rid of a single entry, you can use the previous example creatively. Use history to find the number of the entry to delete. Then delete it by number. For example…\n$ history\n  1  pwd\n  2  date\n  3  sudovisudo\n  4  hunter2\n  5  man history\n  6  help history\n  7  history\n$ history -d 4\nI hope I don’t have to tell you this, but just in case: Don’t grep history for your password. If you “really do” need to search history, do history | LESSHISTFILE=/dev/null less, and explicitly do a / search.\nIf you are really embarrassed and want there to be no record of you deleting something from history, you can combined this concept with the last.\nhistory -d 4; history -d $(history 1)\nOr to also get rid of the original mistake…\nfor n in \"$(history 1)\" 4 3; do history -d $n; done\nNotice that you have to cycle over the entry numbers in descending order because each call to history -d pops the entry out of the list and all subsequent entries’ numbers decrease by 1. Also, you have to double quote the subshell because history 1 returns not just the number, but also the command and its arguments, and each would get a separate cycle in the for loop. But at this point this is turning into a bash lesson and I’ll stop.\n\n#shell #bash\nhttps://stackoverflow.com/a/52208927"
  },
  {
    "objectID": "notes/28/index.html",
    "href": "notes/28/index.html",
    "title": "How to see network traffic in real time in Linux",
    "section": "",
    "text": "The cbm package is a small tool that shows network traffic in real time. Plain and simple.\napt install cbm\n#server #sysadmin"
  },
  {
    "objectID": "notes/37/index.html",
    "href": "notes/37/index.html",
    "title": "How to run the Python code formatter Black in Vim",
    "section": "",
    "text": "Run Black\n:!black %\n:e!\n\n\nCreate a keybind to run Black and save file by adding this to your .vimrc\nautocmd FileType python nnoremap &lt;buffer&gt; &lt;leader&gt;b :w&lt;cr&gt;:!black %&lt;cr&gt;:e!&lt;cr&gt;\nBy default, the &lt;leader&gt; key is the backslash \\ character. Mine is the spacebar key. You can remap it by adding the following line in your .vimrc:\nlet mapleader=\" \"\nIf it fails to reformat the code, put Vim in the background by pressing Ctrl + z so that you can read the error message, and then just come back to Vim with the fg command."
  },
  {
    "objectID": "notes/93/index.html",
    "href": "notes/93/index.html",
    "title": "General Strategy Whenever You Have a Bug",
    "section": "",
    "text": "Locate where the bug is happening.\nUnderstand the cause of the bug.\nFix the bug.\nVerify that the fix worked.\nLearn the bug’s lesson. Every bug is a learning opportunity in disguise! What can we learn from this one, and how can we avoid making similar mistakes in the future?"
  },
  {
    "objectID": "notes/93/index.html#references",
    "href": "notes/93/index.html#references",
    "title": "General Strategy Whenever You Have a Bug",
    "section": "References",
    "text": "References\n\nhttps://py.mit.edu/spring23/readings/flood_fill#_debugging"
  }
]