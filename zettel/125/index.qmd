---
title: "Amending a Specific Past Git Commit Without Affecting Recent Ones"
subtitle: "[Zettel#125](/zettel/125)"
date: 2023-09-28
date-modified: ""
date-format: iso
categories: [zettelkasten]
---
## Introduction

This guide provides a step-by-step process for amending a specific past Git commit without affecting more recent commits. This is particularly useful when you've made a mistake in a past commit and want to correct it without creating a new commit or altering the latest commit.

## Step-by-Step Guide

### 1. Create a Temporary Branch

Create a temporary branch to save the state of your current work.

```bash
git switch -c temp-branch
```

### 2. Switch to the Commit Before the Mistake

Find the commit hash of the commit you want to amend, and switch to it.

```bash
git log
git switch --detach <commit_hash>
```

### 3. Amend the Commit

Make the necessary changes to the code file and stage them. Then amend the commit.

```bash
# Make your changes to the code file
git add <file_name>
git commit --amend --no-edit
```

### 4. Reapply Subsequent Commits

Now reapply the commits that came after the one you amended.

```bash
git rebase --onto HEAD <commit_hash> temp-branch
```

### 5. Switch Back to Main and Force Push

Switch back to your main branch and force push the changes.

```bash
git switch main
git reset --hard temp-branch
git push --force-with-lease  # Be cautious when using force push
```

### 6. Clean Up

Delete the temporary branch:

```bash
git branch -d temp-branch
```

## Important Notes

* **Backup**: Always make sure to backup your repository before performing operations that rewrite history.
* **Collaboration**: If you're working with others, you'll need to coordinate with them, as rewriting history will affect everyone else.

## Related Zettel

* [Zettel#72](/zettel/72)
* [Zettel#91](/zettel/91)
