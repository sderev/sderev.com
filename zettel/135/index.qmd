---
title: "How to Know if an Object is an Iterable in Python"
subtitle: "[Zettel#135](/zettel/135)"
date: 2023-10-19
date-modified: ""
date-format: iso
categories: [zettelkasten]
---
## Using `hasattr`

This is a straightforward way but can be a bit hard to read.

```python
hasattr(item, "__iter__") # True / False
```

## Using `isinstance`

I prefer this method as it's more readable.

```python
from collections.abc import Iterable

isinstance(item, Iterable) # True / False
```

## Using `try-except`

This is another way, but it relies on exception handling. Unless there is a specific reason to use it, I wouldn't choose it.

```python
def is_iterable(item):
    try:
        iter(item)
        return True
    except TypeError:
        return False
```

## References

* [Python official documentation on Abstract Base Classes for Collections](https://docs.python.org/3/library/collections.abc.html)
