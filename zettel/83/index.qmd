---
title: "Partial Functions vs Closures in Python"
subtitle: "Zettel#83"
date: 2023-05-02
date-modified: ""
date-format: iso
categories: [zettelkasten]
---
## Partial Functions

* Derived from another function by fixing some of its arguments
* Reduces the number of required arguments to call the new function
* Created using the `partial` function from the `functools` module
* Mainly used for creating specialized versions of more general functions or preconfiguring a function with some arguments for later use

### Example

```python
import functools

def add(x, y):
    return x + y

add_five = functools.partial(add, 5)

result = add_five(3)
print(result)
```

## Closures

* Nested functions that capture and remember values of variables from the enclosing function's scope
* Created using nested functions and the `nonlocal` keyword
* Provide more flexibility by capturing multiple variables from the enclosing scope and having access to the entire scope, not just the fixed arguments
* Used to create functions with behavior that depends on data not passed as arguments and to define stateful functions

### Example

```python
def make_adder(x):
    def add(y):
        return x + y
    return add

add_five = make_adder(5)

result = add_five(3)
print(result)
```

## Key Differences

1. **Creation:** Partial functions use the `functools.partial` function, while closures use nested functions and captured variables
2. **Flexibility:** Closures offer more flexibility due to access to the entire enclosing scope, while partial functions focus on fixing arguments
3. **Intent:** Partial functions specialize or preconfigure functions, while closures create functions with behavior dependent on non-argument data and can define stateful functions

## Related Zettel

* [Zettel#82](/zettel/82)
