---
title: "Creating Unique Non-`None` Placeholders in Python"
subtitle: "Zettel#177"
id: "177"
date: 2024-09-23
date-modified: ""
date-format: iso
categories: [zettelkasten]
spotlight: ""
---
Let's say we want to create a function with an optional parameter that distinguishes between `None` as a value and the genuine absence of a value. A solution is to create a unique object with `object()` and check the identity of the argument with the `is` operator.

Since the `object()` function returns a new featureless object every time it is called, we can use it to create unique dummy values â€“ or *sentinel values*.

### Example:

```python
DEFAULT = object()

def func(arg=DEFAULT):
    if arg is DEFAULT:
        print("No argument provided")
    else:
        print(f"Argument provided: {arg}")
```    

With this pattern, we can pass `None` as an argument and the function will correctly identify it as a value. 

## References

* [An article by Trey Hunner on creating unique non-`None` sentinel values in Python](https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Creating_unique_non-None_placeholders:_why_object%28%29%3f)
* [Python documentation on the `object()` function](https://docs.python.org/3/library/functions.html#object)
* [Wikipedia: Sentinel value](https://en.wikipedia.org/wiki/Sentinel_value)
