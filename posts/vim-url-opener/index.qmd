---
title: "Vim: Open the URL Nearest to the Cursor in a Web Browser"
date: "2024-06-03"
categories: [vim, workflow]
description: "Open the URL nearest to the cursor in your web browser with a simple keybind."
image: "img/vintage-computer-setup.png"
---
You can easily open a URL in your web browser with a simple keybind right from Vim. The common practice is to use `gx` as the keybind.

I wrote a small script to improve this workflow: it extracts the URL nearest to the cursor, so that you don't have to place the cursor exactly under the URL anymore.

It also works for Windows via WSL.

<video>
<source src="videos/demo_extract_and_open_nearest_url.mp4" type"video/mp4">
</video>

## Installation

I created a [GitHub repository](https://github.com/sderev/vim-open-url) where you can find the scripts, the Vim function, and a shorter version of the instructions below.

## Usage

To open a URL in your web browser, just place the cursor near the URL and press `gx`. There is no need to have your cursor exactly under the URL.

## Setup

Note that this is not a Vim plugin, but a set of Unix filters following the Unix philosophy: "Do one thing and do it well."

This workflow is made of three parts:

* a Bash script (to call the web browser);
* a Python script (to extract the URL nearest to the cursor);
* a Vim function and a keybind (to call the scripts).

## Add the Scripts to Your `PATH`

The two scripts should be in your `PATH`. This environment variable contains a list of directories in which the shell looks for executables.

If you don't have a custom directory in which you place your scripts to be in your `PATH`, one default should be `/usr/local/bin`. They should also be executable, so you should run `chmod +x /path/to/script`.

### Create a Custom Directory for Your Scripts

Personally, I have a directory `~/.scripts` in which I place all my scripts.

Adding a directory to your `PATH` environment variable is done by adding the following line to your `.bashrc` or `.zshrc`:

```bash
export PATH=$PATH:/path/to/your/directory
```

## Bash Script: Calling your Web Browser

This script just call the executable of your web browser and takes a URL as argument. If you're using WSL and use Brave, you should create this script:

```bash
#!/bin/bash

/mnt/c/Program\ Files/BraveSoftware/Brave-Browser/Application/brave.exe "$1"
```

If you're on Linux or MacOS, just change the path appropriately.

I named the script `brave`, but you can name it whatever you want. Just remember to change the name in the Vim function.

## Python Script: Extract the URL Nearest to the Cursor

As for the Bash script, paste the code below in an executable file and put it in your `PATH`. I named it `extract_nearest_url`.

```python
#!/usr/bin/python3

import re
import shlex
import sys


def main():
    line = sys.argv[1] if len(sys.argv) > 1 else ""
    cursor_pos = int(sys.argv[2]) if len(sys.argv) > 2 else 0
    url = extract_nearest_url(line, cursor_pos)
    print(url, end="")  # Print without additional newline


def extract_nearest_url(line, cursor_pos):
    # Regular expression to extract URLs
    url_patterns = (
        r"\[.*?\]\((\S+?)\)",  # Markdown link
        r"<(\S+?)>",  # Angle brackets
        r"\\href\{(\S+?)\}\{.*?\}",  # LaTeX \href{}{}
        r"(http[s]?://\S+)",  # Plain URLs with protocol
        r"(\b\S+\.\S+)\b",  # Plain URLs without protocol
    )
    pattern = "|".join(url_patterns)
    matches = re.finditer(pattern, line)

    closest_url = None
    min_distance = float("inf")

    # Extract URL
    for match in matches:
        url = next((group for group in match.groups() if group), None)

        # Calculate distances to cursor position
        start_pos = match.start()
        end_pos = match.end()
        distance = min(abs(cursor_pos - start_pos), abs(cursor_pos - end_pos))

        # Update closest URL
        if distance < min_distance:
            min_distance = distance
            # Clean the URL by removing any trailing punctuation and whitespace
            cleaned_url = re.sub(r"[),.\s]*$", "", url)
            closest_url = shlex.quote(cleaned_url)

    return closest_url if closest_url else ""


if __name__ == "__main__":
    main()
```

## Vim Function and Keybind

Add the following code to your `.vimrc`:

```vim
" This function opens the URL nearest to the cursor in Brave 
function! OpenURLNearestToCursor()
  let l:line = getline('.')
  let l:col = col('.')
  let l:cleaned_url = system('extract_nearest_url "' . l:line . '" ' . l:col)

  " If a URL has been found, open it in Brave
  if l:cleaned_url != ''
      silent exec "!brave " . l:cleaned_url
      redraw!
  endif
endfunction

" Bind the function to the `gx` key in normal mode
nnoremap gx :call OpenURLNearestToCursor()<CR>
```

Notice that the function calls the `extract_nearest_url` script and the `brave` script. If you named them differently, you should change the names in the function.

Finally, on the last line, you can see the keybind `gx`. You can change it to whatever you want.

## Conclusion

This workflow is an improvement over the ordinary `gx` keybind. You don't have to place the cursor exactly under the URL anymore. It's a small change, but it's pleasant to use.
